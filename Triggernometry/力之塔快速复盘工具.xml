<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.753">
  <ExportedFolder Id="d48ae1af-22ef-42c8-9325-af5392f0817a" Name="荔枝塔快速复盘工具（指挥用）" Enabled="true">
    <Folders>
      <Folder FFXIVZoneFilterEnabled="True" FfxivZoneFilterRegularExpression="^1252$" Id="f6f9c01e-c5bb-4242-9c31-2003b6418935" Name="重构" Enabled="true">
        <Folders>
          <Folder Id="2543b2d4-0e7a-4f1f-b4c9-da798e148a89" Name="0.进塔前准备" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="1.进岛后等级检查" Id="cbba6654-5beb-4aca-96c0-b7498a09d2a0" RegularExpression="^.{15}\S+ 28:967:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_level_max" VariableExpression="20" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_level_offset" VariableExpression="0x37f0" ActionType="Variable" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_level_stars" VariableExpression="12" ActionType="Variable" />
                  <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 变量赋值&#xD;&#xA;var offset = ${v:The_Forked_Tower_Blood_level_offset};&#xD;&#xA;var maxlevel = ${v:The_Forked_Tower_Blood_level_max};&#xD;&#xA;var stars = ${v:The_Forked_Tower_Blood_level_stars};&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;int totalCount = allEntities.Count();&#xD;&#xA;&#xD;&#xA;var output1Builder = new StringBuilder();&#xD;&#xA;var output2Builder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;// 读内存和buff层数&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    IntPtr finalAddress = (IntPtr)entity.Address + offset;&#xD;&#xA;    Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4226);&#xD;&#xA;    var level = Memory.Read&lt;byte&gt;(Memory.XivProcHandle, finalAddress);&#xD;&#xA;    &#xD;&#xA;    if(level &lt; maxlevel)&#xD;&#xA;    {&#xD;&#xA;        output1Builder.Append($&quot;{entity.Name}({level}级),&quot;);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    int stackCount = status?.Stack ?? 0;&#xD;&#xA;    if(stackCount &lt; stars)&#xD;&#xA;    {&#xD;&#xA;        output2Builder.Append($&quot;{entity.Name}({stackCount}星),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果&#xD;&#xA;string output1 = output1Builder.Length == 0 &#xD;&#xA;    ? &quot;所有人都是满级&quot; &#xD;&#xA;    : &quot;没满级的是：&quot; + output1Builder.ToString().TrimEnd(',');&#xD;&#xA;&#xD;&#xA;string output2 = output2Builder.Length == 0 &#xD;&#xA;    ? &quot;所有人都是满星&quot; &#xD;&#xA;    : &quot;没满星的是：&quot; + output2Builder.ToString().TrimEnd(',');&#xD;&#xA;&#xD;&#xA;var output = $&quot;附近人数：{totalCount}人\n{output1}\n{output2}&quot;;&#xD;&#xA;Log(output);&#xD;&#xA;    " ActionType="ExecuteScript" ExecutionDelayExpression="5000" />
                  <Action OrderNumber="5" VariableOp="UnsetRegex" VariableName="^The_Forked_Tower_Blood_level" VariableExpression="0x37f0" Enabled="False" ActionType="Variable" />
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${_me.InParty}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="2.进塔前1分钟检测辅助职业" Id="27c3ffe0-bcf9-46c9-830b-5a2107002301" RegularExpression="(?&lt;timestamp&gt;^.{14}) 257 (?&lt;type&gt;101):(?&lt;instance&gt;8004002D):(?&lt;flags&gt;00020001):(?&lt;location&gt;29):(?&lt;data0&gt;[^:]*):(?&lt;data1&gt;[^:]*)(?:$|:)">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using System.Collections.Generic; // 添加此命名空间以使用Dictionary&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 【4242=自由人，4358=骑士，4359=狂战士，4360=武僧，4361=猎人，4362=武士，4363=吟游诗人】&#xD;&#xA;// 【4364=风水师，4365=时魔法师，4366=炮击士，4367=药剂师，4368=预言师，4369=盗贼】&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder提高字符串拼接性能&#xD;&#xA;var output4242 = new StringBuilder();&#xD;&#xA;var output4360 = new StringBuilder();&#xD;&#xA;var output4368 = new StringBuilder();&#xD;&#xA;&#xD;&#xA;// 计数器初始化&#xD;&#xA;var counts = new Dictionary&lt;int, int&gt;&#xD;&#xA;{&#xD;&#xA;    {4358, 0}, {4359, 0}, {4361, 0}, {4362, 0},&#xD;&#xA;    {4363, 0}, {4364, 0}, {4365, 0}, {4366, 0},&#xD;&#xA;    {4367, 0}, {4369, 0}&#xD;&#xA;};&#xD;&#xA;int count4367TD = 0;&#xD;&#xA;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;int totalCount = allEntities.Count();&#xD;&#xA;&#xD;&#xA;// buff检测&#xD;&#xA;foreach (var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    foreach (var status in entity.Statuses)&#xD;&#xA;    {&#xD;&#xA;        switch (status.StatusID)&#xD;&#xA;        {&#xD;&#xA;            case 4242:&#xD;&#xA;                output4242.Append($&quot;{entity.Name},&quot;);&#xD;&#xA;                break;&#xD;&#xA;            case 4360:&#xD;&#xA;                output4360.Append($&quot;{entity.Name},&quot;);&#xD;&#xA;                break;&#xD;&#xA;            case 4368:&#xD;&#xA;                output4368.Append($&quot;{entity.Name},&quot;);&#xD;&#xA;                break;&#xD;&#xA;            case 4367:&#xD;&#xA;                counts[4367]++;&#xD;&#xA;                if (!entity.Job.IsHealer)&#xD;&#xA;                {&#xD;&#xA;                    count4367TD++;&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;            default:&#xD;&#xA;                if (counts.ContainsKey(status.StatusID))&#xD;&#xA;                {&#xD;&#xA;                    counts[status.StatusID]++;&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果&#xD;&#xA;string GetOutput(StringBuilder sb, string noneMsg, string prefix)&#xD;&#xA;{&#xD;&#xA;    return sb.Length == 0 &#xD;&#xA;        ? noneMsg &#xD;&#xA;        : $&quot;{prefix}{sb.ToString().TrimEnd(',')}&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;var output4242Str = GetOutput(output4242, &quot;未发现辅助自由人&quot;, &quot;辅助自由人是：&quot;);&#xD;&#xA;var output4360Str = GetOutput(output4360, &quot;未发现辅助武僧&quot;, &quot;辅助武僧是：&quot;);&#xD;&#xA;var output4368Str = GetOutput(output4368, &quot;未发现辅助预言师&quot;, &quot;辅助预言师是：&quot;);&#xD;&#xA;&#xD;&#xA;var output = new StringBuilder()&#xD;&#xA;    .AppendLine($&quot;附近人数：{totalCount}人&quot;)&#xD;&#xA;    .AppendLine(output4242Str)&#xD;&#xA;    .AppendLine(output4360Str)&#xD;&#xA;    .AppendLine(output4368Str)&#xD;&#xA;    .AppendLine($&quot;辅助盗贼{counts[4369]}人，辅助猎人{counts[4361]}人，辅助时魔法师{counts[4365]}人&quot;)&#xD;&#xA;    .AppendLine($&quot;辅助骑士{counts[4358]}人，辅助吟游诗人{counts[4363]}人，辅助武士{counts[4362]}人&quot;)&#xD;&#xA;    .AppendLine($&quot;辅助狂战士{counts[4359]}人,辅助风水师{counts[4364]}人，辅助炮击士{counts[4366]}人&quot;)&#xD;&#xA;    .Append($&quot;辅助药剂师{counts[4367]}人（火种{count4367TD}人）&quot;)&#xD;&#xA;    .ToString();&#xD;&#xA;&#xD;&#xA;Log(output);&#xD;&#xA;    " ActionType="ExecuteScript" ExecutionDelayExpression="270000" />
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${_me.InParty}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="3.进塔后再次检测辅助职业and标记" Id="d57bb40d-fc71-4203-a96e-cf34c8f28782" RegularExpression="^.{15}\S+ 28:(?&lt;mapid&gt;968):">
                <Actions>
                  <Action OrderNumber="1" TriggerId="aeaac13a-ebff-4eb9-9512-73d669669331" TriggerForce="regexp,conditions,active" ActionType="Trigger" />
                  <Action OrderNumber="2" TriggerOp="DisableTrigger" TriggerId="1e8be02f-9844-472c-9334-dc0a4802a9d3" ActionType="Trigger" />
                  <Action OrderNumber="3" TriggerOp="DisableTrigger" TriggerId="ac44a147-7899-4ffa-9110-6bf60cc62b1a" ActionType="Trigger" />
                  <Action OrderNumber="4" TriggerOp="DisableTrigger" TriggerId="6254df27-6c5e-48d5-8891-9d32822c2598" ActionType="Trigger" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" ActionType="Trigger" />
                  <Action OrderNumber="6" ExecScriptExpression="using System;&#xD;&#xA;using System.Text;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 标记实体的辅助方法&#xD;&#xA;static void MarkEntity(Triggernometry.FFXIV.Entity entity, string markType)&#xD;&#xA;{&#xD;&#xA;    string markJson = $&quot;{{\&quot;ActorID\&quot;: 0x{entity.ID:X},\&quot;MarkType\&quot;: \&quot;{markType}\&quot;,\&quot;LocalOnly\&quot;: false}}&quot;;&#xD;&#xA;    RealPlugin.plug.InvokeNamedCallback(&quot;mark&quot;, markJson);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 【buffID对应职业】&#xD;&#xA;// 4242=自由人，4358=骑士，4359=狂战士，4360=武僧，4361=猎人&#xD;&#xA;// 4362=武士，4363=吟游诗人，4364=风水师，4365=时魔法师&#xD;&#xA;// 4366=炮击士，4367=药剂师，4368=预言师，4369=盗贼&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接&#xD;&#xA;var output4242 = new StringBuilder();&#xD;&#xA;var output4360 = new StringBuilder();&#xD;&#xA;var output4368 = new StringBuilder();&#xD;&#xA;&#xD;&#xA;// 使用int键字典初始化计数器（键=buffID，值=计数）&#xD;&#xA;var counts = new Dictionary&lt;int, int&gt;&#xD;&#xA;{&#xD;&#xA;    {4358, 0}, {4359, 0}, {4361, 0}, {4362, 0},&#xD;&#xA;    {4363, 0}, {4364, 0}, {4365, 0}, {4366, 0},&#xD;&#xA;    {4367, 0}, {4369, 0}&#xD;&#xA;};&#xD;&#xA;// 药剂师火种单独计数（非buffID，单独定义）&#xD;&#xA;int count4367TD = 0;&#xD;&#xA;&#xD;&#xA;// 武士技能计数字典初始化（4个boss，每个包含&quot;扔钱&quot;和&quot;居合&quot;）&#xD;&#xA;var allBossSkillDict = new VariableDictionary();&#xD;&#xA;for (int i = 1; i &lt;= 4; i++)&#xD;&#xA;{&#xD;&#xA;    var bossDict = new VariableDictionary();&#xD;&#xA;    bossDict.SetValue(&quot;扔钱&quot;, new VariableDictionary());&#xD;&#xA;    bossDict.SetValue(&quot;居合&quot;, new VariableDictionary());&#xD;&#xA;    allBossSkillDict.SetValue($&quot;boss{i}&quot;, bossDict);&#xD;&#xA;}&#xD;&#xA;var initializedSamurais = new VariableDictionary(); // 记录已初始化的武士&#xD;&#xA;&#xD;&#xA;// 获取附近玩家实体（排除NPC）&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;int totalCount = allEntities.Count();&#xD;&#xA;&#xD;&#xA;// 检测buff并处理标记和字典初始化&#xD;&#xA;foreach (Triggernometry.FFXIV.Entity entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if (entity == null || entity.Statuses == null) continue; // 空值防护&#xD;&#xA;    &#xD;&#xA;    foreach (var status in entity.Statuses)&#xD;&#xA;    {&#xD;&#xA;        if (status == null) continue;&#xD;&#xA;        &#xD;&#xA;        int statusId = status.StatusID;&#xD;&#xA;        &#xD;&#xA;        switch (statusId)&#xD;&#xA;        {&#xD;&#xA;            // 需记录名字的职业&#xD;&#xA;            case 4242:&#xD;&#xA;                output4242.Append(entity.Name).Append(&quot;,&quot;);&#xD;&#xA;                break;&#xD;&#xA;                &#xD;&#xA;            case 4360:&#xD;&#xA;                output4360.Append(entity.Name).Append(&quot;,&quot;);&#xD;&#xA;                break;&#xD;&#xA;                &#xD;&#xA;            case 4368:&#xD;&#xA;                output4368.Append(entity.Name).Append(&quot;,&quot;);&#xD;&#xA;                break;&#xD;&#xA;                &#xD;&#xA;            // 仅需计数的职业（直接累加字典中的值）&#xD;&#xA;            case 4358:&#xD;&#xA;            case 4359:&#xD;&#xA;            case 4363:&#xD;&#xA;            case 4364:&#xD;&#xA;            case 4366:&#xD;&#xA;            case 4369:&#xD;&#xA;                counts[statusId]++;&#xD;&#xA;                break;&#xD;&#xA;                &#xD;&#xA;            // 猎人：计数+标记&#xD;&#xA;            case 4361:&#xD;&#xA;                counts[statusId]++;&#xD;&#xA;                if (counts[statusId] &lt; 3)&#xD;&#xA;                {&#xD;&#xA;                    MarkEntity(entity, $&quot;stop{counts[statusId]}&quot;);&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;                &#xD;&#xA;            // 时魔法师：计数+标记&#xD;&#xA;            case 4365:&#xD;&#xA;                counts[statusId]++;&#xD;&#xA;                if (counts[statusId] &lt; 4)&#xD;&#xA;                {&#xD;&#xA;                    MarkEntity(entity, $&quot;bind{counts[statusId]}&quot;);&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;                &#xD;&#xA;            // 药剂师：区分治疗/火种，分别计数+标记&#xD;&#xA;            case 4367:&#xD;&#xA;                if (entity.Job?.IsHealer ?? false) // 空值防护&#xD;&#xA;                {&#xD;&#xA;                    counts[statusId]++;&#xD;&#xA;                    if (counts[statusId] &lt; 9)&#xD;&#xA;                    {&#xD;&#xA;                        MarkEntity(entity, $&quot;attack{counts[statusId]}&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    count4367TD++;&#xD;&#xA;                    if (count4367TD &lt; 2)&#xD;&#xA;                    {&#xD;&#xA;                        MarkEntity(entity, &quot;cross&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;                &#xD;&#xA;            // 武士：计数+技能字典初始化&#xD;&#xA;            case 4362:&#xD;&#xA;                counts[statusId]++;&#xD;&#xA;                string samuraiKey = $&quot;{entity.HexID}_{entity.Name}&quot;;&#xD;&#xA;                if (!initializedSamurais.ContainsKey(samuraiKey))&#xD;&#xA;                {&#xD;&#xA;                    initializedSamurais.SetValue(samuraiKey, &quot;0&quot;);&#xD;&#xA;                    &#xD;&#xA;                    // 为4个boss初始化该武士的技能计数&#xD;&#xA;                    for (int bossIdx = 1; bossIdx &lt;= 4; bossIdx++)&#xD;&#xA;                    {&#xD;&#xA;                        var bossDict = allBossSkillDict.GetValue($&quot;boss{bossIdx}&quot;) as VariableDictionary;&#xD;&#xA;                        var throwMoneyDict = bossDict.GetValue(&quot;扔钱&quot;) as VariableDictionary;&#xD;&#xA;                        var iaijutsuDict = bossDict.GetValue(&quot;居合&quot;) as VariableDictionary;&#xD;&#xA;                        &#xD;&#xA;                        throwMoneyDict.SetValue(samuraiKey, &quot;0&quot;);&#xD;&#xA;                        iaijutsuDict.SetValue(samuraiKey, &quot;0&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 保存武士技能字典到全局变量&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(&#xD;&#xA;    false, &#xD;&#xA;    &quot;The_Forked_Tower_Blood_all_boss_skills&quot;, &#xD;&#xA;    allBossSkillDict&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;// 处理输出结果（去除末尾逗号）&#xD;&#xA;string output4242Str = output4242.Length == 0 &#xD;&#xA;    ? &quot;未发现辅助自由人&quot; &#xD;&#xA;    : &quot;辅助自由人是：&quot; + output4242.ToString(0, output4242.Length - 1);&#xD;&#xA;&#xD;&#xA;string output4360Str = output4360.Length == 0 &#xD;&#xA;    ? &quot;未发现辅助武僧&quot; &#xD;&#xA;    : &quot;辅助武僧是：&quot; + output4360.ToString(0, output4360.Length - 1);&#xD;&#xA;&#xD;&#xA;string output4368Str = output4368.Length == 0 &#xD;&#xA;    ? &quot;未发现辅助预言师&quot; &#xD;&#xA;    : &quot;辅助预言师是：&quot; + output4368.ToString(0, output4368.Length - 1);&#xD;&#xA;&#xD;&#xA;// 构建最终输出&#xD;&#xA;var output = new StringBuilder()&#xD;&#xA;    .AppendLine($&quot;附近人数：{totalCount}人&quot;)&#xD;&#xA;    .AppendLine(output4242Str)&#xD;&#xA;    .AppendLine(output4360Str)&#xD;&#xA;    .AppendLine(output4368Str)&#xD;&#xA;    .AppendLine($&quot;辅助盗贼{counts[4369]}人，辅助猎人{counts[4361]}人，辅助时魔法师{counts[4365]}人&quot;)&#xD;&#xA;    .AppendLine($&quot;辅助骑士{counts[4358]}人，辅助吟游诗人{counts[4363]}人，辅助武士{counts[4362]}人&quot;)&#xD;&#xA;    .AppendLine($&quot;辅助狂战士{counts[4359]}人,辅助风水师{counts[4364]}人，辅助炮击士{counts[4366]}人&quot;)&#xD;&#xA;    .AppendLine($&quot;辅助药剂师{counts[4367] + count4367TD}人（火种{count4367TD}人）&quot;)&#xD;&#xA;    .Append($&quot;已初始化{initializedSamurais.Values.Count}名武士的技能计数字典&quot;)  // 最后一行用Append&#xD;&#xA;    .ToString();&#xD;&#xA;&#xD;&#xA;Log(output);&#xD;&#xA;" ActionType="ExecuteScript" ExecutionDelayExpression="2000" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="e7ed8254-f5e5-4c10-a8b8-72e2f52d932c" Name="9.工具" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="false" Name="清除所有标记" Id="aeaac13a-ebff-4eb9-9512-73d669669331" RegularExpression="">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;bind3&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="2" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;bind2&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="3" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;bind1&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="4" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack8&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="5" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack7&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="6" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack6&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="7" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack5&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="8" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack4&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="9" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack3&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="10" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack2&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="11" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack1&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="12" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;stop1&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="13" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;stop2&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="14" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;square&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="15" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;circle&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="16" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;cross&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="17" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;triangle&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="时魔法师沉默提醒" Id="492dad84-832a-4172-9090-c03395699b98" RegularExpression="(?&lt;timestamp&gt;^.{14}) (?:ActionEffect|AOEActionEffect) (?&lt;type&gt;(?:15|16)):(?&lt;sourceId&gt;[^:]*):(?&lt;source&gt;[^:]*):(?&lt;id&gt;(A7E5|A932)):(?&lt;ability&gt;(?:[^:]|: )*?):(?&lt;targetId&gt;10[^:]*):">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/y 时魔法师（${_entity[${targetId}].Name}）被沉默了" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${_entity[${targetId}].HasStatus(4365)}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${_entity[${targetId}].StatusTimer(4470)}" ExpressionTypeL="Numeric" ExpressionR="59" ExpressionTypeR="Numeric" ConditionType="NumericGreater" />
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="111dd6e7-58b7-41f7-8fd3-fc8d53a4be81" Name="1.boss1" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Name="3.北分摊（向南击飞）" Id="5af89fa4-e054-480d-a5e1-e693bbf930ad" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A2E8).*?(?&lt;tid&gt;1.{7})">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="The_Forked_Tower_Blood_boss1_comet_north" ListVariableExpression="${_ffxiventity[${tid}].Name}" ActionType="ListVariable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="2.南分摊（向北击飞）" Id="9efaa332-3c75-4555-8c95-4875ee95c10c" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A2E7).*?(?&lt;tid&gt;1.{7})">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="The_Forked_Tower_Blood_boss1_comet_south" ListVariableExpression="${_ffxiventity[${tid}].Name}" ActionType="ListVariable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="4.陨石错误位置检测new" Id="4ae87912-2462-4287-9a57-eb709ad55867" RegularExpression="^.{15}\S+ 105:Add.*?:BNpcID:1EBD76.*?:Heading:(?&lt;h&gt;[^:]+).*?:PosX:(?&lt;x&gt;[^:]+):PosY:(?&lt;y&gt;[^:]+):PosZ:(?&lt;z&gt;[^:]+)" PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="30000">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="禁止重复触发（后续放的标记也是这个）" DescriptionOverride="True" />
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using System.Threading;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 配置参数&#xD;&#xA;const ushort TargetStatusID = 4354; // 目标buff ID&#xD;&#xA;const double WaitOffset = 0.1; // 等待偏移量：timer - 0.1秒&#xD;&#xA;const double SafetyCompensation = 0.05; // 安全补偿时间(秒)&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string message) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [陨石检测] {message}&quot;);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    Log(&quot;===== 开始陨石buff检测流程 =====&quot;);&#xD;&#xA;    &#xD;&#xA;    // 第一步：先获取初始实体快照（使用完整命名空间Triggernometry.FFXIV.Entity）&#xD;&#xA;    DateTime initialStartTime = DateTime.UtcNow;&#xD;&#xA;    double? initialTimer = null;&#xD;&#xA;&#xD;&#xA;    // 初始获取一次buff时间用于计算等待，明确指定FFXIV命名空间下的Entity&#xD;&#xA;    var initialBuffEntity = Triggernometry.FFXIV.Entity.GetEntities()&#xD;&#xA;        .Where(e =&gt; e.BNpcID == 0 &#xD;&#xA;                 &amp;&amp; e.Statuses != null &#xD;&#xA;                 &amp;&amp; e.Statuses.Any(s =&gt; s.StatusID == TargetStatusID))&#xD;&#xA;        .Select(e =&gt; e.Statuses.First(s =&gt; s.StatusID == TargetStatusID))&#xD;&#xA;        .FirstOrDefault();&#xD;&#xA;&#xD;&#xA;    if (initialBuffEntity == null)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;初始检测：未发现带有目标buff的实体&quot;);&#xD;&#xA;        Log(&quot;===== 检测流程终止 =====&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    initialTimer = initialBuffEntity.Timer;&#xD;&#xA;    Log($&quot;初始基准：获取到buff时间为 {initialTimer.Value:F6} 秒（用于计算等待）&quot;);&#xD;&#xA;&#xD;&#xA;    // 计算初始处理耗时&#xD;&#xA;    double initialProcessTime = (DateTime.UtcNow - initialStartTime).TotalSeconds;&#xD;&#xA;&#xD;&#xA;    // 第二步：计算并执行等待&#xD;&#xA;    double idealWait = initialTimer.Value - WaitOffset;&#xD;&#xA;    double actualWait = idealWait - initialProcessTime - SafetyCompensation;&#xD;&#xA;    actualWait = Math.Max(actualWait, 0.01); // 确保最小等待时间&#xD;&#xA;&#xD;&#xA;    Log($&quot;等待{actualWait:F4}秒后进行二次检测...&quot;);&#xD;&#xA;    &#xD;&#xA;    int waitMs = (int)Math.Round(actualWait * 1000);&#xD;&#xA;    Thread.Sleep(waitMs);&#xD;&#xA;    Log($&quot;等待完成（计划{actualWait:F4}秒，实际约{waitMs}毫秒）&quot;);&#xD;&#xA;&#xD;&#xA;    // 第三步：执行二次检测，同样指定完整命名空间&#xD;&#xA;    var entities = Triggernometry.FFXIV.Entity.GetEntities()&#xD;&#xA;        .Where(e =&gt; e.BNpcID == 0)&#xD;&#xA;        .ToList();&#xD;&#xA;&#xD;&#xA;    var errorBuilder = new StringBuilder();&#xD;&#xA;    int count = 0;&#xD;&#xA;    double? secondTimer = null; // 二次检测时的buff时间&#xD;&#xA;&#xD;&#xA;    foreach (var entity in entities)&#xD;&#xA;    {&#xD;&#xA;        if (entity == null || entity.Statuses == null)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        var status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == TargetStatusID);&#xD;&#xA;        if (status != null)&#xD;&#xA;        {&#xD;&#xA;            // 在二次检测中获取buff时间（只记录一次）&#xD;&#xA;            if (!secondTimer.HasValue)&#xD;&#xA;            {&#xD;&#xA;                secondTimer = status.Timer;&#xD;&#xA;                Log($&quot;二次检测：获取到buff时间为 {secondTimer.Value:F6} 秒&quot;);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            count++;&#xD;&#xA;            // 位置判断逻辑&#xD;&#xA;            if (Math.Abs(entity.PosY - ${y}) &gt; 2)&#xD;&#xA;            {&#xD;&#xA;                errorBuilder.Append(entity.Name).Append(&quot;,&quot;);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 输出二次检测的buff时间（如果有）&#xD;&#xA;    if (secondTimer.HasValue)&#xD;&#xA;    {&#xD;&#xA;        Log($&quot;二次检测：当前buff剩余时间 {secondTimer.Value:F6} 秒&quot;);&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;二次检测：未发现带有目标buff的实体&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 直接输出检测结果&#xD;&#xA;    string result = errorBuilder.Length == 0 &#xD;&#xA;        ? &quot;没有人位置异常&quot; &#xD;&#xA;        : &quot;位置异常的是：&quot; + errorBuilder.ToString(0, errorBuilder.Length - 1);&#xD;&#xA;    Log($&quot;检测结果：{result}（共{count}人带有目标buff）&quot;);&#xD;&#xA;    Log(&quot;===== 陨石buff检测流程完成 =====&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;检测过程发生错误：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" ExecutionDelayExpression="3000" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="0.标点" Id="f6ece347-fbf8-473a-a588-246aa0605ec7" RegularExpression="^.{15}\S+ 28:968:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: 713.5,   &quot;Z&quot;: 361, &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: 700,&quot;Z&quot;: 347.5,   &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: 686.5,   &quot;Z&quot;: 361,&quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: 686.5,   &quot;Z&quot;: 397,    &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: 700,   &quot;Z&quot;: 410.5,   &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: 713.5,    &quot;Z&quot;: 397,   &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" ExecutionDelayExpression="10000" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss1开怪，食物检查" Id="b173f87d-3395-4757-8bd5-bc24f5f518de" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1450:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss1" ActionType="Variable" />
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：与初始化逻辑保持一致&#xD;&#xA;private const string GLOBAL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string TARGET_BOSS_KEY = &quot;boss1&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典（与初始化时的字典结构匹配）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;全局技能字典未初始化，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取boss4的子字典（对应初始化时的boss4层级）&#xD;&#xA;var boss4Dict = allBossSkills.GetValue(TARGET_BOSS_KEY) as VariableDictionary;&#xD;&#xA;if (boss4Dict == null)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;未找到{TARGET_BOSS_KEY}的字典，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 递归重置boss4字典中所有数值为0（包括嵌套的技能字典）&#xD;&#xA;ResetNumericValues(boss4Dict);&#xD;&#xA;&#xD;&#xA;// 保存更新后的全局字典&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, GLOBAL_DICT_KEY, allBossSkills);&#xD;&#xA;Log($&quot;{TARGET_BOSS_KEY}字典中所有数值已重置为0&quot;);&#xD;&#xA;&#xD;&#xA;// 递归处理方法：适配VariableDictionary结构&#xD;&#xA;static void ResetNumericValues(VariableDictionary dict)&#xD;&#xA;{&#xD;&#xA;    if (dict == null) return;&#xD;&#xA;    &#xD;&#xA;    // 遍历所有键（通过Values.Keys获取，符合VariableDictionary的结构）&#xD;&#xA;    var keys = dict.Values.Keys.ToList();&#xD;&#xA;    foreach (var key in keys)&#xD;&#xA;    {&#xD;&#xA;        var value = dict.GetValue(key);&#xD;&#xA;        &#xD;&#xA;        // 如果是子字典（如&quot;扔钱&quot;、&quot;居合&quot;技能的计数字典），递归处理&#xD;&#xA;        if (value is VariableDictionary subDict)&#xD;&#xA;        {&#xD;&#xA;            ResetNumericValues(subDict);&#xD;&#xA;        }&#xD;&#xA;        // 如果是数值类型（初始化时存储为字符串形式的数字）&#xD;&#xA;        else if (value is VariableScalar scalar)&#xD;&#xA;        {&#xD;&#xA;            // 验证是否为数字（与初始化时的存储方式匹配）&#xD;&#xA;            if (int.TryParse(scalar.Value, out _) || &#xD;&#xA;                float.TryParse(scalar.Value, out _))&#xD;&#xA;            {&#xD;&#xA;                dict.SetValue(key, &quot;0&quot;); // 重置为0（保持字符串存储格式）&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="3" TriggerOp="EnableTrigger" TriggerId="1e8be02f-9844-472c-9334-dc0a4802a9d3" ActionType="Trigger" />
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss1_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接性能&#xD;&#xA;var output = new StringBuilder();&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;&#xD;&#xA;// 读取食物buff（状态ID=48）剩余时间，小于300秒告警&#xD;&#xA;foreach (var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    // 空值防护：避免实体为空导致的异常&#xD;&#xA;    if (entity == null || entity.Statuses == null) continue;&#xD;&#xA;    &#xD;&#xA;    Status foodStatus = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;    if (foodStatus != null)&#xD;&#xA;    {&#xD;&#xA;        // 剩余时间小于300秒（5分钟）时记录&#xD;&#xA;        if (foodStatus.Timer &lt; 300)&#xD;&#xA;        {&#xD;&#xA;            output.Append(entity.Name).Append(&quot;(&quot;).Append((int)foodStatus.Timer).Append(&quot;秒),&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        // 无食物buff时显示0秒&#xD;&#xA;        output.Append(entity.Name).Append(&quot;(0秒),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果&#xD;&#xA;string result;&#xD;&#xA;if (output.Length == 0)&#xD;&#xA;{&#xD;&#xA;    result = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    // 移除末尾的逗号&#xD;&#xA;    result = &quot;食物时间不够的是：&quot; + output.ToString(0, output.Length - 1);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Log(result);&#xD;&#xA;" ActionType="ExecuteScript" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="1.陨石半场位置" Id="346573ec-8260-40cb-8d84-ca622764b889" RegularExpression="^.{15}\S+ 105:Add.*?:BNpcID:1EBD76.*?:Heading:(?&lt;h&gt;[^:]+).*?:PosX:(?&lt;x&gt;[^:]+):PosY:(?&lt;y&gt;[^:]+):PosZ:(?&lt;z&gt;[^:]+)" PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="30000">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="禁止重复触发（后续放的标记也是这个）" DescriptionOverride="True" />
                  <Action OrderNumber="2" ListVariableOp="Push" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss1_comet" VariableExpression="${if:${y}&gt;379?南:北}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;//int count = 0;&#xD;&#xA;string output = &quot;&quot;;&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        //count++;&#xD;&#xA;        uint playerId = entity.ID;&#xD;&#xA;        //string markJson = $&quot;{{\&quot;ActorID\&quot;: 0x{playerId:X},\&quot;MarkType\&quot;: \&quot;attack{count}\&quot;,\&quot;LocalOnly\&quot;: true}}&quot;;&#xD;&#xA;        //RealPlugin.plug.InvokeNamedCallback(&quot;mark&quot;, markJson);&#xD;&#xA;        output = output + entity.Name + &quot;,&quot;;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;output = output.TrimEnd(',');&#xD;&#xA;output = &quot;\n陨石在${var:The_Forked_Tower_Blood_boss1_comet}侧\n北侧分摊点：${lvar:The_Forked_Tower_Blood_boss1_comet_north[-1]}，${lvar:The_Forked_Tower_Blood_boss1_comet_north[-2]}\n南侧分摊点：${lvar:The_Forked_Tower_Blood_boss1_comet_south[-1]}，${lvar:The_Forked_Tower_Blood_boss1_comet_south[-2]}\n陨石点：&quot; + output;&#xD;&#xA;Log(output);" ActionType="ExecuteScript" ExecutionDelayExpression="200" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="8.boss1扔钱记录" Id="1e8be02f-9844-472c-9334-dc0a4802a9d3" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 获取全局武士技能字典（与初始化逻辑保持一致）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(&#xD;&#xA;    false, &#xD;&#xA;    &quot;The_Forked_Tower_Blood_all_boss_skills&quot;&#xD;&#xA;) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取当前触发的技能相关参数&#xD;&#xA;string aid = $&quot;${aid}&quot;; // 技能ID&#xD;&#xA;string sid = $&quot;${sid}&quot;; // 玩家ID&#xD;&#xA;int currentCount = 0;&#xD;&#xA;&#xD;&#xA;// 定义技能与BOSS的映射关系（根据实际情况调整）&#xD;&#xA;var skillBossMap = new Dictionary&lt;string, (string bossKey, string skillName)&gt;&#xD;&#xA;{&#xD;&#xA;    {&quot;A286&quot;, (&quot;boss1&quot;, &quot;扔钱&quot;)},  // A286对应boss1的扔钱技能&#xD;&#xA;    {&quot;A285&quot;, (&quot;boss1&quot;, &quot;居合&quot;)}   // A285对应boss1的居合技能&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;// 检查当前技能是否在监控列表中&#xD;&#xA;if (skillBossMap.TryGetValue(aid, out var skillInfo))&#xD;&#xA;{&#xD;&#xA;    // 获取对应BOSS的技能字典&#xD;&#xA;    var bossDict = allBossSkills.GetValue(skillInfo.bossKey) as VariableDictionary;&#xD;&#xA;    if (bossDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 获取对应技能的玩家计数字典&#xD;&#xA;    var skillDict = bossDict.GetValue(skillInfo.skillName) as VariableDictionary;&#xD;&#xA;    if (skillDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 查找匹配的玩家并更新计数（使用初始化时的唯一键格式）&#xD;&#xA;    var targetKey = skillDict.Values&#xD;&#xA;        .Select(v =&gt; v.Key)&#xD;&#xA;        .FirstOrDefault(key =&gt; key.StartsWith(sid));&#xD;&#xA;&#xD;&#xA;    if (!string.IsNullOrEmpty(targetKey))&#xD;&#xA;    {&#xD;&#xA;        // 解析当前计数并加1&#xD;&#xA;        if (int.TryParse(skillDict.GetStringValue(targetKey), out currentCount))&#xD;&#xA;        {&#xD;&#xA;            skillDict.SetValue(targetKey, (currentCount + 1).ToString());&#xD;&#xA;            &#xD;&#xA;            // 保存更新后的字典&#xD;&#xA;            bossDict.SetValue(skillInfo.skillName, skillDict);&#xD;&#xA;            allBossSkills.SetValue(skillInfo.bossKey, bossDict);&#xD;&#xA;            Interpreter.StaticHelpers.SetDictVariable(&#xD;&#xA;                false, &#xD;&#xA;                &quot;The_Forked_Tower_Blood_all_boss_skills&quot;, &#xD;&#xA;                allBossSkills&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="75a40d8a-8358-4fe5-b8b6-502f00981417" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1450:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss1_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss1_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss1_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss1_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：与初始化的全局字典保持一致&#xD;&#xA;private const string GLOBAL_SKILL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string BOSS1_KEY = &quot;boss1&quot;;&#xD;&#xA;private const string SKILL_THROW_MONEY = &quot;扔钱&quot;;&#xD;&#xA;private const string SKILL_IAIJUTSU = &quot;居合&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典及BOSS1的技能数据&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_SKILL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取BOSS1的技能字典（遵循三层结构：全局→boss1→技能）&#xD;&#xA;var boss1Dict = allBossSkills.GetValue(BOSS1_KEY) as VariableDictionary;&#xD;&#xA;if (boss1Dict == null)&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取具体技能的计数字典&#xD;&#xA;var throwMoneyDict = boss1Dict.GetValue(SKILL_THROW_MONEY) as VariableDictionary;&#xD;&#xA;var iaijutsuDict = boss1Dict.GetValue(SKILL_IAIJUTSU) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (throwMoneyDict == null || iaijutsuDict == null)&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取合格阈值&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss1_time1}; // 扔钱合格阈值&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss1_time2}; // 居合合格阈值&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接&#xD;&#xA;var output1 = new StringBuilder();&#xD;&#xA;var output2 = new StringBuilder();&#xD;&#xA;&#xD;&#xA;// 检查扔钱技能合格情况（玩家键格式：&quot;HexID_名字&quot;）&#xD;&#xA;foreach (var item in throwMoneyDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    // 从键中提取玩家名字（截取&quot;HexID_&quot;之后的部分）&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    // 解析计数并检查是否合格&#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time1)&#xD;&#xA;    {&#xD;&#xA;        output1.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 检查居合技能合格情况&#xD;&#xA;foreach (var item in iaijutsuDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time2)&#xD;&#xA;    {&#xD;&#xA;        output2.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理扔钱输出结果&#xD;&#xA;string result1 = output1.Length == 0 &#xD;&#xA;    ? &quot;boss1所有人扔钱都合格&quot; &#xD;&#xA;    : &quot;boss1扔钱不合格的是：&quot; + output1.ToString(0, output1.Length - 1);&#xD;&#xA;&#xD;&#xA;// 处理居合输出结果&#xD;&#xA;string result2 = output2.Length == 0 &#xD;&#xA;    ? &quot;boss1所有人居合都合格&quot; &#xD;&#xA;    : &quot;boss1居合不合格的是：&quot; + output2.ToString(0, output2.Length - 1);&#xD;&#xA;&#xD;&#xA;// 输出最终结果&#xD;&#xA;Log($&quot;\n{result1}\n{result2}&quot;);&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="1e8be02f-9844-472c-9334-dc0a4802a9d3" ActionType="Trigger" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="f5d191d1-577b-4118-a569-072562799858" Name="4.boss4" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="false" Name="0.标点" Id="3c2c9268-907c-4fb8-b770-7d87f15f516c" RegularExpression="^.{15}\S+ 28:986:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: 700,      &quot;Z&quot;: -683,   &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: 707.8,    &quot;Z&quot;: -669.5,   &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: 692.2,    &quot;Z&quot;: -669.5,   &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: 681.38,   &quot;Z&quot;: -684.75,  &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: 718.62,   &quot;Z&quot;: -684.75,  &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: 700,      &quot;Z&quot;: -652.49,  &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss4开怪，食物检查" Id="601073f2-6a71-4872-afd6-9835e0ab0f7d" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1453:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss4" ActionType="Variable" />
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：与初始化逻辑保持一致&#xD;&#xA;private const string GLOBAL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string TARGET_BOSS_KEY = &quot;boss4&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典（与初始化时的字典结构匹配）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;全局技能字典未初始化，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取boss4的子字典（对应初始化时的boss4层级）&#xD;&#xA;var boss4Dict = allBossSkills.GetValue(TARGET_BOSS_KEY) as VariableDictionary;&#xD;&#xA;if (boss4Dict == null)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;未找到{TARGET_BOSS_KEY}的字典，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 递归重置boss4字典中所有数值为0（包括嵌套的技能字典）&#xD;&#xA;ResetNumericValues(boss4Dict);&#xD;&#xA;&#xD;&#xA;// 保存更新后的全局字典&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, GLOBAL_DICT_KEY, allBossSkills);&#xD;&#xA;Log($&quot;{TARGET_BOSS_KEY}字典中所有数值已重置为0&quot;);&#xD;&#xA;&#xD;&#xA;// 递归处理方法：适配VariableDictionary结构&#xD;&#xA;static void ResetNumericValues(VariableDictionary dict)&#xD;&#xA;{&#xD;&#xA;    if (dict == null) return;&#xD;&#xA;    &#xD;&#xA;    // 遍历所有键（通过Values.Keys获取，符合VariableDictionary的结构）&#xD;&#xA;    var keys = dict.Values.Keys.ToList();&#xD;&#xA;    foreach (var key in keys)&#xD;&#xA;    {&#xD;&#xA;        var value = dict.GetValue(key);&#xD;&#xA;        &#xD;&#xA;        // 如果是子字典（如&quot;扔钱&quot;、&quot;居合&quot;技能的计数字典），递归处理&#xD;&#xA;        if (value is VariableDictionary subDict)&#xD;&#xA;        {&#xD;&#xA;            ResetNumericValues(subDict);&#xD;&#xA;        }&#xD;&#xA;        // 如果是数值类型（初始化时存储为字符串形式的数字）&#xD;&#xA;        else if (value is VariableScalar scalar)&#xD;&#xA;        {&#xD;&#xA;            // 验证是否为数字（与初始化时的存储方式匹配）&#xD;&#xA;            if (int.TryParse(scalar.Value, out _) || &#xD;&#xA;                float.TryParse(scalar.Value, out _))&#xD;&#xA;            {&#xD;&#xA;                dict.SetValue(key, &quot;0&quot;); // 重置为0（保持字符串存储格式）&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="3" TriggerOp="EnableTrigger" TriggerId="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" ActionType="Trigger" />
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss4_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接性能&#xD;&#xA;var output = new StringBuilder();&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;&#xD;&#xA;// 读取食物buff（状态ID=48）剩余时间，小于300秒告警&#xD;&#xA;foreach (var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    // 空值防护：避免实体为空导致的异常&#xD;&#xA;    if (entity == null || entity.Statuses == null) continue;&#xD;&#xA;    &#xD;&#xA;    Status foodStatus = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;    if (foodStatus != null)&#xD;&#xA;    {&#xD;&#xA;        // 剩余时间小于300秒（5分钟）时记录&#xD;&#xA;        if (foodStatus.Timer &lt; 300)&#xD;&#xA;        {&#xD;&#xA;            output.Append(entity.Name).Append(&quot;(&quot;).Append((int)foodStatus.Timer).Append(&quot;秒),&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        // 无食物buff时显示0秒&#xD;&#xA;        output.Append(entity.Name).Append(&quot;(0秒),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果&#xD;&#xA;string result;&#xD;&#xA;if (output.Length == 0)&#xD;&#xA;{&#xD;&#xA;    result = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    // 移除末尾的逗号&#xD;&#xA;    result = &quot;食物时间不够的是：&quot; + output.ToString(0, output.Length - 1);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Log(result);&#xD;&#xA;" ActionType="ExecuteScript" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="c0fdca8c-e222-4d7e-a1cf-e00386757d01" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1453:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss4_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss4_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss4_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss4_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：保持优化代码的常量结构&#xD;&#xA;private const string GLOBAL_SKILL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string TARGET_BOSS_KEY = &quot;boss4&quot;;  // 仅修改为boss4&#xD;&#xA;private const string SKILL_THROW_MONEY = &quot;扔钱&quot;;&#xD;&#xA;private const string SKILL_IAIJUTSU = &quot;居合&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典及目标BOSS的技能数据&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_SKILL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;全局技能字典未初始化&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取目标BOSS的技能字典&#xD;&#xA;var targetBossDict = allBossSkills.GetValue(TARGET_BOSS_KEY) as VariableDictionary;&#xD;&#xA;if (targetBossDict == null)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;未找到{TARGET_BOSS_KEY}的技能字典&quot;);  // 动态使用常量&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取具体技能的计数字典&#xD;&#xA;var throwMoneyDict = targetBossDict.GetValue(SKILL_THROW_MONEY) as VariableDictionary;&#xD;&#xA;var iaijutsuDict = targetBossDict.GetValue(SKILL_IAIJUTSU) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (throwMoneyDict == null || iaijutsuDict == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;技能计数字典获取失败&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取合格阈值（使用目标BOSS的阈值变量）&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss4_time1};  // 仅修改为boss4&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss4_time2};  // 仅修改为boss4&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接（保留优化特性）&#xD;&#xA;var output1 = new StringBuilder();&#xD;&#xA;var output2 = new StringBuilder();&#xD;&#xA;&#xD;&#xA;// 检查扔钱技能合格情况&#xD;&#xA;foreach (var item in throwMoneyDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    // 动态提取玩家名字（保留优化的提取逻辑）&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time1)&#xD;&#xA;    {&#xD;&#xA;        output1.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 检查居合技能合格情况&#xD;&#xA;foreach (var item in iaijutsuDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time2)&#xD;&#xA;    {&#xD;&#xA;        output2.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果（使用常量确保BOSS名称一致）&#xD;&#xA;string result1 = output1.Length == 0 &#xD;&#xA;    ? $&quot;{TARGET_BOSS_KEY}所有人扔钱都合格&quot; &#xD;&#xA;    : $&quot;{TARGET_BOSS_KEY}扔钱不合格的是：&quot; + output1.ToString(0, output1.Length - 1);&#xD;&#xA;&#xD;&#xA;string result2 = output2.Length == 0 &#xD;&#xA;    ? $&quot;{TARGET_BOSS_KEY}所有人居合都合格&quot; &#xD;&#xA;    : $&quot;{TARGET_BOSS_KEY}居合不合格的是：&quot; + output2.ToString(0, output2.Length - 1);&#xD;&#xA;&#xD;&#xA;// 输出最终结果&#xD;&#xA;Log($&quot;\n{result1}\n{result2}&quot;);&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" ActionType="Trigger" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="8.boss4扔钱记录" Id="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 获取全局武士技能字典（与初始化逻辑保持一致）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(&#xD;&#xA;    false, &#xD;&#xA;    &quot;The_Forked_Tower_Blood_all_boss_skills&quot;&#xD;&#xA;) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取当前触发的技能相关参数&#xD;&#xA;string aid = $&quot;${aid}&quot;; // 技能ID&#xD;&#xA;string sid = $&quot;${sid}&quot;; // 玩家ID&#xD;&#xA;int currentCount = 0;&#xD;&#xA;&#xD;&#xA;// 定义技能与BOSS的映射关系（根据实际情况调整）&#xD;&#xA;var skillBossMap = new Dictionary&lt;string, (string bossKey, string skillName)&gt;&#xD;&#xA;{&#xD;&#xA;    {&quot;A286&quot;, (&quot;boss4&quot;, &quot;扔钱&quot;)},  // A286对应boss1的扔钱技能&#xD;&#xA;    {&quot;A285&quot;, (&quot;boss4&quot;, &quot;居合&quot;)}   // A285对应boss1的居合技能&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;// 检查当前技能是否在监控列表中&#xD;&#xA;if (skillBossMap.TryGetValue(aid, out var skillInfo))&#xD;&#xA;{&#xD;&#xA;    // 获取对应BOSS的技能字典&#xD;&#xA;    var bossDict = allBossSkills.GetValue(skillInfo.bossKey) as VariableDictionary;&#xD;&#xA;    if (bossDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 获取对应技能的玩家计数字典&#xD;&#xA;    var skillDict = bossDict.GetValue(skillInfo.skillName) as VariableDictionary;&#xD;&#xA;    if (skillDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 查找匹配的玩家并更新计数（使用初始化时的唯一键格式）&#xD;&#xA;    var targetKey = skillDict.Values&#xD;&#xA;        .Select(v =&gt; v.Key)&#xD;&#xA;        .FirstOrDefault(key =&gt; key.StartsWith(sid));&#xD;&#xA;&#xD;&#xA;    if (!string.IsNullOrEmpty(targetKey))&#xD;&#xA;    {&#xD;&#xA;        // 解析当前计数并加1&#xD;&#xA;        if (int.TryParse(skillDict.GetStringValue(targetKey), out currentCount))&#xD;&#xA;        {&#xD;&#xA;            skillDict.SetValue(targetKey, (currentCount + 1).ToString());&#xD;&#xA;            &#xD;&#xA;            // 保存更新后的字典&#xD;&#xA;            bossDict.SetValue(skillInfo.skillName, skillDict);&#xD;&#xA;            allBossSkills.SetValue(skillInfo.bossKey, bossDict);&#xD;&#xA;            Interpreter.StaticHelpers.SetDictVariable(&#xD;&#xA;                false, &#xD;&#xA;                &quot;The_Forked_Tower_Blood_all_boss_skills&quot;, &#xD;&#xA;                allBossSkills&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="1.获取读条（符文之斧）大小圈" Id="8e117766-693a-4df4-ab05-abf58f27e0c8" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A24F):">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;// 4336小圈4337大圈&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;var tmp = &quot;&quot;;&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;;&#xD;&#xA;var output3 = &quot;&quot;;&#xD;&#xA;var output4 = &quot;&quot;;&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    Status status4336 = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4336);&#xD;&#xA;    Status status4337 = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4337);&#xD;&#xA;    if(status4336 != null)&#xD;&#xA;    {&#xD;&#xA;        double dx1 = entity.PosX - 699.69;&#xD;&#xA;        double dy1 = entity.PosY + 674.18;&#xD;&#xA;        double radians1 = Math.Atan2(dx1, dy1);&#xD;&#xA;        double dx2 = entity.PosX - 675.2;&#xD;&#xA;        double dy2 = entity.PosY + 688.32;&#xD;&#xA;        double radians2 = Math.Atan2(dx2, dy2);&#xD;&#xA;        double dx3 = entity.PosX - 700;&#xD;&#xA;        double dy3 = entity.PosY + 673.64;&#xD;&#xA;        double radians3 = Math.Atan2(dx3, dy3);&#xD;&#xA;        double dx4 = entity.PosX - 700;&#xD;&#xA;        double dy4 = entity.PosY + 645.36;&#xD;&#xA;        double radians4 = Math.Atan2(dx4, dy4);&#xD;&#xA;        double dx5 = entity.PosX - 700.31;&#xD;&#xA;        double dy5 = entity.PosY + 674.18;&#xD;&#xA;        double radians5 = Math.Atan2(dx5, dy5);&#xD;&#xA;        double dx6 = entity.PosX - 724.8;&#xD;&#xA;        double dy6 = entity.PosY + 688.32;&#xD;&#xA;        double radians6 = Math.Atan2(dx6, dy6);&#xD;&#xA;        if(radians1 &lt; -5 * Math.PI / 12 &amp;&amp; radians1 &gt; -11 * Math.PI / 12 &amp;&amp; radians2 &gt; Math.PI / 12 &amp;&amp; radians2 &lt; 7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;左上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians3 &gt; -3 * Math.PI / 12 &amp;&amp; radians3 &lt; 3 * Math.PI / 12 &amp;&amp; (radians4 &lt; -9 * Math.PI / 12|| radians4 &gt; 9 * Math.PI / 12))&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;正下&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians5 &gt; 5 * Math.PI / 12 &amp;&amp; radians5 &lt; 11 * Math.PI / 12 &amp;&amp; radians6 &lt; -1 * Math.PI / 12 &amp;&amp; radians6 &gt; -7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;右上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;错误&quot;;&#xD;&#xA;        }&#xD;&#xA;        if(status4336.Timer &lt; 14)&#xD;&#xA;        {&#xD;&#xA;            output1 = output1 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            output2 = output2 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else if(status4337 != null)&#xD;&#xA;    {&#xD;&#xA;        double dx1 = entity.PosX - 699.69;&#xD;&#xA;        double dy1 = entity.PosY + 674.18;&#xD;&#xA;        double radians1 = Math.Atan2(dx1, dy1);&#xD;&#xA;        double dx2 = entity.PosX - 675.2;&#xD;&#xA;        double dy2 = entity.PosY + 688.32;&#xD;&#xA;        double radians2 = Math.Atan2(dx2, dy2);&#xD;&#xA;        double dx3 = entity.PosX - 700;&#xD;&#xA;        double dy3 = entity.PosY + 673.64;&#xD;&#xA;        double radians3 = Math.Atan2(dx3, dy3);&#xD;&#xA;        double dx4 = entity.PosX - 700;&#xD;&#xA;        double dy4 = entity.PosY + 645.36;&#xD;&#xA;        double radians4 = Math.Atan2(dx4, dy4);&#xD;&#xA;        double dx5 = entity.PosX - 700.31;&#xD;&#xA;        double dy5 = entity.PosY + 674.18;&#xD;&#xA;        double radians5 = Math.Atan2(dx5, dy5);&#xD;&#xA;        double dx6 = entity.PosX - 724.8;&#xD;&#xA;        double dy6 = entity.PosY + 688.32;&#xD;&#xA;        double radians6 = Math.Atan2(dx6, dy6);&#xD;&#xA;        if(radians1 &lt; -5 * Math.PI / 12 &amp;&amp; radians1 &gt; -11 * Math.PI / 12 &amp;&amp; radians2 &gt; Math.PI / 12 &amp;&amp; radians2 &lt; 7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;左上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians3 &gt; -3 * Math.PI / 12 &amp;&amp; radians3 &lt; 3 * Math.PI / 12 &amp;&amp; (radians4 &lt; -9 * Math.PI / 12|| radians4 &gt; 9 * Math.PI / 12))&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;正下&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians5 &gt; 5 * Math.PI / 12 &amp;&amp; radians5 &lt; 11 * Math.PI / 12 &amp;&amp; radians6 &lt; -1 * Math.PI / 12 &amp;&amp; radians6 &gt; -7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;右上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;错误&quot;;&#xD;&#xA;        }&#xD;&#xA;        if(status4337.Timer &lt; 14)&#xD;&#xA;        {&#xD;&#xA;            output3 = output3 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            output4 = output4 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;output3 = output3.TrimEnd(',');&#xD;&#xA;output4 = output4.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot; + &quot;第一次大圈点：&quot; + output3 + &quot;\n&quot; + &quot;第一次小圈点：&quot; + output1 + &quot;\n&quot; + &quot;第二次大圈点：&quot; + output4 + &quot;\n&quot; + &quot;第二次小圈点：&quot; + output2);" ActionType="ExecuteScript" ExecutionDelayExpression="6100" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取读条（圣枪）" Id="bf23ba89-f65d-4009-9e0a-f9e2221b5d23" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A255):">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;// 4336小圈4337大圈&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;var tmp = &quot;&quot;;&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;;&#xD;&#xA;var output3 = &quot;&quot;;&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4338);&#xD;&#xA;    if(status != null)&#xD;&#xA;    {&#xD;&#xA;        double dx1 = entity.PosX - 699.69;&#xD;&#xA;        double dy1 = entity.PosY + 674.18;&#xD;&#xA;        double radians1 = Math.Atan2(dx1, dy1);&#xD;&#xA;        double dx2 = entity.PosX - 675.2;&#xD;&#xA;        double dy2 = entity.PosY + 688.32;&#xD;&#xA;        double radians2 = Math.Atan2(dx2, dy2);&#xD;&#xA;        double dx3 = entity.PosX - 700;&#xD;&#xA;        double dy3 = entity.PosY + 673.64;&#xD;&#xA;        double radians3 = Math.Atan2(dx3, dy3);&#xD;&#xA;        double dx4 = entity.PosX - 700;&#xD;&#xA;        double dy4 = entity.PosY + 645.36;&#xD;&#xA;        double radians4 = Math.Atan2(dx4, dy4);&#xD;&#xA;        double dx5 = entity.PosX - 700.31;&#xD;&#xA;        double dy5 = entity.PosY + 674.18;&#xD;&#xA;        double radians5 = Math.Atan2(dx5, dy5);&#xD;&#xA;        double dx6 = entity.PosX - 724.8;&#xD;&#xA;        double dy6 = entity.PosY + 688.32;&#xD;&#xA;        double radians6 = Math.Atan2(dx6, dy6);&#xD;&#xA;        if(radians1 &lt; -5 * Math.PI / 12 &amp;&amp; radians1 &gt; -11 * Math.PI / 12 &amp;&amp; radians2 &gt; Math.PI / 12 &amp;&amp; radians2 &lt; 7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;左上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians3 &gt; -3 * Math.PI / 12 &amp;&amp; radians3 &lt; 3 * Math.PI / 12 &amp;&amp; (radians4 &lt; -9 * Math.PI / 12|| radians4 &gt; 9 * Math.PI / 12))&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;正下&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians5 &gt; 5 * Math.PI / 12 &amp;&amp; radians5 &lt; 11 * Math.PI / 12 &amp;&amp; radians6 &lt; -1 * Math.PI / 12 &amp;&amp; radians6 &gt; -7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;右上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;错误&quot;;&#xD;&#xA;        }&#xD;&#xA;        if(status.Timer &lt; 18)&#xD;&#xA;        {&#xD;&#xA;            output1 = output1 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(status.Timer &lt; 26)&#xD;&#xA;        {&#xD;&#xA;            output2 = output2 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(status.Timer &lt; 33)&#xD;&#xA;        {&#xD;&#xA;            output3 = output3 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;output3 = output3.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot; + &quot;第一轮分摊点：&quot; + output1 + &quot;\n&quot; + &quot;第二轮分摊点：&quot; + output2 + &quot;\n&quot; + &quot;第三轮分摊点：&quot; + output3 );" ActionType="ExecuteScript" ExecutionDelayExpression="6100" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="e51ef906-0a10-44d9-b31b-1efea9e23aa2" Name="2.boss2" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名C" Id="818c38d1-54aa-463b-ad88-f799482a3758" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-813.85:386.61">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow2" VariableExpression="C点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                  <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/e &#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow1}&#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow2}" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback" ExecutionDelayExpression="100" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="1a.获取蓝球位置" Id="74f20443-18ab-4626-be50-a5e56b78d8fd" RegularExpression="^.{15}\S+ 107:(?&lt;sid&gt;4.{7}):(?&lt;aid&gt;A5E0):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+):(?&lt;h&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="DisableTrigger" TriggerId="74f20443-18ab-4626-be50-a5e56b78d8fd" TriggerForce="regexp,active" ActionType="Trigger" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_ax" VariableExpression="${x}" ActionType="Variable" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_ay" VariableExpression="${y}" ActionType="Variable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="1b.获取红球位置and发宏" Id="ac8e0d4d-6f8c-43e2-b3f5-d1808607e006" RegularExpression="^.{15}\S+ 107:(?&lt;sid&gt;4.{7}):(?&lt;aid&gt;A5DF):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+):(?&lt;h&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="DisableTrigger" TriggerId="ac8e0d4d-6f8c-43e2-b3f5-d1808607e006" TriggerForce="regexp,active" ActionType="Trigger" />
                  <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/e 冰球:1-&gt;3-&gt;2-&gt;4;火球3-&gt;2-&gt;4-&gt;1&#xD;&#xA;冰1：C-&gt;C-&gt;C-&gt;B;火1：A-&gt;A-&gt;A-&gt;B&#xD;&#xA;冰2：C-&gt;A-&gt;A-&gt;A;火2：A-&gt;C-&gt;C-&gt;C&#xD;&#xA;冰3：B-&gt;A-&gt;C-&gt;B;火3：D-&gt;C-&gt;B-&gt;B" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback" ExecutionDelayExpression="100">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="-28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="-28.291" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="command" NamedCallbackParam="/e 冰球:2-&gt;4-&gt;1-&gt;3;火球:1-&gt;2-&gt;3-&gt;4&#xD;&#xA;冰1：C-&gt;B-&gt;B-&gt;B;火1：B-&gt;B-&gt;A-&gt;A&#xD;&#xA;冰2：C-&gt;B-&gt;B-&gt;A;火2：C-&gt;D-&gt;D-&gt;A&#xD;&#xA;冰3：D-&gt;A-&gt;B-&gt;A;火3：B-&gt;C-&gt;D-&gt;A" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="command" NamedCallbackParam="/e 冰球:4-&gt;1-&gt;3-&gt;1;火球:2-&gt;4-&gt;1-&gt;3&#xD;&#xA;冰1：A-&gt;A-&gt;A-&gt;D;火1：C-&gt;C-&gt;C-&gt;D&#xD;&#xA;冰2：A-&gt;A-&gt;A-&gt;C;火2：C-&gt;C-&gt;C-&gt;A&#xD;&#xA;冰3：B-&gt;C-&gt;D-&gt;D;火3：D-&gt;A-&gt;B-&gt;D" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="-28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="28.291" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="5" NamedCallbackName="command" NamedCallbackParam="/e 冰球:4-&gt;3-&gt;2-&gt;1;火球:3-&gt;1-&gt;4-&gt;2&#xD;&#xA;冰1：B-&gt;C-&gt;C-&gt;C;火1：D-&gt;C-&gt;C-&gt;C&#xD;&#xA;冰2：B-&gt;C-&gt;C-&gt;B;火2：D-&gt;C-&gt;C-&gt;D&#xD;&#xA;冰3：B-&gt;D-&gt;D-&gt;C;火3：D-&gt;B-&gt;B-&gt;C" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="-28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="6" TriggerOp="EnableTrigger" TriggerId="74f20443-18ab-4626-be50-a5e56b78d8fd" TriggerForce="regexp,active" ActionType="Trigger" ExecutionDelayExpression="150000" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss2开怪，食物检查" Id="63de372e-998f-40ef-a526-03e092c54d63" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1451:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss2" ActionType="Variable" />
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：与初始化逻辑保持一致&#xD;&#xA;private const string GLOBAL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string TARGET_BOSS_KEY = &quot;boss2&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典（与初始化时的字典结构匹配）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;全局技能字典未初始化，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取boss4的子字典（对应初始化时的boss4层级）&#xD;&#xA;var boss4Dict = allBossSkills.GetValue(TARGET_BOSS_KEY) as VariableDictionary;&#xD;&#xA;if (boss4Dict == null)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;未找到{TARGET_BOSS_KEY}的字典，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 递归重置boss4字典中所有数值为0（包括嵌套的技能字典）&#xD;&#xA;ResetNumericValues(boss4Dict);&#xD;&#xA;&#xD;&#xA;// 保存更新后的全局字典&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, GLOBAL_DICT_KEY, allBossSkills);&#xD;&#xA;Log($&quot;{TARGET_BOSS_KEY}字典中所有数值已重置为0&quot;);&#xD;&#xA;&#xD;&#xA;// 递归处理方法：适配VariableDictionary结构&#xD;&#xA;static void ResetNumericValues(VariableDictionary dict)&#xD;&#xA;{&#xD;&#xA;    if (dict == null) return;&#xD;&#xA;    &#xD;&#xA;    // 遍历所有键（通过Values.Keys获取，符合VariableDictionary的结构）&#xD;&#xA;    var keys = dict.Values.Keys.ToList();&#xD;&#xA;    foreach (var key in keys)&#xD;&#xA;    {&#xD;&#xA;        var value = dict.GetValue(key);&#xD;&#xA;        &#xD;&#xA;        // 如果是子字典（如&quot;扔钱&quot;、&quot;居合&quot;技能的计数字典），递归处理&#xD;&#xA;        if (value is VariableDictionary subDict)&#xD;&#xA;        {&#xD;&#xA;            ResetNumericValues(subDict);&#xD;&#xA;        }&#xD;&#xA;        // 如果是数值类型（初始化时存储为字符串形式的数字）&#xD;&#xA;        else if (value is VariableScalar scalar)&#xD;&#xA;        {&#xD;&#xA;            // 验证是否为数字（与初始化时的存储方式匹配）&#xD;&#xA;            if (int.TryParse(scalar.Value, out _) || &#xD;&#xA;                float.TryParse(scalar.Value, out _))&#xD;&#xA;            {&#xD;&#xA;                dict.SetValue(key, &quot;0&quot;); // 重置为0（保持字符串存储格式）&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="3" TriggerOp="EnableTrigger" TriggerId="ac44a147-7899-4ffa-9110-6bf60cc62b1a" ActionType="Trigger" />
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接性能&#xD;&#xA;var output = new StringBuilder();&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;&#xD;&#xA;// 读取食物buff（状态ID=48）剩余时间，小于300秒告警&#xD;&#xA;foreach (var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    // 空值防护：避免实体为空导致的异常&#xD;&#xA;    if (entity == null || entity.Statuses == null) continue;&#xD;&#xA;    &#xD;&#xA;    Status foodStatus = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;    if (foodStatus != null)&#xD;&#xA;    {&#xD;&#xA;        // 剩余时间小于300秒（5分钟）时记录&#xD;&#xA;        if (foodStatus.Timer &lt; 300)&#xD;&#xA;        {&#xD;&#xA;            output.Append(entity.Name).Append(&quot;(&quot;).Append((int)foodStatus.Timer).Append(&quot;秒),&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        // 无食物buff时显示0秒&#xD;&#xA;        output.Append(entity.Name).Append(&quot;(0秒),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果&#xD;&#xA;string result;&#xD;&#xA;if (output.Length == 0)&#xD;&#xA;{&#xD;&#xA;    result = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    // 移除末尾的逗号&#xD;&#xA;    result = &quot;食物时间不够的是：&quot; + output.ToString(0, output.Length - 1);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Log(result);&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="6" TriggerOp="EnableTrigger" TriggerId="74f20443-18ab-4626-be50-a5e56b78d8fd" TriggerForce="regexp,active" ActionType="Trigger" />
                  <Action OrderNumber="7" TriggerOp="EnableTrigger" TriggerId="ac8e0d4d-6f8c-43e2-b3f5-d1808607e006" TriggerForce="regexp,active" ActionType="Trigger" />
                  <Action OrderNumber="8" TriggerOp="DisableTrigger" TriggerId="25e198fc-05ec-44de-81b6-cec217838639" TriggerForce="regexp,active" ActionType="Trigger">
                    <Condition Enabled="false" Grouping="And">
                      <ConditionGroup Enabled="true" Grouping="Or">
                        <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-817.3205" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-817.3205" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-799.9998" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      </ConditionGroup>
                      <ConditionGroup Enabled="true" Grouping="Or">
                        <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="350.0000" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="370.0001" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="379.9999" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      </ConditionGroup>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="0.标点" Id="08dee71e-d21e-4d1e-954b-e1cdb4059ee8" RegularExpression="^.{15}\S+ 28:985:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: -800,      &quot;Z&quot;: 352.93,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: -792.93,      &quot;Z&quot;: 360,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: -800,      &quot;Z&quot;: 367.07,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;D&quot;:     {&quot;X&quot;: -807.07,      &quot;Z&quot;: 360,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: -805,      &quot;Z&quot;: 355,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: -795,      &quot;Z&quot;: 355,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: -795,      &quot;Z&quot;: 365,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Four&quot;:  {&quot;X&quot;: -805,      &quot;Z&quot;: 365,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="8edce5aa-8c3f-425c-9fa4-8131fde25963" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1451:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss2_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss2_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：保持优化代码的常量结构&#xD;&#xA;private const string GLOBAL_SKILL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string TARGET_BOSS_KEY = &quot;boss2&quot;;  // 仅修改为boss2&#xD;&#xA;private const string SKILL_THROW_MONEY = &quot;扔钱&quot;;&#xD;&#xA;private const string SKILL_IAIJUTSU = &quot;居合&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典及目标BOSS的技能数据&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_SKILL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;全局技能字典未初始化&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取目标BOSS的技能字典&#xD;&#xA;var targetBossDict = allBossSkills.GetValue(TARGET_BOSS_KEY) as VariableDictionary;&#xD;&#xA;if (targetBossDict == null)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;未找到{TARGET_BOSS_KEY}的技能字典&quot;);  // 动态使用常量&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取具体技能的计数字典&#xD;&#xA;var throwMoneyDict = targetBossDict.GetValue(SKILL_THROW_MONEY) as VariableDictionary;&#xD;&#xA;var iaijutsuDict = targetBossDict.GetValue(SKILL_IAIJUTSU) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (throwMoneyDict == null || iaijutsuDict == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;技能计数字典获取失败&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取合格阈值（使用目标BOSS的阈值变量）&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss2_time1};  // 仅修改为boss2&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss2_time2};  // 仅修改为boss2&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接（保留优化特性）&#xD;&#xA;var output1 = new StringBuilder();&#xD;&#xA;var output2 = new StringBuilder();&#xD;&#xA;&#xD;&#xA;// 检查扔钱技能合格情况&#xD;&#xA;foreach (var item in throwMoneyDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    // 动态提取玩家名字（保留优化的提取逻辑）&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time1)&#xD;&#xA;    {&#xD;&#xA;        output1.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 检查居合技能合格情况&#xD;&#xA;foreach (var item in iaijutsuDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time2)&#xD;&#xA;    {&#xD;&#xA;        output2.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果（使用常量确保BOSS名称一致）&#xD;&#xA;string result1 = output1.Length == 0 &#xD;&#xA;    ? $&quot;{TARGET_BOSS_KEY}所有人扔钱都合格&quot; &#xD;&#xA;    : $&quot;{TARGET_BOSS_KEY}扔钱不合格的是：&quot; + output1.ToString(0, output1.Length - 1);&#xD;&#xA;&#xD;&#xA;string result2 = output2.Length == 0 &#xD;&#xA;    ? $&quot;{TARGET_BOSS_KEY}所有人居合都合格&quot; &#xD;&#xA;    : $&quot;{TARGET_BOSS_KEY}居合不合格的是：&quot; + output2.ToString(0, output2.Length - 1);&#xD;&#xA;&#xD;&#xA;// 输出最终结果&#xD;&#xA;Log($&quot;\n{result1}\n{result2}&quot;);&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="ac44a147-7899-4ffa-9110-6bf60cc62b1a" ActionType="Trigger" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="8.boss2扔钱记录" Id="ac44a147-7899-4ffa-9110-6bf60cc62b1a" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 获取全局武士技能字典（与初始化逻辑保持一致）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(&#xD;&#xA;    false, &#xD;&#xA;    &quot;The_Forked_Tower_Blood_all_boss_skills&quot;&#xD;&#xA;) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取当前触发的技能相关参数&#xD;&#xA;string aid = $&quot;${aid}&quot;; // 技能ID&#xD;&#xA;string sid = $&quot;${sid}&quot;; // 玩家ID&#xD;&#xA;int currentCount = 0;&#xD;&#xA;&#xD;&#xA;// 定义技能与BOSS的映射关系（根据实际情况调整）&#xD;&#xA;var skillBossMap = new Dictionary&lt;string, (string bossKey, string skillName)&gt;&#xD;&#xA;{&#xD;&#xA;    {&quot;A286&quot;, (&quot;boss2&quot;, &quot;扔钱&quot;)},  // A286对应boss1的扔钱技能&#xD;&#xA;    {&quot;A285&quot;, (&quot;boss2&quot;, &quot;居合&quot;)}   // A285对应boss1的居合技能&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;// 检查当前技能是否在监控列表中&#xD;&#xA;if (skillBossMap.TryGetValue(aid, out var skillInfo))&#xD;&#xA;{&#xD;&#xA;    // 获取对应BOSS的技能字典&#xD;&#xA;    var bossDict = allBossSkills.GetValue(skillInfo.bossKey) as VariableDictionary;&#xD;&#xA;    if (bossDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 获取对应技能的玩家计数字典&#xD;&#xA;    var skillDict = bossDict.GetValue(skillInfo.skillName) as VariableDictionary;&#xD;&#xA;    if (skillDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 查找匹配的玩家并更新计数（使用初始化时的唯一键格式）&#xD;&#xA;    var targetKey = skillDict.Values&#xD;&#xA;        .Select(v =&gt; v.Key)&#xD;&#xA;        .FirstOrDefault(key =&gt; key.StartsWith(sid));&#xD;&#xA;&#xD;&#xA;    if (!string.IsNullOrEmpty(targetKey))&#xD;&#xA;    {&#xD;&#xA;        // 解析当前计数并加1&#xD;&#xA;        if (int.TryParse(skillDict.GetStringValue(targetKey), out currentCount))&#xD;&#xA;        {&#xD;&#xA;            skillDict.SetValue(targetKey, (currentCount + 1).ToString());&#xD;&#xA;            &#xD;&#xA;            // 保存更新后的字典&#xD;&#xA;            bossDict.SetValue(skillInfo.skillName, skillDict);&#xD;&#xA;            allBossSkills.SetValue(skillInfo.bossKey, bossDict);&#xD;&#xA;            Interpreter.StaticHelpers.SetDictVariable(&#xD;&#xA;                false, &#xD;&#xA;                &quot;The_Forked_Tower_Blood_all_boss_skills&quot;, &#xD;&#xA;                allBossSkills&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名2" Id="f4198e1d-50aa-496b-85cb-07efcc950f93" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-796.08:330.26">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow1" VariableExpression="2点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名A" Id="322d494b-3693-41dc-b93b-e30c04d53662" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-778.79:338.79">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow1" VariableExpression="A点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名4" Id="227d43d3-5028-48c0-a497-2771c4edd6f3" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-800.00:390.00">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow2" VariableExpression="4点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                  <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/e &#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow1}&#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow2}" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback" ExecutionDelayExpression="100" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Sequential="True" Name="3.火球" Id="25e198fc-05ec-44de-81b6-cec217838639" RegularExpression="(?&lt;timestamp&gt;^.{14}) 271 (?&lt;type&gt;10F):(?&lt;id&gt;[^:]*):(?&lt;heading&gt;[^:]*)(?::[^:]*){2}:(?&lt;x&gt;[^:]*):(?&lt;y&gt;[^:]*):(?&lt;z&gt;[^:]*)(?:$|:)">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/e ABC左下，123右上" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-817.3205" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="370.0001" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/e ABC左上，123右下" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-817.3205" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="350.0000" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="command" NamedCallbackParam="/e ABC正下，123正上" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-799.9998" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="379.9999" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" TriggerOp="DisableTrigger" TriggerId="25e198fc-05ec-44de-81b6-cec217838639" TriggerForce="regexp,active" ActionType="Trigger">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionGroup Enabled="true" Grouping="Or">
                        <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-817.3205" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-817.3205" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="-799.9998" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      </ConditionGroup>
                      <ConditionGroup Enabled="true" Grouping="Or">
                        <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="350.0000" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="370.0001" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                        <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="379.9999" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      </ConditionGroup>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="a825b56c-53ab-447e-a0d9-4a21f3925072" Name="3a.道中" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Name="0.标点" Id="6c60635b-feff-45e5-b84d-916d69dfabf2" RegularExpression="^.{15}\S+ 28:971:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: 716,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: 700,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: 684,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;D&quot;:     {&quot;X&quot;: 708,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: 716,      &quot;Z&quot;: -350.5,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: 700,      &quot;Z&quot;: -340,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: 684,      &quot;Z&quot;: -350.5,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Four&quot;:  {&quot;X&quot;: 692,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="0b20143a-289b-495a-a740-dfefc343973b" Name="3.boss3" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss3开怪，食物检查" Id="7b6c643a-cbcd-4859-9583-b0e31f72ecd3" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1452:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss3" ActionType="Variable" />
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：与初始化逻辑保持一致&#xD;&#xA;private const string GLOBAL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string TARGET_BOSS_KEY = &quot;boss3&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典（与初始化时的字典结构匹配）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;全局技能字典未初始化，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取boss4的子字典（对应初始化时的boss4层级）&#xD;&#xA;var boss4Dict = allBossSkills.GetValue(TARGET_BOSS_KEY) as VariableDictionary;&#xD;&#xA;if (boss4Dict == null)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;未找到{TARGET_BOSS_KEY}的字典，无法重置&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 递归重置boss4字典中所有数值为0（包括嵌套的技能字典）&#xD;&#xA;ResetNumericValues(boss4Dict);&#xD;&#xA;&#xD;&#xA;// 保存更新后的全局字典&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, GLOBAL_DICT_KEY, allBossSkills);&#xD;&#xA;Log($&quot;{TARGET_BOSS_KEY}字典中所有数值已重置为0&quot;);&#xD;&#xA;&#xD;&#xA;// 递归处理方法：适配VariableDictionary结构&#xD;&#xA;static void ResetNumericValues(VariableDictionary dict)&#xD;&#xA;{&#xD;&#xA;    if (dict == null) return;&#xD;&#xA;    &#xD;&#xA;    // 遍历所有键（通过Values.Keys获取，符合VariableDictionary的结构）&#xD;&#xA;    var keys = dict.Values.Keys.ToList();&#xD;&#xA;    foreach (var key in keys)&#xD;&#xA;    {&#xD;&#xA;        var value = dict.GetValue(key);&#xD;&#xA;        &#xD;&#xA;        // 如果是子字典（如&quot;扔钱&quot;、&quot;居合&quot;技能的计数字典），递归处理&#xD;&#xA;        if (value is VariableDictionary subDict)&#xD;&#xA;        {&#xD;&#xA;            ResetNumericValues(subDict);&#xD;&#xA;        }&#xD;&#xA;        // 如果是数值类型（初始化时存储为字符串形式的数字）&#xD;&#xA;        else if (value is VariableScalar scalar)&#xD;&#xA;        {&#xD;&#xA;            // 验证是否为数字（与初始化时的存储方式匹配）&#xD;&#xA;            if (int.TryParse(scalar.Value, out _) || &#xD;&#xA;                float.TryParse(scalar.Value, out _))&#xD;&#xA;            {&#xD;&#xA;                dict.SetValue(key, &quot;0&quot;); // 重置为0（保持字符串存储格式）&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="3" TriggerOp="EnableTrigger" TriggerId="6254df27-6c5e-48d5-8891-9d32822c2598" ActionType="Trigger" />
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss3_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接性能&#xD;&#xA;var output = new StringBuilder();&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;&#xD;&#xA;// 读取食物buff（状态ID=48）剩余时间，小于300秒告警&#xD;&#xA;foreach (var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    // 空值防护：避免实体为空导致的异常&#xD;&#xA;    if (entity == null || entity.Statuses == null) continue;&#xD;&#xA;    &#xD;&#xA;    Status foodStatus = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;    if (foodStatus != null)&#xD;&#xA;    {&#xD;&#xA;        // 剩余时间小于300秒（5分钟）时记录&#xD;&#xA;        if (foodStatus.Timer &lt; 300)&#xD;&#xA;        {&#xD;&#xA;            output.Append(entity.Name).Append(&quot;(&quot;).Append((int)foodStatus.Timer).Append(&quot;秒),&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        // 无食物buff时显示0秒&#xD;&#xA;        output.Append(entity.Name).Append(&quot;(0秒),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果&#xD;&#xA;string result;&#xD;&#xA;if (output.Length == 0)&#xD;&#xA;{&#xD;&#xA;    result = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    // 移除末尾的逗号&#xD;&#xA;    result = &quot;食物时间不够的是：&quot; + output.ToString(0, output.Length - 1);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Log(result);&#xD;&#xA;" ActionType="ExecuteScript" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="0.标点" Id="e3755221-1e2a-42a8-9ae5-5a3e4b50adc4" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1454:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: -337,      &quot;Z&quot;: 149.93,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: -329.93,      &quot;Z&quot;: 157,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: -337,      &quot;Z&quot;: 164.07,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;D&quot;:     {&quot;X&quot;: -344.07,      &quot;Z&quot;: 157,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: -342,      &quot;Z&quot;: 152,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: -332,      &quot;Z&quot;: 152,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: -332,      &quot;Z&quot;: 162,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Four&quot;:  {&quot;X&quot;: -342,      &quot;Z&quot;: 162,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="47716f8e-c913-434b-890e-c957e2e82e27" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1452:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss3_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss3_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss3_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss3_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 常量定义：保持优化代码的常量结构&#xD;&#xA;private const string GLOBAL_SKILL_DICT_KEY = &quot;The_Forked_Tower_Blood_all_boss_skills&quot;;&#xD;&#xA;private const string TARGET_BOSS_KEY = &quot;boss3&quot;;  // 仅修改为boss3&#xD;&#xA;private const string SKILL_THROW_MONEY = &quot;扔钱&quot;;&#xD;&#xA;private const string SKILL_IAIJUTSU = &quot;居合&quot;;&#xD;&#xA;&#xD;&#xA;// 获取全局技能字典及目标BOSS的技能数据&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(false, GLOBAL_SKILL_DICT_KEY) as VariableDictionary;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;全局技能字典未初始化&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取目标BOSS的技能字典&#xD;&#xA;var targetBossDict = allBossSkills.GetValue(TARGET_BOSS_KEY) as VariableDictionary;&#xD;&#xA;if (targetBossDict == null)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;未找到{TARGET_BOSS_KEY}的技能字典&quot;);  // 动态使用常量&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取具体技能的计数字典&#xD;&#xA;var throwMoneyDict = targetBossDict.GetValue(SKILL_THROW_MONEY) as VariableDictionary;&#xD;&#xA;var iaijutsuDict = targetBossDict.GetValue(SKILL_IAIJUTSU) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (throwMoneyDict == null || iaijutsuDict == null)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;技能计数字典获取失败&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取合格阈值（使用目标BOSS的阈值变量）&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss3_time1};  // 仅修改为boss3&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss3_time2};  // 仅修改为boss3&#xD;&#xA;&#xD;&#xA;// 使用StringBuilder优化字符串拼接（保留优化特性）&#xD;&#xA;var output1 = new StringBuilder();&#xD;&#xA;var output2 = new StringBuilder();&#xD;&#xA;&#xD;&#xA;// 检查扔钱技能合格情况&#xD;&#xA;foreach (var item in throwMoneyDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    // 动态提取玩家名字（保留优化的提取逻辑）&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time1)&#xD;&#xA;    {&#xD;&#xA;        output1.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 检查居合技能合格情况&#xD;&#xA;foreach (var item in iaijutsuDict.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string playerKey = item.Key;&#xD;&#xA;    int nameStartIndex = playerKey.IndexOf('_') + 1;&#xD;&#xA;    if (nameStartIndex &lt;= 0 || nameStartIndex &gt;= playerKey.Length)&#xD;&#xA;        continue;&#xD;&#xA;        &#xD;&#xA;    string name = playerKey.Substring(nameStartIndex);&#xD;&#xA;    &#xD;&#xA;    if (int.TryParse(item.Value?.ToString(), out int count) &amp;&amp; count &lt; time2)&#xD;&#xA;    {&#xD;&#xA;        output2.Append(name).Append($&quot;({count}次),&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理输出结果（使用常量确保BOSS名称一致）&#xD;&#xA;string result1 = output1.Length == 0 &#xD;&#xA;    ? $&quot;{TARGET_BOSS_KEY}所有人扔钱都合格&quot; &#xD;&#xA;    : $&quot;{TARGET_BOSS_KEY}扔钱不合格的是：&quot; + output1.ToString(0, output1.Length - 1);&#xD;&#xA;&#xD;&#xA;string result2 = output2.Length == 0 &#xD;&#xA;    ? $&quot;{TARGET_BOSS_KEY}所有人居合都合格&quot; &#xD;&#xA;    : $&quot;{TARGET_BOSS_KEY}居合不合格的是：&quot; + output2.ToString(0, output2.Length - 1);&#xD;&#xA;&#xD;&#xA;// 输出最终结果&#xD;&#xA;Log($&quot;\n{result1}\n{result2}&quot;);&#xD;&#xA;" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="6254df27-6c5e-48d5-8891-9d32822c2598" ActionType="Trigger" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="8.boss3扔钱记录" Id="6254df27-6c5e-48d5-8891-9d32822c2598" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 获取全局武士技能字典（与初始化逻辑保持一致）&#xD;&#xA;var allBossSkills = Interpreter.StaticHelpers.GetDictVariable(&#xD;&#xA;    false, &#xD;&#xA;    &quot;The_Forked_Tower_Blood_all_boss_skills&quot;&#xD;&#xA;) as VariableDictionary;&#xD;&#xA;&#xD;&#xA;if (allBossSkills == null)&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取当前触发的技能相关参数&#xD;&#xA;string aid = $&quot;${aid}&quot;; // 技能ID&#xD;&#xA;string sid = $&quot;${sid}&quot;; // 玩家ID&#xD;&#xA;int currentCount = 0;&#xD;&#xA;&#xD;&#xA;// 定义技能与BOSS的映射关系（根据实际情况调整）&#xD;&#xA;var skillBossMap = new Dictionary&lt;string, (string bossKey, string skillName)&gt;&#xD;&#xA;{&#xD;&#xA;    {&quot;A286&quot;, (&quot;boss3&quot;, &quot;扔钱&quot;)},  // A286对应boss1的扔钱技能&#xD;&#xA;    {&quot;A285&quot;, (&quot;boss3&quot;, &quot;居合&quot;)}   // A285对应boss1的居合技能&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;// 检查当前技能是否在监控列表中&#xD;&#xA;if (skillBossMap.TryGetValue(aid, out var skillInfo))&#xD;&#xA;{&#xD;&#xA;    // 获取对应BOSS的技能字典&#xD;&#xA;    var bossDict = allBossSkills.GetValue(skillInfo.bossKey) as VariableDictionary;&#xD;&#xA;    if (bossDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 获取对应技能的玩家计数字典&#xD;&#xA;    var skillDict = bossDict.GetValue(skillInfo.skillName) as VariableDictionary;&#xD;&#xA;    if (skillDict == null)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 查找匹配的玩家并更新计数（使用初始化时的唯一键格式）&#xD;&#xA;    var targetKey = skillDict.Values&#xD;&#xA;        .Select(v =&gt; v.Key)&#xD;&#xA;        .FirstOrDefault(key =&gt; key.StartsWith(sid));&#xD;&#xA;&#xD;&#xA;    if (!string.IsNullOrEmpty(targetKey))&#xD;&#xA;    {&#xD;&#xA;        // 解析当前计数并加1&#xD;&#xA;        if (int.TryParse(skillDict.GetStringValue(targetKey), out currentCount))&#xD;&#xA;        {&#xD;&#xA;            skillDict.SetValue(targetKey, (currentCount + 1).ToString());&#xD;&#xA;            &#xD;&#xA;            // 保存更新后的字典&#xD;&#xA;            bossDict.SetValue(skillInfo.skillName, skillDict);&#xD;&#xA;            allBossSkills.SetValue(skillInfo.bossKey, bossDict);&#xD;&#xA;            Interpreter.StaticHelpers.SetDictVariable(&#xD;&#xA;                false, &#xD;&#xA;                &quot;The_Forked_Tower_Blood_all_boss_skills&quot;, &#xD;&#xA;                allBossSkills&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers />
      </Folder>
    </Folders>
    <Triggers>
      <Trigger Enabled="false" Name="使用说明" Id="8606534c-4f24-491e-9a39-d2439be92f5d" RegularExpression="">
        <Actions>
          <Action OrderNumber="1" ActionType="Placeholder" Description="本工具仅用于快速复盘，请勿出警" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="2" ActionType="Placeholder" Description="默认频道为默语e" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="3" ActionType="Placeholder" Description="由于发送频率限制，部分机制输出时使用到了换行符" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="4" ActionType="Placeholder" Description="鲶鱼精邮差会原封不动地发送换行符到聊天栏，而这是用户无法在聊天窗口中做到的。" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="5" ActionType="Placeholder" Description="所以直接将频道由e改成y存在风险，请自行斟酌" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="6" ActionType="Placeholder" Description="2025年10月7日发布" DescBgColor="fff" DescriptionOverride="True" />
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>