<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.753">
  <ExportedFolder FFXIVZoneFilterEnabled="True" FfxivZoneFilterRegularExpression="^1252$" Id="8a0b5a74-2c79-41fd-a8d7-663742e54da9" Name="找罐子工具" Enabled="true">
    <Folders />
    <Triggers>
      <Trigger Enabled="true" Name="1b.南边罐子" Id="8146516c-5db4-4414-9a4a-b7d5a83a520c" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Remove):[^:]*:(?&lt;fateId&gt;000007B9):(?&lt;progress&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" UseTTSTextExpression="南边结束" VariableOp="SetString" VariableName="guan" VariableExpression="-195.4419,-287.8911,110.15342;74.73397,-394.1289,110.494316;-386.437,-221.7847,98.60658;-554.6146,-309.1231,99.01769;107.0611,146.7059,105.699875;825.9521,772.4054,70;-836.7586,597.2944,106.999985;67.45271,745.8658,69.477974;69.70596,-239.064,111.56108;301.8741,70.59854,103.784424;-38.97946,-175.4589,102.073296;-60.72729,828.4997,69.687035;17.60418,674.6207,65.93209;393.2685,844.6924,57.545956;393.0191,-124.1651,104;-798.7886,-4.822005,84.22545;440.8355,876.4097,70.3;-734.1434,683.7238,170.99998;423.3505,578.9013,70.3;200.1241,624.2285,56;-603.3457,858.6771,139;-829.598,66.82948,62.66814;-645.3027,-73.54771,135.69208;-836.1612,770.2822,107;-676.6202,1.531581,128.57442;-713.6796,710.08,203;781.2514,560.0701,70;-746.1318,828.8809,172.00023;-730.5441,-371.4776,107.694275;-810.8279,-226.8324,114.053925" ActionType="Variable">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${_me.HasStatus(1531)}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="StringEqualNocase" />
            </Condition>
          </Action>
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="1a.北边罐子" Id="72c0a962-d0a7-4f9c-bd81-679e0f70c517" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Remove):[^:]*:(?&lt;fateId&gt;000007B8):(?&lt;progress&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" UseTTSTextExpression="南边结束" VariableOp="SetString" VariableName="guan" VariableExpression="571.5841,-813.1642,51.451305;662.4388,161.1339,120;606.4641,184.8517,108.07402;-312.2778,-35.25348,103.19944;587.7039,-545.8168,78.8956;891.2597,-20.672,120;878.1131,-91.1057,108.28959;803.6609,-354.1809,95.99998;341.4413,194.7507,95.99999;570.2421,272.1734,64.66201;-216.372,-510.1361,5.4469404;684.4223,-165.4811,96.10129;-188.1745,-717.2005,2.999999;-476.3011,-86.69939,101.44228;80.19762,391.2263,101.27949;-534.6993,-651.6244,2.999998;-165.2374,437.4505,95.33837;330.8659,-654.5339,6.7168036;-333.3444,-861.1722,2.9999998;-313.2906,70.76207,108.10962;-459.1735,5.054043,93.57443;-54.69518,405.0261,99.40573;-382.4396,-378.3482,109.30187;263.2559,326.6834,100.38499;224.7233,518.668,68.7328;19.73968,-420.977,26.045855;705.2716,358.6714,68.143616;-660.5336,-216.7666,98;-324.2736,203.2017,121;-386.5904,-461.0976,-0.13994062" ActionType="Variable">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${_me.HasStatus(1531)}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="StringEqualNocase" />
            </Condition>
          </Action>
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="2.记录坐标" Id="edd14d7b-e275-49b5-806e-59152372edcd" RegularExpression="(?&lt;timestamp&gt;^.{14}) (?:ActionEffect|AOEActionEffect) (?&lt;type&gt;(?:15|16)):(?&lt;sourceId&gt;[^:]*):(?&lt;source&gt;[^:]*):(?&lt;id&gt;C44):(?&lt;ability&gt;(?:[^:]|: )*?):(?&lt;targetId&gt;[^:]*):(?&lt;target&gt;[^:]*):(?&lt;flags&gt;[^:]*):(?&lt;damage&gt;[^:]*)(?::[^:]*){14}:(?&lt;targetCurrentHp&gt;[^:]*):(?&lt;targetMaxHp&gt;[^:]*):(?&lt;targetCurrentMp&gt;[^:]*):(?&lt;targetMaxMp&gt;[^:]*)(?::[^:]*){2}:(?&lt;targetX&gt;[^:]*):(?&lt;targetY&gt;[^:]*):(?&lt;targetZ&gt;[^:]*):(?&lt;targetHeading&gt;[^:]*):(?&lt;currentHp&gt;[^:]*):(?&lt;maxHp&gt;[^:]*):(?&lt;currentMp&gt;[^:]*):(?&lt;maxMp&gt;[^:]*)(?::[^:]*){2}:(?&lt;x&gt;[^:]*):(?&lt;y&gt;[^:]*):(?&lt;z&gt;[^:]*):(?&lt;heading&gt;[^:]*):(?&lt;sequence&gt;[^:]*):(?&lt;targetIndex&gt;[^:]*):(?&lt;targetCount&gt;[^:]*):(?&lt;ownerId&gt;[^:]*):(?&lt;ownerName&gt;[^:]*):(?&lt;effectDisplayType&gt;[^:]*):(?&lt;actionId&gt;[^:]*):(?&lt;actionAnimationId&gt;[^:]*):(?&lt;animationLockTime&gt;[^:]*):(?&lt;rotationHex&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="guanPosX" VariableExpression="${x}" ActionType="Variable" />
          <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="guanPosY" VariableExpression="${y}" ActionType="Variable" />
        </Actions>
        <Condition Enabled="true" Grouping="Or">
          <ConditionSingle Enabled="true" ExpressionL="${sourceId}" ExpressionTypeL="String" ExpressionR="${_me.id}" ExpressionTypeR="String" ConditionType="StringEqualCase" />
        </Condition>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="3.处理并标点" Id="fa17db8d-c250-442c-bc33-fc6431ef1b3e" RegularExpression="(?&lt;timestamp&gt;^.{14}) SystemLogMessage (?&lt;type&gt;29):(?&lt;instance&gt;8004002D):(?&lt;id&gt;[^:]*):(?&lt;param0&gt;01):(?&lt;param1&gt;[^:]*):(?&lt;param2&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 1. 从触发器变量 v:guan 中获取原始坐标数据&#xD;&#xA;string rawData = $&quot;${v:guan}&quot;;&#xD;&#xA;&#xD;&#xA;// 2. 将原始数据按分号分隔，解析为坐标字符串数组&#xD;&#xA;string[] coordArray = rawData.Split(';');&#xD;&#xA;&#xD;&#xA;// 3. 特殊情况处理：如果只有一组有效坐标，无需处理直接终止&#xD;&#xA;if (coordArray.Length == 1 &amp;&amp; !string.IsNullOrEmpty(coordArray[0]))&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 4. 获取筛选参数值&#xD;&#xA;string targetDirection = $&quot;${param1}&quot;;  // 获取目标方向编码（如&quot;02&quot;）&#xD;&#xA;string targetDistanceCode = $&quot;${id}&quot;;    // 获取目标距离编码&#xD;&#xA;&#xD;&#xA;// 5. 清除历史标记&#xD;&#xA;string json = &quot;{\&quot;A\&quot;: {}, \&quot;B\&quot;: {}, \&quot;C\&quot;: {}, \&quot;D\&quot;: {}, \&quot;One\&quot;: {}, \&quot;Two\&quot;: {}, \&quot;Three\&quot;: {}, \&quot;Four\&quot;: {}}&quot;;&#xD;&#xA;RealPlugin.plug.InvokeNamedCallback(&quot;place&quot;, json);&#xD;&#xA;&#xD;&#xA;// 6. 根据目标距离编码确定对应的距离范围（增加10单位容错，保持中点不变）&#xD;&#xA;float minDistance = 0;&#xD;&#xA;float maxDistance = float.MaxValue;&#xD;&#xA;&#xD;&#xA;switch (targetDistanceCode)&#xD;&#xA;{&#xD;&#xA;    case &quot;2AED&quot;:&#xD;&#xA;        // 原范围: &gt;200，中点无上限，容错后: &gt;190&#xD;&#xA;        minDistance = 190;&#xD;&#xA;        maxDistance = float.MaxValue;&#xD;&#xA;        break;&#xD;&#xA;    case &quot;2AEC&quot;:&#xD;&#xA;        // 原范围: 100-200，中点150，容错后: 90-210&#xD;&#xA;        minDistance = 90;&#xD;&#xA;        maxDistance = 210;&#xD;&#xA;        break;&#xD;&#xA;    case &quot;2AEB&quot;:&#xD;&#xA;        // 原范围: 25-100，中点62.5，容错后: 15-110&#xD;&#xA;        minDistance = 15;&#xD;&#xA;        maxDistance = 110;&#xD;&#xA;        break;&#xD;&#xA;    case &quot;2AEA&quot;:&#xD;&#xA;        // 原范围: 5-25，中点15，容错后: 0-35（0为下限）&#xD;&#xA;        minDistance = 0;&#xD;&#xA;        maxDistance = 35;&#xD;&#xA;        break;&#xD;&#xA;    default:&#xD;&#xA;        // 未知距离编码，不进行筛选&#xD;&#xA;        return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 7. 筛选符合条件的坐标并存储结果&#xD;&#xA;string filteredCoordString = &quot;&quot;;&#xD;&#xA;string place = &quot;A&quot;;&#xD;&#xA;&#xD;&#xA;foreach (var coordStr in coordArray)&#xD;&#xA;{&#xD;&#xA;    var parts = coordStr.Split(',');&#xD;&#xA;    if (parts.Length != 3) &#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    if (!float.TryParse(parts[0], out float x) || &#xD;&#xA;        !float.TryParse(parts[1], out float y) || &#xD;&#xA;        !float.TryParse(parts[2], out float z))&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    // 计算相对位置和距离&#xD;&#xA;    float dx = x - (float)${v:guanPosX};&#xD;&#xA;    float dy = (float)${v:guanPosY} - y;&#xD;&#xA;    float distance = (float)Math.Sqrt(dx * dx + dy * dy);&#xD;&#xA;&#xD;&#xA;    // 计算方向角度&#xD;&#xA;    double radians = Math.Atan2(dx, dy);&#xD;&#xA;    double degrees = radians * (180 / Math.PI);&#xD;&#xA;    if (degrees &lt; 0)&#xD;&#xA;        degrees += 360;&#xD;&#xA;&#xD;&#xA;    // 检查是否在目标方向范围内（每个方向54度，保持原始中点）&#xD;&#xA;    bool isInDirectionRange = false;&#xD;&#xA;    switch (targetDirection)&#xD;&#xA;    {&#xD;&#xA;        case &quot;01&quot;:&#xD;&#xA;            // 01方向：中点11.25度，范围11.25±27度 → 334.25°-360° 和 0°-38.25°&#xD;&#xA;            isInDirectionRange = (degrees &gt;= 334.25 &amp;&amp; degrees &lt;= 360) || &#xD;&#xA;                                 (degrees &gt;= 0 &amp;&amp; degrees &lt;= 38.25);&#xD;&#xA;            break;&#xD;&#xA;        case &quot;02&quot;:&#xD;&#xA;            // 02方向：中点45度，范围45±27度 → 18°-72°&#xD;&#xA;            isInDirectionRange = degrees &gt;= 18 &amp;&amp; degrees &lt;= 72;&#xD;&#xA;            break;&#xD;&#xA;        case &quot;03&quot;:&#xD;&#xA;            // 03方向：中点90度，范围90±27度 → 63°-117°&#xD;&#xA;            isInDirectionRange = degrees &gt;= 63 &amp;&amp; degrees &lt;= 117;&#xD;&#xA;            break;&#xD;&#xA;        case &quot;04&quot;:&#xD;&#xA;            // 04方向：中点135度，范围135±27度 → 108°-162°&#xD;&#xA;            isInDirectionRange = degrees &gt;= 108 &amp;&amp; degrees &lt;= 162;&#xD;&#xA;            break;&#xD;&#xA;        case &quot;05&quot;:&#xD;&#xA;            // 05方向：中点180度，范围180±27度 → 153°-207°&#xD;&#xA;            isInDirectionRange = degrees &gt;= 153 &amp;&amp; degrees &lt;= 207;&#xD;&#xA;            break;&#xD;&#xA;        case &quot;06&quot;:&#xD;&#xA;            // 06方向：中点225度，范围225±27度 → 198°-252°&#xD;&#xA;            isInDirectionRange = degrees &gt;= 198 &amp;&amp; degrees &lt;= 252;&#xD;&#xA;            break;&#xD;&#xA;        case &quot;07&quot;:&#xD;&#xA;            // 07方向：中点270度，范围270±27度 → 243°-297°&#xD;&#xA;            isInDirectionRange = degrees &gt;= 243 &amp;&amp; degrees &lt;= 297;&#xD;&#xA;            break;&#xD;&#xA;        case &quot;08&quot;:&#xD;&#xA;            // 08方向：中点315度，范围315±27度 → 288°-342°&#xD;&#xA;            isInDirectionRange = degrees &gt;= 288 &amp;&amp; degrees &lt;= 342;&#xD;&#xA;            break;&#xD;&#xA;        default:&#xD;&#xA;            // 未知方向编码，不进行筛选&#xD;&#xA;            isInDirectionRange = false;&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 检查是否在目标距离范围内（包含容错）&#xD;&#xA;    bool isInDistanceRange = distance &gt; minDistance &amp;&amp; distance &lt;= maxDistance;&#xD;&#xA;&#xD;&#xA;    // 筛选符合条件的坐标&#xD;&#xA;    if (isInDirectionRange &amp;&amp; isInDistanceRange)&#xD;&#xA;    {&#xD;&#xA;        if (string.IsNullOrEmpty(filteredCoordString))&#xD;&#xA;        {&#xD;&#xA;            filteredCoordString = coordStr;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            filteredCoordString += &quot;;&quot; + coordStr;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        // 在地图上标记当前坐标&#xD;&#xA;        string markJson = $&quot;{{\&quot;{place}\&quot;: {{\&quot;X\&quot;: {x}, \&quot;Z\&quot;: {y}, \&quot;Y\&quot;: {z}, \&quot;Active\&quot;: true}}}}&quot;;&#xD;&#xA;        RealPlugin.plug.InvokeNamedCallback(&quot;place&quot;, markJson);&#xD;&#xA;&#xD;&#xA;        // 更新下一个标记位&#xD;&#xA;        string[] placeOrder = { &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot; };&#xD;&#xA;        int currentIndex = Array.IndexOf(placeOrder, place);&#xD;&#xA;        &#xD;&#xA;        if (currentIndex &gt;= 0 &amp;&amp; currentIndex &lt; placeOrder.Length - 1)&#xD;&#xA;        {&#xD;&#xA;            place = placeOrder[currentIndex + 1];&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 8. 更新变量&#xD;&#xA;if (!string.IsNullOrEmpty(filteredCoordString))&#xD;&#xA;{&#xD;&#xA;    VariableScalar guanVar = new VariableScalar();&#xD;&#xA;    guanVar.Value = filteredCoordString;&#xD;&#xA;    guanVar.LastChanger = &quot;Mata&quot;; &#xD;&#xA;    guanVar.LastChanged = DateTime.Now;&#xD;&#xA;&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;guan&quot;, guanVar);&#xD;&#xA;}&#xD;&#xA;    " ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="1c.第二处罐子" Id="c44b7670-6cb4-4ea6-839e-5bc1a26c1bb3" RegularExpression="(?&lt;timestamp&gt;^.{14}) SystemLogMessage (?&lt;type&gt;29):(?&lt;instance&gt;8004002D):(?&lt;id&gt;2AF2):(?&lt;param0&gt;01):(?&lt;param1&gt;35AE):(?&lt;param2&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" UseTTSTextExpression="南边结束" VariableOp="SetString" VariableName="guan" VariableExpression="-676.4631,-769.7955,5;-823.9183,677.6934,140.00032;-886.4718,712.4964,107;-625.7809,810.8691,171;-813.9943,-663.3634,5;-842.8967,-125.0559,75.76903;-680.0345,739.9117,201;-793.0552,-777.3126,5;-708.6777,669.5714,171;-718.0424,-633.8791,5;-868.8489,-59.44909,67.5054;-803.5182,-602.7497,3;-732.2048,828.8491,139;-659.1158,-508.7968,12.198493;-785.997,790.5948,162.39513;-840.8771,-250.273,107.26465;-708.687,-139.3283,141.16982;-796.66,-228.9318,114.15647;-776.6315,-486.978,5;-758.8058,-183.164,127.66496" ActionType="Variable">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${_me.HasStatus(1531)}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="StringEqualNocase" />
            </Condition>
          </Action>
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>