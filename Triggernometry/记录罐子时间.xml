<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.753">
  <ExportedFolder FFXIVZoneFilterEnabled="True" FfxivZoneFilterRegularExpression="^1252$" Id="281c5213-6b54-40ed-ae13-31ae1a0d7d82" Name="记录岛罐子时间工具" Enabled="true">
    <Folders />
    <Triggers>
      <Trigger Enabled="true" Sequential="True" Name="0.岛ID" Id="db3b2107-b4ff-4e78-a3c4-d190860ad8cd" RegularExpression="^.{15}\S+ 28:967:" RefirePeriodExpression="1000">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Globalization;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 简化日志：仅保留关键操作反馈&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 计算罐子下次刷新时间（核心逻辑不变）&#xD;&#xA;static TimeSpan? CalculateTimeToNextRefresh(string timeStr)&#xD;&#xA;{&#xD;&#xA;    if (string.Equals(timeStr, &quot;未知&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;        return null;&#xD;&#xA;        &#xD;&#xA;    if (!timeStr.StartsWith(&quot;xx:&quot;))&#xD;&#xA;        return null;&#xD;&#xA;    &#xD;&#xA;    string cleanTimeStr = timeStr.Substring(3).Replace('：', ':');&#xD;&#xA;    string[] timeParts = cleanTimeStr.Split(':');&#xD;&#xA;    &#xD;&#xA;    if (timeParts.Length == 2 &amp;&amp; &#xD;&#xA;        int.TryParse(timeParts[0], out int minutes) &amp;&amp; &#xD;&#xA;        int.TryParse(timeParts[1], out int seconds) &amp;&amp;&#xD;&#xA;        minutes &gt;= 0 &amp;&amp; minutes &lt; 60 &amp;&amp; seconds &gt;= 0 &amp;&amp; seconds &lt; 60)&#xD;&#xA;    {&#xD;&#xA;        DateTime now = DateTime.Now;&#xD;&#xA;        DateTime targetTime = new DateTime(now.Year, now.Month, now.Day, now.Hour, minutes, seconds);&#xD;&#xA;        if (targetTime &lt;= now) targetTime = targetTime.AddHours(1);&#xD;&#xA;        return targetTime - now;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    return null;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 格式化刷新时间显示（核心逻辑不变）&#xD;&#xA;static string FormatTimeSpanForDisplay(TimeSpan? ts)&#xD;&#xA;{&#xD;&#xA;    return ts.HasValue ? $&quot;{ts.Value.Minutes:D2}:{ts.Value.Seconds:D2}&quot; : &quot;??:??&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 解析记录时间（内部逻辑，无日志）&#xD;&#xA;static bool TryParseRecordTime(string timeStr, out DateTime recordTime)&#xD;&#xA;{&#xD;&#xA;    return DateTime.TryParseExact(&#xD;&#xA;        timeStr, &#xD;&#xA;        &quot;yyyy-MM-dd HH:mm:ss&quot;, &#xD;&#xA;        CultureInfo.InvariantCulture,&#xD;&#xA;        DateTimeStyles.None, &#xD;&#xA;        out recordTime&#xD;&#xA;    );&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 核心：只更新当前进入岛屿的记录时间，清理过期条目（移除调试日志）&#xD;&#xA;static string UpdateOnlyCurrentIslandTime(string originalDaoValue, string currentIslandId, double maxHours = 4)&#xD;&#xA;{&#xD;&#xA;    string currentTimeStr = DateTime.Now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    &#xD;&#xA;    if (string.IsNullOrEmpty(originalDaoValue))&#xD;&#xA;        return string.Empty;&#xD;&#xA;        &#xD;&#xA;    foreach (string entry in originalDaoValue.Split(';'))&#xD;&#xA;    {&#xD;&#xA;        string trimmedEntry = entry.Trim();&#xD;&#xA;        if (string.IsNullOrEmpty(trimmedEntry)) &#xD;&#xA;            continue;&#xD;&#xA;        &#xD;&#xA;        string[] parts = trimmedEntry.Split(',');&#xD;&#xA;        if (parts.Length != 4 || !TryParseRecordTime(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue;&#xD;&#xA;        &#xD;&#xA;        // 清理过期条目&#xD;&#xA;        if ((now - recordTime).TotalHours &gt; maxHours)&#xD;&#xA;            continue;&#xD;&#xA;        &#xD;&#xA;        // 仅更新当前岛屿的记录时间&#xD;&#xA;        string updatedEntry = (parts[0].Trim() == currentIslandId) &#xD;&#xA;            ? $&quot;{parts[0].Trim()},{parts[1].Trim()},{parts[2].Trim()},{currentTimeStr}&quot; &#xD;&#xA;            : trimmedEntry;&#xD;&#xA;        &#xD;&#xA;        validEntries.Add(updatedEntry);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // 写回更新后的v:dao&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = string.Join(&quot;;&quot;, validEntries),&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;    &#xD;&#xA;    return daoVar.Value;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 1. 获取并验证当前岛屿ID&#xD;&#xA;    string targetEntityId = &quot;${_entity[PosX=809.0001&amp;&amp;bnpcid=18314].id}&quot;;&#xD;&#xA;    if (string.IsNullOrEmpty(targetEntityId) || targetEntityId == &quot;0&quot; || targetEntityId.Contains(&quot;${_entity&quot;))&#xD;&#xA;        targetEntityId = &quot;未知岛屿&quot;;&#xD;&#xA;    Log($&quot;当前岛屿ID：{targetEntityId}&quot;);&#xD;&#xA;&#xD;&#xA;    // 2. 更新v:daolast（最后进岛记录）&#xD;&#xA;    VariableScalar daolastVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = targetEntityId,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, daolastVar);&#xD;&#xA;&#xD;&#xA;    // 3. 更新当前岛屿记录时间 + 清理过期条目&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    string updatedDaoValue = UpdateOnlyCurrentIslandTime(daoValue, targetEntityId, 4);&#xD;&#xA;&#xD;&#xA;    // 4. 查询当前岛屿的罐子时间并显示&#xD;&#xA;    bool exists = false;&#xD;&#xA;    string northTimeStr = &quot;未知&quot;;&#xD;&#xA;    string southTimeStr = &quot;未知&quot;;&#xD;&#xA;    &#xD;&#xA;    if (!string.IsNullOrEmpty(updatedDaoValue))&#xD;&#xA;    {&#xD;&#xA;        foreach (string entry in updatedDaoValue.Split(';'))&#xD;&#xA;        {&#xD;&#xA;            string[] parts = entry.Split(',');&#xD;&#xA;            if (parts.Length &gt;= 4 &amp;&amp; parts[0].Trim() == targetEntityId)&#xD;&#xA;            {&#xD;&#xA;                exists = true;&#xD;&#xA;                northTimeStr = parts[1].Trim();&#xD;&#xA;                southTimeStr = parts[2].Trim();&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 显示罐子刷新信息&#xD;&#xA;    if (exists)&#xD;&#xA;    {&#xD;&#xA;        TimeSpan? northTime = CalculateTimeToNextRefresh(northTimeStr);&#xD;&#xA;        TimeSpan? southTime = CalculateTimeToNextRefresh(southTimeStr);&#xD;&#xA;        &#xD;&#xA;        string earliestJar = &quot;未知&quot;;&#xD;&#xA;        string earliestTime = &quot;??:??&quot;;&#xD;&#xA;        &#xD;&#xA;        if (northTime.HasValue &amp;&amp; southTime.HasValue)&#xD;&#xA;        {&#xD;&#xA;            if (northTime.Value &lt; southTime.Value)&#xD;&#xA;            {&#xD;&#xA;                earliestJar = &quot;北&quot;;&#xD;&#xA;                earliestTime = FormatTimeSpanForDisplay(northTime);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                earliestJar = &quot;南&quot;;&#xD;&#xA;                earliestTime = FormatTimeSpanForDisplay(southTime);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        else if (northTime.HasValue)&#xD;&#xA;        {&#xD;&#xA;            earliestJar = &quot;北&quot;;&#xD;&#xA;            earliestTime = FormatTimeSpanForDisplay(northTime);&#xD;&#xA;        }&#xD;&#xA;        else if (southTime.HasValue)&#xD;&#xA;        {&#xD;&#xA;            earliestJar = &quot;南&quot;;&#xD;&#xA;            earliestTime = FormatTimeSpanForDisplay(southTime);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        Log($&quot;北罐子：{northTimeStr} | 南罐子：{southTimeStr} | 下次刷新：{earliestJar}罐子（{earliestTime}）&quot;);&#xD;&#xA;    }&#xD;&#xA;    // 新增当前岛屿记录&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        string currentTimeStr = DateTime.Now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xD;&#xA;        string newEntry = $&quot;{targetEntityId},未知,未知,{currentTimeStr}&quot;;&#xD;&#xA;        string newDaoValue = string.IsNullOrEmpty(updatedDaoValue) ? newEntry : $&quot;{updatedDaoValue};{newEntry}&quot;;&#xD;&#xA;        &#xD;&#xA;        VariableScalar daoVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = newDaoValue,&#xD;&#xA;            LastChanger = &quot;System&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;        &#xD;&#xA;        Log(&quot;新增岛屿记录，暂无刷新信息&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    // 仅保留错误核心信息，不显示堆栈跟踪&#xD;&#xA;    Log($&quot;处理异常：{ex.Message}&quot;);&#xD;&#xA;}" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="1a.北边罐子" Id="400955a9-1d48-4612-9d6d-8516df63088d" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Add):[^:]*:(?&lt;fateId&gt;000007B8):(?&lt;progress&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 读取pv:daolast获取目标ID&#xD;&#xA;    string targetId = &quot;${pv:daolast}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(targetId) || targetId == &quot;0&quot; || targetId == &quot;未知岛屿&quot;)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;pv:daolast中的目标ID为空或无效，无法更新&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 读取pv:dao当前值&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    List&lt;string&gt; entries = new List&lt;string&gt;();&#xD;&#xA;    &#xD;&#xA;    if (!string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        // 按分号拆分，再过滤空条目&#xD;&#xA;        string[] tempEntries = daoValue.Split(';');&#xD;&#xA;        foreach (string entry in tempEntries)&#xD;&#xA;        {&#xD;&#xA;            if (!string.IsNullOrWhiteSpace(entry))&#xD;&#xA;            {&#xD;&#xA;                entries.Add(entry);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (entries.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;pv:dao为空，没有可更新的条目&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 查找目标ID对应的条目&#xD;&#xA;    int targetIndex = -1;&#xD;&#xA;    string[] targetParts = null;&#xD;&#xA;    &#xD;&#xA;    for (int i = 0; i &lt; entries.Count; i++)&#xD;&#xA;    {&#xD;&#xA;        if (string.IsNullOrWhiteSpace(entries[i])) continue;&#xD;&#xA;        &#xD;&#xA;        string[] parts = entries[i].Split(',');&#xD;&#xA;        if (parts.Length &gt;= 1 &amp;&amp; parts[0] == targetId)&#xD;&#xA;        {&#xD;&#xA;            targetIndex = i;&#xD;&#xA;            targetParts = parts;&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 检查是否找到目标条目&#xD;&#xA;    if (targetIndex == -1)&#xD;&#xA;    {&#xD;&#xA;        Log($&quot;在pv:dao中未找到ID为{targetId}的条目&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 获取当前最新时间&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    string currentTimeStr = now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentSecond = now.Second;&#xD;&#xA;&#xD;&#xA;    // 设置time1为当前时间&#xD;&#xA;    string time1 = $&quot;xx:{currentMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;    // 计算30分钟后的时间&#xD;&#xA;    int futureMinute = (currentMinute + 30) % 60;&#xD;&#xA;    string time2 = $&quot;xx:{futureMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;    // 构建更新后的条目&#xD;&#xA;    string updatedEntry;&#xD;&#xA;    if (targetParts != null &amp;&amp; targetParts.Length &gt;= 4)&#xD;&#xA;    {&#xD;&#xA;        updatedEntry = $&quot;{targetId},{time1},{time2},{targetParts[3]}&quot;;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        updatedEntry = $&quot;{targetId},{time1},{time2},{currentTimeStr}&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    entries[targetIndex] = updatedEntry;&#xD;&#xA;&#xD;&#xA;    // 重新拼接pv:dao字符串&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        if (!string.IsNullOrWhiteSpace(entry))&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    string newDaoValue = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;&#xD;&#xA;    // 更新pv:dao变量&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = newDaoValue,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;&#xD;&#xA;    // 修改日志中北罐子和南罐子的时间显示顺序&#xD;&#xA;    Log($&quot;时间已更新 - 北罐子:{time1}, 南罐子:{time2}&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;更新失败: {ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;    " ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="1b.南边罐子" Id="98f0de16-868a-43f4-85ed-d3721d7fd45c" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Add):[^:]*:(?&lt;fateId&gt;000007B9):(?&lt;progress&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 读取pv:daolast获取目标ID&#xD;&#xA;    string targetId = &quot;${pv:daolast}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(targetId) || targetId == &quot;0&quot; || targetId == &quot;未知岛屿&quot;)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;pv:daolast中的目标ID为空或无效，无法更新&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 读取pv:dao当前值&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    List&lt;string&gt; entries = new List&lt;string&gt;();&#xD;&#xA;    &#xD;&#xA;    if (!string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        // 按分号拆分，再过滤空条目&#xD;&#xA;        string[] tempEntries = daoValue.Split(';');&#xD;&#xA;        foreach (string entry in tempEntries)&#xD;&#xA;        {&#xD;&#xA;            if (!string.IsNullOrWhiteSpace(entry))&#xD;&#xA;            {&#xD;&#xA;                entries.Add(entry);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (entries.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;pv:dao为空，没有可更新的条目&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 查找目标ID对应的条目&#xD;&#xA;    int targetIndex = -1;&#xD;&#xA;    string[] targetParts = null;&#xD;&#xA;    &#xD;&#xA;    for (int i = 0; i &lt; entries.Count; i++)&#xD;&#xA;    {&#xD;&#xA;        if (string.IsNullOrWhiteSpace(entries[i])) continue;&#xD;&#xA;        &#xD;&#xA;        string[] parts = entries[i].Split(',');&#xD;&#xA;        if (parts.Length &gt;= 1 &amp;&amp; parts[0] == targetId)&#xD;&#xA;        {&#xD;&#xA;            targetIndex = i;&#xD;&#xA;            targetParts = parts;&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 检查是否找到目标条目&#xD;&#xA;    if (targetIndex == -1)&#xD;&#xA;    {&#xD;&#xA;        Log($&quot;在pv:dao中未找到ID为{targetId}的条目&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 获取当前最新时间&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    string currentTimeStr = now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentSecond = now.Second;&#xD;&#xA;&#xD;&#xA;    // 设置time1为当前时间&#xD;&#xA;    string time1 = $&quot;xx:{currentMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;    // 计算30分钟后的时间&#xD;&#xA;    int futureMinute = (currentMinute + 30) % 60;&#xD;&#xA;    string time2 = $&quot;xx:{futureMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;    // 构建更新后的条目（北罐子为time2，南罐子为time1）&#xD;&#xA;    string updatedEntry;&#xD;&#xA;    if (targetParts != null &amp;&amp; targetParts.Length &gt;= 4)&#xD;&#xA;    {&#xD;&#xA;        updatedEntry = $&quot;{targetId},{time2},{time1},{targetParts[3]}&quot;;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        updatedEntry = $&quot;{targetId},{time2},{time1},{currentTimeStr}&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    entries[targetIndex] = updatedEntry;&#xD;&#xA;&#xD;&#xA;    // 重新拼接pv:dao字符串&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        if (!string.IsNullOrWhiteSpace(entry))&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    string newDaoValue = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;&#xD;&#xA;    // 更新pv:dao变量&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = newDaoValue,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;&#xD;&#xA;    // 日志显示北罐子:time2, 南罐子:time1&#xD;&#xA;    Log($&quot;时间已更新 - 北罐子:{time2}, 南罐子:{time1}&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;更新失败: {ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;    " ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="2a.生成口令" Id="e4dc1580-442d-40bd-82c7-05765841afe1" RegularExpression="^.{15}\S+ 00:0038::生成口令$">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;&#xD;&#xA;// 定义日志输出函数（仅用于输出最终结果）&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// Base62编码函数&#xD;&#xA;static string EncodeBase62(long value)&#xD;&#xA;{&#xD;&#xA;    const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;    if (value == 0) return &quot;0&quot;;&#xD;&#xA;    &#xD;&#xA;    var result = new Stack&lt;char&gt;();&#xD;&#xA;    while (value &gt; 0)&#xD;&#xA;    {&#xD;&#xA;        result.Push(Base62Chars[(int)(value % 62)]);&#xD;&#xA;        value /= 62;&#xD;&#xA;    }&#xD;&#xA;    return new string(result.ToArray());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 主处理逻辑&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 从pv:dao获取原始数据&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;错误：pv:dao数据为空&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // 按分号拆分多组数据&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (entries.Length == 0)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;错误：未找到有效数据&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    List&lt;string&gt; compressedEntries = new List&lt;string&gt;();&#xD;&#xA;    &#xD;&#xA;    // 处理每组数据&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;        &#xD;&#xA;        // 处理岛屿ID&#xD;&#xA;        string islandId = parts[0].Trim();&#xD;&#xA;        if (islandId.Length != 8 || !islandId.StartsWith(&quot;400&quot;)) continue;&#xD;&#xA;        string hexPart = islandId.Substring(3, 5);&#xD;&#xA;        if (!long.TryParse(hexPart, System.Globalization.NumberStyles.HexNumber, null, out long hexDecimal)) continue;&#xD;&#xA;        &#xD;&#xA;        // 处理time1&#xD;&#xA;        string time1 = parts[1].Trim();&#xD;&#xA;        if (!time1.StartsWith(&quot;xx:&quot;)) continue;&#xD;&#xA;        string mmss = time1.Substring(3).Replace(&quot;:&quot;, &quot;&quot;);&#xD;&#xA;        &#xD;&#xA;        // 处理记录时间&#xD;&#xA;        string recordTimeStr = parts[3].Trim();&#xD;&#xA;        if (!DateTime.TryParse(recordTimeStr, out DateTime recordTime)) continue;&#xD;&#xA;        int secondsSinceMidnight = (int)(recordTime - DateTime.Today).TotalSeconds;&#xD;&#xA;        if (secondsSinceMidnight &lt; 0 || secondsSinceMidnight &gt;= 86400) continue;&#xD;&#xA;        &#xD;&#xA;        // 拼接数字串并编码&#xD;&#xA;        string fullNumberString = $&quot;{hexDecimal}{mmss}{secondsSinceMidnight:D5}&quot;;&#xD;&#xA;        if (long.TryParse(fullNumberString, out long fullNumber))&#xD;&#xA;        {&#xD;&#xA;            compressedEntries.Add(EncodeBase62(fullNumber));&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (compressedEntries.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;错误：没有有效数据生成压缩口令&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // 输出最终口令（使用;作为连接符号，替代原来的|）&#xD;&#xA;    Log($&quot;#{string.Join(&quot;;&quot;, compressedEntries)}&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;处理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;    " ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="2b.导入口令" Id="eabd0946-6c88-46ee-966e-f2ee906dd951" RegularExpression="^.{15}\S+ 00:0038::导入口令(?&lt;kouling&gt;#.*)">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 日志输出函数（仅用于必要信息）&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// Base62解码函数&#xD;&#xA;static long DecodeBase62(string value)&#xD;&#xA;{&#xD;&#xA;    const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;    long result = 0;&#xD;&#xA;    foreach (char c in value)&#xD;&#xA;    {&#xD;&#xA;        int charIndex = Base62Chars.IndexOf(c);&#xD;&#xA;        if (charIndex == -1)&#xD;&#xA;            throw new ArgumentException($&quot;无效的Base62字符: {c}&quot;);&#xD;&#xA;        result = result * 62 + charIndex;&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取当前时间&#xD;&#xA;DateTime now = DateTime.Now;&#xD;&#xA;&#xD;&#xA;// 1. 从pv:dao读取原始数据&#xD;&#xA;string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;{&#xD;&#xA;    Log(&quot;错误：pv:dao数据为空&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 解析原始数据为字典&#xD;&#xA;Dictionary&lt;string, string&gt; originalData = new Dictionary&lt;string, string&gt;();&#xD;&#xA;string[] originalEntries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;foreach (string entry in originalEntries)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (parts.Length &gt;= 1)&#xD;&#xA;    {&#xD;&#xA;        string islandId = parts[0].Trim();&#xD;&#xA;        if (!originalData.ContainsKey(islandId))&#xD;&#xA;            originalData[islandId] = entry;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 2. 从${kouling}获取压缩口令并处理&#xD;&#xA;string password = &quot;${kouling}&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(password))&#xD;&#xA;{&#xD;&#xA;    Log(&quot;错误：${kouling}变量为空，未找到压缩口令&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理口令格式&#xD;&#xA;password = password.TrimStart('#');&#xD;&#xA;password = password.Replace(&quot; &quot;, &quot;&quot;).Replace(&quot;\t&quot;, &quot;&quot;).Replace(&quot;\r&quot;, &quot;&quot;).Replace(&quot;\n&quot;, &quot;&quot;);&#xD;&#xA;password = password.Replace('；', ';');&#xD;&#xA;string[] encodedEntries = password.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;&#xD;&#xA;if (encodedEntries.Length == 0)&#xD;&#xA;{&#xD;&#xA;    Log(&quot;错误：口令格式无效，未找到有效条目&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 3. 遍历处理每组编码&#xD;&#xA;foreach (string encoded in encodedEntries)&#xD;&#xA;{&#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;        long fullNumber = DecodeBase62(encoded);&#xD;&#xA;        string fullNumberStr = fullNumber.ToString();&#xD;&#xA;        &#xD;&#xA;        if (fullNumberStr.Length &lt; 13)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        string secondsPart = fullNumberStr.Substring(fullNumberStr.Length - 9);&#xD;&#xA;        string hexDecimalStr = fullNumberStr.Substring(0, fullNumberStr.Length - 9);&#xD;&#xA;        &#xD;&#xA;        if (!long.TryParse(hexDecimalStr, out long hexDecimal))&#xD;&#xA;            continue;&#xD;&#xA;            &#xD;&#xA;        string hexPart = hexDecimal.ToString(&quot;X&quot;).PadLeft(5, '0');&#xD;&#xA;        string islandId = $&quot;400{hexPart}&quot;;&#xD;&#xA;&#xD;&#xA;        if (secondsPart.Length &lt; 4)&#xD;&#xA;            continue;&#xD;&#xA;            &#xD;&#xA;        string mmss = secondsPart.Substring(0, 4);&#xD;&#xA;        string time1 = $&quot;xx:{mmss.Substring(0, 2)}:{mmss.Substring(2, 2)}&quot;;&#xD;&#xA;        &#xD;&#xA;        if (!int.TryParse(mmss.Substring(0, 2), out int minutes) || &#xD;&#xA;            !int.TryParse(mmss.Substring(2, 2), out int seconds))&#xD;&#xA;            continue;&#xD;&#xA;            &#xD;&#xA;        minutes += 30;&#xD;&#xA;        minutes %= 60;&#xD;&#xA;        string time2 = $&quot;xx:{minutes:D2}:{seconds:D2}&quot;;&#xD;&#xA;&#xD;&#xA;        if (secondsPart.Length &lt; 9 || &#xD;&#xA;            !int.TryParse(secondsPart.Substring(4, 5), out int secondsSinceMidnight) ||&#xD;&#xA;            secondsSinceMidnight &lt; 0 || secondsSinceMidnight &gt;= 86400)&#xD;&#xA;            continue;&#xD;&#xA;            &#xD;&#xA;        DateTime recordTime = DateTime.Today.AddSeconds(secondsSinceMidnight);&#xD;&#xA;        string recordTimeStr = recordTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xD;&#xA;        &#xD;&#xA;        string newEntry = $&quot;{islandId},{time1},{time2},{recordTimeStr}&quot;;&#xD;&#xA;        if (originalData.ContainsKey(islandId))&#xD;&#xA;        {&#xD;&#xA;            originalData[islandId] = newEntry;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            originalData[islandId] = newEntry;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    catch&#xD;&#xA;    {&#xD;&#xA;        // 静默处理异常，不输出调试信息&#xD;&#xA;        continue;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 4. 合并更新后的数据并写回pv:dao&#xD;&#xA;string updatedDaoValue = string.Join(&quot;;&quot;, originalData.Values);&#xD;&#xA;VariableScalar daoVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = updatedDaoValue,&#xD;&#xA;    LastChanger = &quot;System&quot;,&#xD;&#xA;    LastChanged = now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;&#xD;&#xA;Log(&quot;数据更新完成&quot;);&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="9.岛查询" Id="0a3ba57e-d03c-4734-9410-c986d2171e2e" RegularExpression="^.{15}\S+ 00:0038::查岛$">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Text;&#xD;&#xA;using Triggernometry;&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 读取pv:dao数据&#xD;&#xA;    string daoData = &quot;${pv:dao}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoData))&#xD;&#xA;    {&#xD;&#xA;        Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e 无有效数据&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 拆分数据&#xD;&#xA;    string[] entries = daoData.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (entries.Length == 0)&#xD;&#xA;    {&#xD;&#xA;        Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e 无有效数据&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 构建输出内容&#xD;&#xA;    StringBuilder output = new StringBuilder();&#xD;&#xA;    &#xD;&#xA;    // 首行添加换行（保留空行）&#xD;&#xA;    output.AppendLine();&#xD;&#xA;    &#xD;&#xA;    // 表头（精确控制空格）&#xD;&#xA;    output.AppendLine(&quot;ID        北        南        最后进岛时间&quot;);&#xD;&#xA;    &#xD;&#xA;    // 处理数据行&#xD;&#xA;    for (int i = 0; i &lt; entries.Length; i++)&#xD;&#xA;    {&#xD;&#xA;        string entry = entries[i];&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;&#xD;&#xA;        // 提取数据&#xD;&#xA;        string islandId = parts[0].Trim();&#xD;&#xA;        string northTime = parts[1].Trim();&#xD;&#xA;        string southTime = parts[2].Trim();&#xD;&#xA;        string lastEntryTime = parts[3].Trim();&#xD;&#xA;        &#xD;&#xA;        // 数据列间用4个空格分隔&#xD;&#xA;        string line = $&quot;{islandId}    {northTime}    {southTime}    {lastEntryTime}&quot;;&#xD;&#xA;        &#xD;&#xA;        // 最后一行不添加额外换行&#xD;&#xA;        if (i == entries.Length - 1)&#xD;&#xA;            output.Append(line);&#xD;&#xA;        else&#xD;&#xA;            output.AppendLine(line);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 一次性输出&#xD;&#xA;    Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + output.ToString());&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e 处理失败：&quot; + ex.Message);&#xD;&#xA;}&#xD;&#xA;    " ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>