<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.753">
  <ExportedFolder FfxivZoneFilterRegularExpression="^1252$" Id="281c5213-6b54-40ed-ae13-31ae1a0d7d82" Name="记录岛罐子时间工具" Enabled="true">
    <Folders />
    <Triggers>
      <Trigger Enabled="true" Name="2a.生成口令" Id="e4dc1580-442d-40bd-82c7-05765841afe1" RegularExpression="^.{15}\S+ 00:0038::口令$">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;static string EncodeBase62(int value)&#xD;&#xA;{&#xD;&#xA;    const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;    if (value == 0) return &quot;0&quot;;&#xD;&#xA;    &#xD;&#xA;    var result = new Stack&lt;char&gt;();&#xD;&#xA;    while (value &gt; 0)&#xD;&#xA;    {&#xD;&#xA;        result.Push(Base62Chars[value % 62]);&#xD;&#xA;        value /= 62;&#xD;&#xA;    }&#xD;&#xA;    return new string(result.ToArray());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    List&lt;string&gt; compressedEntries = new List&lt;string&gt;();&#xD;&#xA;    &#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;        &#xD;&#xA;        string areaId = parts[0].Trim();&#xD;&#xA;        string islandId = parts[1].Trim();&#xD;&#xA;        &#xD;&#xA;        if (!int.TryParse(parts[2].Trim(), out int northTime)) continue; // 38&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime)) continue;&#xD;&#xA;        &#xD;&#xA;        int hour = recordTime.Hour; // 09&#xD;&#xA;        int minute = recordTime.Minute; // 57&#xD;&#xA;        &#xD;&#xA;        // 分别对三个数值进行Base62编码&#xD;&#xA;        string encodedNorthTime = EncodeBase62(northTime); // 38 → 编码结果&#xD;&#xA;        string encodedHour = EncodeBase62(hour); // 09 → 编码结果&#xD;&#xA;        string encodedMinute = EncodeBase62(minute); // 57 → 编码结果&#xD;&#xA;        &#xD;&#xA;        // 拼接区域ID、岛屿ID和三个编码结果（无分隔符）&#xD;&#xA;        compressedEntries.Add($&quot;{areaId}{islandId}{encodedNorthTime}{encodedHour}{encodedMinute}&quot;);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (compressedEntries.Count &gt; 0)&#xD;&#xA;    {&#xD;&#xA;        Log($&quot;#{string.Join(&quot;;&quot;, compressedEntries)}&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="2b.导入口令" Id="eabd0946-6c88-46ee-966e-f2ee906dd951" RegularExpression="^.{15}\S+ 00:0038::(?&lt;kouling&gt;#([A-Za-z0-9]+)(?:;([A-Za-z0-9]+))*)$">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Text.RegularExpressions;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;static int DecodeBase62(string value)&#xD;&#xA;{&#xD;&#xA;    const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;    int result = 0;&#xD;&#xA;    foreach (char c in value)&#xD;&#xA;    {&#xD;&#xA;        int charIndex = Base62Chars.IndexOf(c);&#xD;&#xA;        if (charIndex == -1)&#xD;&#xA;            throw new ArgumentException($&quot;无效的Base62字符: {c}&quot;);&#xD;&#xA;        result = result * 62 + charIndex;&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    Dictionary&lt;string, string&gt; islandData = new Dictionary&lt;string, string&gt;();&#xD;&#xA;    &#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    if (!string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        foreach (string entry in entries)&#xD;&#xA;        {&#xD;&#xA;            string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;            if (parts.Length &gt;= 4)&#xD;&#xA;            {&#xD;&#xA;                string islandId = parts[1].Trim();&#xD;&#xA;                if (!islandData.ContainsKey(islandId))&#xD;&#xA;                    islandData[islandId] = entry;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    string password = &quot;${kouling}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(password))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;错误：未找到口令数据&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    password = password.Trim();&#xD;&#xA;    var passwordMatch = Regex.Match(password, @&quot;^#([A-Za-z0-9]+)(?:;([A-Za-z0-9]+))*$&quot;);&#xD;&#xA;    if (!passwordMatch.Success)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;错误：口令格式不正确&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    List&lt;string&gt; encodedEntries = new List&lt;string&gt;();&#xD;&#xA;    for (int i = 1; i &lt; passwordMatch.Groups.Count; i++)&#xD;&#xA;    {&#xD;&#xA;        if (!string.IsNullOrEmpty(passwordMatch.Groups[i].Value))&#xD;&#xA;        {&#xD;&#xA;            encodedEntries.Add(passwordMatch.Groups[i].Value);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    foreach (string encoded in encodedEntries)&#xD;&#xA;    {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;            var entryMatch = Regex.Match(encoded, @&quot;^(\d)([A-Za-z0-9]{2,3})([A-Za-z0-9])([A-Za-z0-9])([A-Za-z0-9])$&quot;);&#xD;&#xA;            if (!entryMatch.Success)&#xD;&#xA;                continue;&#xD;&#xA;            &#xD;&#xA;            string areaId = entryMatch.Groups[1].Value;&#xD;&#xA;            string islandId = entryMatch.Groups[2].Value;&#xD;&#xA;            &#xD;&#xA;            int northTime = DecodeBase62(entryMatch.Groups[3].Value);&#xD;&#xA;            int hour = DecodeBase62(entryMatch.Groups[4].Value);&#xD;&#xA;            int minute = DecodeBase62(entryMatch.Groups[5].Value);&#xD;&#xA;            &#xD;&#xA;            if (northTime &lt; 0 || northTime &gt;= 60 || hour &lt; 0 || hour &gt;= 24 || minute &lt; 0 || minute &gt;= 60)&#xD;&#xA;                continue;&#xD;&#xA;            &#xD;&#xA;            DateTime recordTime = new DateTime(now.Year, now.Month, now.Day, hour, minute, 0);&#xD;&#xA;            string recordTimeStr = recordTime.ToString(&quot;HH:mm&quot;);&#xD;&#xA;            &#xD;&#xA;            islandData[islandId] = $&quot;{areaId},{islandId},{northTime},{recordTimeStr}&quot;;&#xD;&#xA;        }&#xD;&#xA;        catch&#xD;&#xA;        {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    string updatedData = string.Join(&quot;;&quot;, islandData.Values);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = updatedData,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;    &#xD;&#xA;    Log(&quot;数据已更新&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;处理错误：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 获取当前时间&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    // 读取pv:dao数据&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;pv:dao数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 拆分数据条目&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    // 处理每条数据&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue; // 跳过格式错误的数据&#xD;&#xA;&#xD;&#xA;        // 解析时间部分&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue; // 跳过时间格式错误的数据&#xD;&#xA;&#xD;&#xA;        // 计算记录时间的总分钟数&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        // 计算时间差（处理跨天情况）&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            // 跨天情况：当前时间分钟数 + 24小时分钟数 - 记录时间分钟数&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // 保留3小时（180分钟）内的数据&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 更新pv:dao数据&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;&#xD;&#xA;//    Log($&quot;数据清理完成，保留{validEntries.Count}条有效数据&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="3.岛查询" Id="0a3ba57e-d03c-4734-9410-c986d2171e2e" RegularExpression="^.{15}\S+ 00:0038::查岛$">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 获取当前时间&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    // 读取pv:dao数据&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;pv:dao数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 拆分数据条目&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    // 处理每条数据&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue; // 跳过格式错误的数据&#xD;&#xA;&#xD;&#xA;        // 解析时间部分&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue; // 跳过时间格式错误的数据&#xD;&#xA;&#xD;&#xA;        // 计算记录时间的总分钟数&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        // 计算时间差（处理跨天情况）&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            // 跨天情况：当前时间分钟数 + 24小时分钟数 - 记录时间分钟数&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // 保留3小时（180分钟）内的数据&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 更新pv:dao数据&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;&#xD;&#xA;//    Log($&quot;数据清理完成，保留{validEntries.Count}条有效数据&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    // 读取数据&#xD;&#xA;    string daoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;无数据可查询&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 类型映射&#xD;&#xA;    Dictionary&lt;string, string&gt; typeMap = new Dictionary&lt;string, string&gt;&#xD;&#xA;    {&#xD;&#xA;        {&quot;1&quot;, &quot;鸟&quot;}, {&quot;2&quot;, &quot;猪&quot;}, {&quot;3&quot;, &quot;猫&quot;}, {&quot;4&quot;, &quot;狗&quot;}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    // 解析数据&#xD;&#xA;    var displayList = new List&lt;dynamic&gt;();&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;&#xD;&#xA;        string typeCode = parts[0].Trim();&#xD;&#xA;        string islandId = parts[1].Trim();&#xD;&#xA;        if (!int.TryParse(parts[2].Trim(), out int northTime)) continue;&#xD;&#xA;        string lastTime = parts[3].Trim(); // 获取最后的时间字段&#xD;&#xA;&#xD;&#xA;        // 类型转换&#xD;&#xA;        string typeName = typeMap.TryGetValue(typeCode, out var name) ? name : &quot;未知&quot;;&#xD;&#xA;&#xD;&#xA;        // 时间计算与补零处理&#xD;&#xA;        int southTime = (northTime - 30 + 60) % 60;&#xD;&#xA;        int firstTime = Math.Min(northTime, southTime);&#xD;&#xA;        int secondTime = Math.Max(northTime, southTime);&#xD;&#xA;        &#xD;&#xA;        // 小于10的时间补零（如8→08）&#xD;&#xA;        string firstTimeStr = firstTime.ToString(&quot;D2&quot;);&#xD;&#xA;        string secondTimeStr = secondTime.ToString(&quot;D2&quot;);&#xD;&#xA;        &#xD;&#xA;        // 格式化时间显示，添加最后的时间&#xD;&#xA;        string timeDisplay = $&quot;{firstTimeStr}分（{(firstTime == northTime ? &quot;北&quot; : &quot;南&quot;)}） {secondTimeStr}分（{(secondTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）-{lastTime}&quot;;&#xD;&#xA;&#xD;&#xA;        // 使用匿名类型存储&#xD;&#xA;        displayList.Add(new&#xD;&#xA;        {&#xD;&#xA;            TypeName = typeName,&#xD;&#xA;            IslandId = islandId,&#xD;&#xA;            FirstTime = firstTime,&#xD;&#xA;            TimeDisplay = timeDisplay&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 排序并展示&#xD;&#xA;    if (displayList.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;未找到有效数据&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    var sortedList = displayList.OrderBy(item =&gt; item.FirstTime).ToList();&#xD;&#xA;    &#xD;&#xA;//    Log(&quot;查询结果：&quot;);&#xD;&#xA;    foreach (var item in sortedList)&#xD;&#xA;    {&#xD;&#xA;        Log($&quot;{item.TypeName} - {item.IslandId}(ID) - {item.TimeDisplay}&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;查询失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="1.记录罐子" Id="d49a68f3-99e7-44c0-9df8-0813672a8aa6" RegularExpression="">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const ushort Target7B8Value = 1976;&#xD;&#xA;const ushort Target7B9Value = 1977;&#xD;&#xA;&#xD;&#xA;static void SetTimelast(int minute)&#xD;&#xA;{&#xD;&#xA;    minute = minute % 60;&#xD;&#xA;    if (minute &lt; 0) minute += 60;&#xD;&#xA;    &#xD;&#xA;    var timelastVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = minute.ToString(&quot;D2&quot;),&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;timelast&quot;, timelastVar);&#xD;&#xA;&#xD;&#xA;    string timelastValue = timelastVar.Value;&#xD;&#xA;    string daolastValue = &quot;${pv:daolast}&quot;;&#xD;&#xA;    string visitlastValue = &quot;${pv:visitlast}&quot;;&#xD;&#xA;    string areaIdValue = &quot;${pv:arealast}&quot;;&#xD;&#xA;    string currentDaoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    &#xD;&#xA;    if (!string.IsNullOrEmpty(daolastValue) &#xD;&#xA;        &amp;&amp; !daolastValue.Equals(&quot;出岛&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;        &amp;&amp; !daolastValue.Equals(&quot;未知岛屿&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;        &amp;&amp; !string.IsNullOrEmpty(timelastValue)&#xD;&#xA;        &amp;&amp; !timelastValue.Equals(&quot;未知&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;    {&#xD;&#xA;        string newDaoValue;&#xD;&#xA;        if (string.IsNullOrEmpty(currentDaoValue))&#xD;&#xA;        {&#xD;&#xA;            newDaoValue = $&quot;{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            newDaoValue = $&quot;{currentDaoValue};{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var daoVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = newDaoValue,&#xD;&#xA;            LastChanger = &quot;Mata&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    var baseAddr = Memory.XivBaseAddress;&#xD;&#xA;    if (baseAddr == IntPtr.Zero) return;&#xD;&#xA;    &#xD;&#xA;    ulong managerPtr = (ulong)baseAddr + 0x2970B58;&#xD;&#xA;    ulong managerBase = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)managerPtr);&#xD;&#xA;    if (managerBase == 0 || managerBase &lt; 0x100000) return;&#xD;&#xA;    &#xD;&#xA;    ulong listStart = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x90));&#xD;&#xA;    ulong listEnd = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x98));&#xD;&#xA;    if (listStart == 0 || listEnd == 0 || listStart &gt;= listEnd) return;&#xD;&#xA;&#xD;&#xA;    int count = (int)((listEnd - listStart) / 0x8);&#xD;&#xA;    &#xD;&#xA;    for (int i = 0; i &lt; count; i++)&#xD;&#xA;    {&#xD;&#xA;        ulong fateAddr = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(listStart + (ulong)i * 0x8));&#xD;&#xA;        if (fateAddr == 0 || fateAddr &lt; 0x100000) continue;&#xD;&#xA;        &#xD;&#xA;        ushort memFateId = Memory.Read&lt;ushort&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x18));&#xD;&#xA;        &#xD;&#xA;        if (memFateId == Target7B8Value || memFateId == Target7B9Value)&#xD;&#xA;        {&#xD;&#xA;            int timeStamp = Memory.Read&lt;int&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x20));&#xD;&#xA;            if (timeStamp &lt;= 0) continue;&#xD;&#xA;            &#xD;&#xA;            DateTime localTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)&#xD;&#xA;                .AddSeconds(timeStamp)&#xD;&#xA;                .ToLocalTime();&#xD;&#xA;&#xD;&#xA;            if (memFateId == Target7B8Value)&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute);&#xD;&#xA;                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 北罐: 记录分钟 {localTime.Minute:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute + 30);&#xD;&#xA;                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 南罐: 调整后分钟 {(localTime.Minute + 30) % 60:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="2" TriggerId="d49a68f3-99e7-44c0-9df8-0813672a8aa6" TriggerForce="regexp,active" ActionType="Trigger" ExecutionDelayExpression="15000">
            <Condition Enabled="true" Grouping="And">
              <ConditionSingle Enabled="true" ExpressionL="${pv:timelast}" ExpressionTypeL="String" ExpressionR="未知" ExpressionTypeR="String" ConditionType="StringEqualCase" />
            </Condition>
          </Action>
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="9.清除岛ID" Id="db3b2107-b4ff-4e78-a3c4-d190860ad8cd" RegularExpression="(?&lt;timestamp&gt;^.{14}) Territory (?&lt;type&gt;01):(?!4E4)(?&lt;id&gt;[^:]+):(?&lt;name&gt;[^:]*)(?:$|:)" RefirePeriodExpression="1000">
        <Actions>
          <Action OrderNumber="1" VariableOp="SetString" VariableName="daolast" VariableExpression="出岛" VariablePersist="True" ActionType="Variable" />
          <Action OrderNumber="2" VariableOp="SetString" VariableName="timelast" VariableExpression="未知" VariablePersist="True" ActionType="Variable" />
          <Action OrderNumber="3" TriggerOp="CancelTrigger" TriggerId="d49a68f3-99e7-44c0-9df8-0813672a8aa6" TriggerForce="regexp,active" ActionType="Trigger" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="0a.记录岛ID" Id="7e3bde11-e150-4b7c-912a-ae500c9806ab" RegularExpression="(?&lt;timestamp&gt;^.{14}) Territory (?&lt;type&gt;01):(?&lt;id&gt;4E4):(?&lt;name&gt;[^:]*)(?:$|:)" RefirePeriodExpression="1000">
        <Actions>
          <Action OrderNumber="1" VariableOp="SetString" VariableName="daotmp" VariableExpression="${_entity[PosX=809.0001&amp;&amp;bnpcid=18314].id}" ActionType="Variable" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;&#xD;&#xA;static readonly Dictionary&lt;int, int&gt; WorldIdToAreaIdMap = new Dictionary&lt;int, int&gt;()&#xD;&#xA;{&#xD;&#xA;    { 1042, 1 }, { 1043, 3 }, { 1044, 1 }, { 1045, 3 }, { 1081, 1 },&#xD;&#xA;    { 1106, 3 }, { 1060, 1 }, { 1169, 3 }, { 1167, 1 }, { 1170, 2 },&#xD;&#xA;    { 1171, 2 }, { 1172, 2 }, { 1076, 2 }, { 1113, 2 }, { 1166, 2 },&#xD;&#xA;    { 1121, 2 }, { 1173, 1 }, { 1174, 1 }, { 1175, 1 }, { 1177, 3 },&#xD;&#xA;    { 1178, 3 }, { 1179, 3 }, { 1176, 2 }, { 1192, 4 }, { 1183, 4 },&#xD;&#xA;    { 1180, 4 }, { 1186, 4 }, { 1201, 4 }&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    string entityId = &quot;${v:daotmp}&quot;;&#xD;&#xA;    &#xD;&#xA;    string currentTime = DateTime.Now.ToString(&quot;HH:mm&quot;);&#xD;&#xA;    var visitVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = currentTime,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;visitlast&quot;, visitVar);&#xD;&#xA;&#xD;&#xA;    string worldIdStr = &quot;${_me.CurrentWorldid}&quot;;&#xD;&#xA;    int worldId = int.Parse(worldIdStr);&#xD;&#xA;    if (WorldIdToAreaIdMap.TryGetValue(worldId, out int areaId))&#xD;&#xA;    {&#xD;&#xA;        var areaVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = areaId.ToString(),&#xD;&#xA;            LastChanger = &quot;Mata&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;arealast&quot;, areaVar);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (!string.IsNullOrEmpty(entityId) &#xD;&#xA;        &amp;&amp; entityId != &quot;0&quot; &#xD;&#xA;        &amp;&amp; !entityId.Contains(&quot;${v:daotmp&quot;) &#xD;&#xA;        &amp;&amp; entityId.Length == 8 &#xD;&#xA;        &amp;&amp; entityId.StartsWith(&quot;40&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;    {&#xD;&#xA;        ulong hexValue = ulong.Parse(entityId, System.Globalization.NumberStyles.HexNumber);&#xD;&#xA;        ulong adjustedValue = hexValue - 0x40000000;&#xD;&#xA;        &#xD;&#xA;        string base62Code = adjustedValue == 0 ? Base62Chars[0].ToString() : &quot;&quot;;&#xD;&#xA;        var temp = adjustedValue;&#xD;&#xA;        while (temp &gt; 0)&#xD;&#xA;        {&#xD;&#xA;            base62Code = Base62Chars[(int)(temp % 62)] + base62Code;&#xD;&#xA;            temp /= 62;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var daolastVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = base62Code,&#xD;&#xA;            LastChanger = &quot;Mata&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, daolastVar);&#xD;&#xA;&#xD;&#xA;        string currentDaoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;        string targetDaolast = base62Code;&#xD;&#xA;        bool foundMatch = false;&#xD;&#xA;&#xD;&#xA;        if (!string.IsNullOrEmpty(currentDaoValue))&#xD;&#xA;        {&#xD;&#xA;            string[] daoRecords = currentDaoValue.Split(&#xD;&#xA;                new[] { ';' }, &#xD;&#xA;                StringSplitOptions.RemoveEmptyEntries&#xD;&#xA;            );&#xD;&#xA;            &#xD;&#xA;            foreach (string record in daoRecords)&#xD;&#xA;            {&#xD;&#xA;                string[] recordParts = record.Split(&#xD;&#xA;                    new[] { ',' }, &#xD;&#xA;                    StringSplitOptions.None&#xD;&#xA;                );&#xD;&#xA;                &#xD;&#xA;                if (recordParts.Length &gt;= 4 &amp;&amp; recordParts[1] == targetDaolast)&#xD;&#xA;                {&#xD;&#xA;                    if (int.TryParse(recordParts[2], out int northTime))&#xD;&#xA;                    {&#xD;&#xA;                        int southTime = northTime - 30;&#xD;&#xA;                        if (southTime &lt; 0)&#xD;&#xA;                        {&#xD;&#xA;                            southTime += 60;&#xD;&#xA;                        }&#xD;&#xA;                        &#xD;&#xA;                        int currentMinute = DateTime.Now.Minute;&#xD;&#xA;                        &#xD;&#xA;                        int northDiff = northTime &gt;= currentMinute ? &#xD;&#xA;                                        northTime - currentMinute : &#xD;&#xA;                                        (northTime + 60) - currentMinute;&#xD;&#xA;                                        &#xD;&#xA;                        int southDiff = southTime &gt;= currentMinute ? &#xD;&#xA;                                        southTime - currentMinute : &#xD;&#xA;                                        (southTime + 60) - currentMinute;&#xD;&#xA;                        &#xD;&#xA;                        string closestJar;&#xD;&#xA;                        if (northDiff &lt;= southDiff)&#xD;&#xA;                        {&#xD;&#xA;                            closestJar = $&quot;北（{northDiff}分钟后）&quot;;&#xD;&#xA;                        }&#xD;&#xA;                        else&#xD;&#xA;                        {&#xD;&#xA;                            closestJar = $&quot;南（{southDiff}分钟后）&quot;;&#xD;&#xA;                        }&#xD;&#xA;                        &#xD;&#xA;                        Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &#xD;&#xA;                            $&quot;/e 岛屿id:{targetDaolast}|北：{northTime}分|南：{southTime}分|{closestJar}&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    &#xD;&#xA;                    string timelastPart = recordParts[2];&#xD;&#xA;                    if (!string.IsNullOrEmpty(timelastPart))&#xD;&#xA;                    {&#xD;&#xA;                        var timelastVar = new VariableScalar&#xD;&#xA;                        {&#xD;&#xA;                            Value = timelastPart,&#xD;&#xA;                            LastChanger = &quot;Mata&quot;,&#xD;&#xA;                            LastChanged = DateTime.Now&#xD;&#xA;                        };&#xD;&#xA;                        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;timelast&quot;, timelastVar);&#xD;&#xA;                        &#xD;&#xA;                        var updatedVisitVar = new VariableScalar&#xD;&#xA;                        {&#xD;&#xA;                            Value = DateTime.Now.ToString(&quot;HH:mm&quot;),&#xD;&#xA;                            LastChanger = &quot;Mata&quot;,&#xD;&#xA;                            LastChanged = DateTime.Now&#xD;&#xA;                        };&#xD;&#xA;                        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;pv:dao&quot;, updatedVisitVar);&#xD;&#xA;                        &#xD;&#xA;                        foundMatch = true;&#xD;&#xA;                        break;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            if (!foundMatch)&#xD;&#xA;            {&#xD;&#xA;                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &#xD;&#xA;                    $&quot;/e 岛屿id:{targetDaolast}|北：未知|南：未知&quot;);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &#xD;&#xA;                $&quot;/e 岛屿id:{targetDaolast}|北：未知|南：未知&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        var unknownVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = &quot;未知岛屿&quot;,&#xD;&#xA;            LastChanger = &quot;Mata&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, unknownVar);&#xD;&#xA;        Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &#xD;&#xA;            $&quot;/e 岛屿id:未知岛屿|北：未知|南：未知&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 代码异常：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="3" TriggerId="d49a68f3-99e7-44c0-9df8-0813672a8aa6" TriggerForce="regexp,active" ActionType="Trigger" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Source="FFXIVNetwork" Sequential="True" Name="0b.记录岛ID（适配DR）挖完罐子回一下起始点" Id="3ee262fd-e4c9-4ed6-8eb2-2551c12784e6" RegularExpression="^03\|[^|]+\|(?&lt;id&gt;40[^|]{6})\|.+\|541\|.+\|4716915\|.+\|809\.00\|-739\.00\|72\.68\|0\.79" DebugLevel="Info" PrevActions="Interrupt">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;&#xD;&#xA;string currentId = &quot;${id}&quot;;&#xD;&#xA;ulong hexValue = ulong.Parse(currentId, System.Globalization.NumberStyles.HexNumber);&#xD;&#xA;ulong adjustedValue = hexValue - 0x40000000;&#xD;&#xA;&#xD;&#xA;string processedId = adjustedValue == 0 ? Base62Chars[0].ToString() : &quot;&quot;;&#xD;&#xA;var temp = adjustedValue;&#xD;&#xA;while (temp &gt; 0)&#xD;&#xA;{&#xD;&#xA;    processedId = Base62Chars[(int)(temp % 62)] + processedId;&#xD;&#xA;    temp /= 62;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string existingValue = &quot;${pv:daolast}&quot;;&#xD;&#xA;&#xD;&#xA;if (processedId != existingValue)&#xD;&#xA;{&#xD;&#xA;    var newVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = processedId,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, newVar);&#xD;&#xA;&#xD;&#xA;    string daolastValue = newVar.Value;&#xD;&#xA;    string timelastValue = &quot;${pv:timelast}&quot;;&#xD;&#xA;    string visitlastValue = &quot;${pv:visitlast}&quot;;&#xD;&#xA;    string areaIdValue = &quot;${pv:arealast}&quot;;&#xD;&#xA;    string currentDaoValue = &quot;${pv:dao}&quot;;&#xD;&#xA;    &#xD;&#xA;    if (!string.IsNullOrEmpty(daolastValue)&#xD;&#xA;        &amp;&amp; !daolastValue.Equals(&quot;出岛&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;        &amp;&amp; !daolastValue.Equals(&quot;未知岛屿&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;        &amp;&amp; !string.IsNullOrEmpty(timelastValue)&#xD;&#xA;        &amp;&amp; !timelastValue.Equals(&quot;未知&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;    {&#xD;&#xA;        string newDaoValue;&#xD;&#xA;        if (string.IsNullOrEmpty(currentDaoValue))&#xD;&#xA;        {&#xD;&#xA;            newDaoValue = $&quot;{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            newDaoValue = $&quot;{currentDaoValue};{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var daoVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = newDaoValue,&#xD;&#xA;            LastChanger = &quot;Mata&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
        <Condition Enabled="false" Grouping="And">
          <ConditionSingle Enabled="true" ExpressionL="${_ffxivparty[1].x}" ExpressionTypeL="Numeric" ExpressionR="850" ExpressionTypeR="Numeric" ConditionType="NumericLess" />
          <ConditionSingle Enabled="true" ExpressionL="${_ffxivparty[1].x}" ExpressionTypeL="Numeric" ExpressionR="840" ExpressionTypeR="Numeric" ConditionType="NumericGreater" />
        </Condition>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>