<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.753">
  <ExportedFolder FFXIVZoneFilterEnabled="True" FfxivZoneFilterRegularExpression="^1252$" Id="281c5213-6b54-40ed-ae13-31ae1a0d7d82" Name="记录岛罐子时间工具" Enabled="true">
    <Folders />
    <Triggers>
      <Trigger Enabled="true" Sequential="True" Name="1.岛ID" Id="db3b2107-b4ff-4e78-a3c4-d190860ad8cd" RegularExpression="^.{15}\S+ 28:967:">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 获取目标实体的ID&#xD;&#xA;string targetEntityId = &quot;${_entity[PosX=809.0001&amp;&amp;bnpcid=18314].id}&quot;;&#xD;&#xA;&#xD;&#xA;// 验证获取到的ID是否有效（非空）&#xD;&#xA;if (string.IsNullOrEmpty(targetEntityId))&#xD;&#xA;{&#xD;&#xA;    Log(&quot;未能获取到目标实体的ID&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 将targetEntityId赋值给v:daolast变量（无论是否存在于v:dao中，都更新最新ID）&#xD;&#xA;VariableScalar daolastVar = new VariableScalar();&#xD;&#xA;daolastVar.Value = targetEntityId;&#xD;&#xA;daolastVar.LastChanger = &quot;System&quot;;&#xD;&#xA;daolastVar.LastChanged = DateTime.Now;&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(false, &quot;daolast&quot;, daolastVar);&#xD;&#xA;// 移除v:daolast设置的日志输出&#xD;&#xA;&#xD;&#xA;// 获取当前v:dao变量的值&#xD;&#xA;string daoValue = &quot;${v:dao}&quot;;&#xD;&#xA;string existingEntry = null;&#xD;&#xA;&#xD;&#xA;// 检查ID是否已存在于v:dao中，若存在则读取该条目&#xD;&#xA;if (!string.IsNullOrEmpty(daoValue))&#xD;&#xA;{&#xD;&#xA;    // 按分号拆分所有条目&#xD;&#xA;    string[] entries = daoValue.Split(';');&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        // 每条目按逗号拆分出ID部分&#xD;&#xA;        string[] parts = entry.Split(',');&#xD;&#xA;        if (parts.Length &gt; 0 &amp;&amp; parts[0] == targetEntityId)&#xD;&#xA;        {&#xD;&#xA;            existingEntry = entry;&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 如果ID已存在，输出读取到的条目&#xD;&#xA;if (existingEntry != null)&#xD;&#xA;{&#xD;&#xA;    // 解析TIME1和TIME2&#xD;&#xA;    string[] entryParts = existingEntry.Split(',');&#xD;&#xA;    string time1 = entryParts.Length &gt; 1 ? entryParts[1] : &quot;未知&quot;;&#xD;&#xA;    string time2 = entryParts.Length &gt; 2 ? entryParts[2] : &quot;未知&quot;;&#xD;&#xA;    Log($&quot;岛ID：{targetEntityId}，北罐子时间：{time1}，南罐子时间：{time2}&quot;);&#xD;&#xA;}&#xD;&#xA;// 如果ID不存在，则添加新条目&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    // 构建新条目（ID,未知,未知）&#xD;&#xA;    string newEntry = $&quot;{targetEntityId},未知,未知&quot;;&#xD;&#xA;    &#xD;&#xA;    // 构建新的v:dao值&#xD;&#xA;    string newDaoValue = string.IsNullOrEmpty(daoValue) &#xD;&#xA;        ? newEntry &#xD;&#xA;        : $&quot;{daoValue};{newEntry}&quot;;&#xD;&#xA;    &#xD;&#xA;    // 更新v:dao变量&#xD;&#xA;    VariableScalar daoVar = new VariableScalar();&#xD;&#xA;    daoVar.Value = newDaoValue;&#xD;&#xA;    daoVar.LastChanger = &quot;System&quot;;&#xD;&#xA;    daoVar.LastChanged = DateTime.Now;&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;dao&quot;, daoVar);&#xD;&#xA;    &#xD;&#xA;    // 修改日志输出格式&#xD;&#xA;    Log($&quot;岛ID：{targetEntityId}，北罐子时间：未知，南罐子时间：未知&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="1a.北边罐子" Id="400955a9-1d48-4612-9d6d-8516df63088d" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Add):[^:]*:(?&lt;fateId&gt;000007B8):(?&lt;progress&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 读取v:daolast获取目标ID&#xD;&#xA;string targetId = &quot;${v:daolast}&quot;;&#xD;&#xA;if (string.IsNullOrEmpty(targetId))&#xD;&#xA;{&#xD;&#xA;    Log(&quot;v:daolast为空，无法获取目标ID&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 读取v:dao当前值&#xD;&#xA;string daoValue = &quot;${v:dao}&quot;;&#xD;&#xA;if (string.IsNullOrEmpty(daoValue))&#xD;&#xA;{&#xD;&#xA;    Log(&quot;v:dao为空，没有可更新的条目&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 拆分所有条目并查找目标ID对应的条目&#xD;&#xA;string[] entries = daoValue.Split(';');&#xD;&#xA;int targetIndex = -1;&#xD;&#xA;string[] targetParts = null;&#xD;&#xA;&#xD;&#xA;for (int i = 0; i &lt; entries.Length; i++)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entries[i].Split(',');&#xD;&#xA;    if (parts.Length &gt;= 1 &amp;&amp; parts[0] == targetId)&#xD;&#xA;    {&#xD;&#xA;        targetIndex = i;&#xD;&#xA;        targetParts = parts;&#xD;&#xA;        break;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 检查是否找到目标条目&#xD;&#xA;if (targetIndex == -1)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;在v:dao中未找到ID为{targetId}的条目&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取当前时间（分钟和秒）&#xD;&#xA;DateTime now = DateTime.Now;&#xD;&#xA;int currentMinute = now.Minute;&#xD;&#xA;int currentSecond = now.Second;&#xD;&#xA;&#xD;&#xA;// 设置time1为xx:当前分钟:当前秒&#xD;&#xA;string time1 = $&quot;xx:{currentMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;// 计算30分钟后的分钟数（仅处理分钟部分，不进位到小时）&#xD;&#xA;int futureMinute = (currentMinute + 30) % 60; // 使用取模运算确保结果在0-59之间&#xD;&#xA;&#xD;&#xA;// 设置time2为xx:计算后的分钟:当前秒（不考虑小时变化）&#xD;&#xA;string time2 = $&quot;xx:{futureMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;// 构建更新后的条目&#xD;&#xA;string updatedEntry = $&quot;{targetId},{time1},{time2}&quot;;&#xD;&#xA;entries[targetIndex] = updatedEntry;&#xD;&#xA;&#xD;&#xA;// 重新拼接v:dao字符串&#xD;&#xA;string newDaoValue = string.Join(&quot;;&quot;, entries);&#xD;&#xA;&#xD;&#xA;// 更新v:dao变量&#xD;&#xA;VariableScalar daoVar = new VariableScalar();&#xD;&#xA;daoVar.Value = newDaoValue;&#xD;&#xA;daoVar.LastChanger = &quot;System&quot;;&#xD;&#xA;daoVar.LastChanged = DateTime.Now;&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(false, &quot;dao&quot;, daoVar);&#xD;&#xA;&#xD;&#xA;Log(&quot;时间已更新&quot;);&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="1b.南边罐子" Id="98f0de16-868a-43f4-85ed-d3721d7fd45c" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Add):[^:]*:(?&lt;fateId&gt;000007B9):(?&lt;progress&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;// 读取v:daolast获取目标ID&#xD;&#xA;string targetId = &quot;${v:daolast}&quot;;&#xD;&#xA;if (string.IsNullOrEmpty(targetId))&#xD;&#xA;{&#xD;&#xA;    Log(&quot;v:daolast为空，无法获取目标ID&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 读取v:dao当前值&#xD;&#xA;string daoValue = &quot;${v:dao}&quot;;&#xD;&#xA;if (string.IsNullOrEmpty(daoValue))&#xD;&#xA;{&#xD;&#xA;    Log(&quot;v:dao为空，没有可更新的条目&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 拆分所有条目并查找目标ID对应的条目&#xD;&#xA;string[] entries = daoValue.Split(';');&#xD;&#xA;int targetIndex = -1;&#xD;&#xA;string[] targetParts = null;&#xD;&#xA;&#xD;&#xA;for (int i = 0; i &lt; entries.Length; i++)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entries[i].Split(',');&#xD;&#xA;    if (parts.Length &gt;= 1 &amp;&amp; parts[0] == targetId)&#xD;&#xA;    {&#xD;&#xA;        targetIndex = i;&#xD;&#xA;        targetParts = parts;&#xD;&#xA;        break;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 检查是否找到目标条目&#xD;&#xA;if (targetIndex == -1)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;在v:dao中未找到ID为{targetId}的条目&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 获取当前时间（分钟和秒）&#xD;&#xA;DateTime now = DateTime.Now;&#xD;&#xA;int currentMinute = now.Minute;&#xD;&#xA;int currentSecond = now.Second;&#xD;&#xA;&#xD;&#xA;// 设置time1为xx:当前分钟:当前秒&#xD;&#xA;string time1 = $&quot;xx:{currentMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;// 计算30分钟后的分钟数（仅处理分钟部分，不进位到小时）&#xD;&#xA;int futureMinute = (currentMinute + 30) % 60; // 使用取模运算确保结果在0-59之间&#xD;&#xA;&#xD;&#xA;// 设置time2为xx:计算后的分钟:当前秒（不考虑小时变化）&#xD;&#xA;string time2 = $&quot;xx:{futureMinute:D2}:{currentSecond:D2}&quot;;&#xD;&#xA;&#xD;&#xA;// 构建更新后的条目&#xD;&#xA;string updatedEntry = $&quot;{targetId},{time2},{time1}&quot;;&#xD;&#xA;entries[targetIndex] = updatedEntry;&#xD;&#xA;&#xD;&#xA;// 重新拼接v:dao字符串&#xD;&#xA;string newDaoValue = string.Join(&quot;;&quot;, entries);&#xD;&#xA;&#xD;&#xA;// 更新v:dao变量&#xD;&#xA;VariableScalar daoVar = new VariableScalar();&#xD;&#xA;daoVar.Value = newDaoValue;&#xD;&#xA;daoVar.LastChanger = &quot;System&quot;;&#xD;&#xA;daoVar.LastChanged = DateTime.Now;&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(false, &quot;dao&quot;, daoVar);&#xD;&#xA;&#xD;&#xA;Log(&quot;时间已更新&quot;);&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>