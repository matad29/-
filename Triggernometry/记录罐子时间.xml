<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.753">
  <ExportedFolder FfxivZoneFilterRegularExpression="^1252$" Id="281c5213-6b54-40ed-ae13-31ae1a0d7d82" Name="记录岛罐子时间工具" Enabled="true">
    <Folders />
    <Triggers>
      <Trigger Enabled="true" Name="2a.生成口令" Id="e4dc1580-442d-40bd-82c7-05765841afe1" RegularExpression="^.{15}\S+ 00:0038::kl$">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="去掉超时数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="3" Enabled="False" ActionType="Placeholder" Description="去掉重复数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt; latestEntries = new Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt;();&#xD;&#xA;&#xD;&#xA;foreach (string entry in entries)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (parts.Length != 4)&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    if (!DateTime.TryParseExact(parts[3].Trim(), &quot;HH:mm&quot;, null, System.Globalization.DateTimeStyles.None, out DateTime entryTime))&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    string groupKey = parts[1];&#xD;&#xA;    if (!latestEntries.ContainsKey(groupKey))&#xD;&#xA;    {&#xD;&#xA;        latestEntries.Add(groupKey, new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime));&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if (entryTime &gt; latestEntries[groupKey].Value)&#xD;&#xA;        {&#xD;&#xA;            latestEntries[groupKey] = new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; result = new List&lt;string&gt;();&#xD;&#xA;foreach (var item in latestEntries.Values)&#xD;&#xA;{&#xD;&#xA;    result.Add(item.Key);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string processedData = string.Join(&quot;;&quot;, result);&#xD;&#xA;VariableScalar daoVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = processedData,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="5" Enabled="False" ActionType="Placeholder" Description="生成口令" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="6" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;static string EncodeBase62(int value)&#xD;&#xA;{&#xD;&#xA;    const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;    if (value == 0) return &quot;0&quot;;&#xD;&#xA;    &#xD;&#xA;    var result = new Stack&lt;char&gt;();&#xD;&#xA;    while (value &gt; 0)&#xD;&#xA;    {&#xD;&#xA;        result.Push(Base62Chars[value % 62]);&#xD;&#xA;        value /= 62;&#xD;&#xA;    }&#xD;&#xA;    return new string(result.ToArray());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    List&lt;string&gt; compressedEntries = new List&lt;string&gt;();&#xD;&#xA;    &#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;        &#xD;&#xA;        string areaId = parts[0].Trim();&#xD;&#xA;        string islandId = parts[1].Trim();&#xD;&#xA;        &#xD;&#xA;        if (!int.TryParse(parts[2].Trim(), out int northTime)) continue;&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime)) continue;&#xD;&#xA;        &#xD;&#xA;        int hour = recordTime.Hour;&#xD;&#xA;        int minute = recordTime.Minute;&#xD;&#xA;        &#xD;&#xA;        string encodedNorthTime = EncodeBase62(northTime);&#xD;&#xA;        string encodedHour = EncodeBase62(hour);&#xD;&#xA;        string encodedMinute = EncodeBase62(minute);&#xD;&#xA;        &#xD;&#xA;        compressedEntries.Add($&quot;{areaId}{islandId}{encodedNorthTime}{encodedHour}{encodedMinute}&quot;);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (compressedEntries.Count &gt; 0)&#xD;&#xA;    {&#xD;&#xA;        Log($&quot;#{string.Join(&quot;;&quot;, compressedEntries)}&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="2b.导入口令" Id="eabd0946-6c88-46ee-966e-f2ee906dd951" RegularExpression="^.{15}\S+ 00:0038::kl(?&lt;kouling&gt;#([A-Za-z0-9]+)(?:;([A-Za-z0-9]+))*)$">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="导入数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Text.RegularExpressions;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;static int DecodeBase62(string value)&#xD;&#xA;{&#xD;&#xA;    const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;    int result = 0;&#xD;&#xA;    foreach (char c in value)&#xD;&#xA;    {&#xD;&#xA;        int charIndex = Base62Chars.IndexOf(c);&#xD;&#xA;        if (charIndex == -1)&#xD;&#xA;            throw new ArgumentException($&quot;无效的Base62字符: {c}&quot;);&#xD;&#xA;        result = result * 62 + charIndex;&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    List&lt;string&gt; daoEntries = new List&lt;string&gt;();&#xD;&#xA;    &#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (!string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        string[] existingEntries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        daoEntries.AddRange(existingEntries);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    string password = &quot;${kouling}&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(password))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;错误：未找到口令数据&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    password = password.Trim();&#xD;&#xA;    var passwordMatch = Regex.Match(password, @&quot;^#([A-Za-z0-9]+)(?:;([A-Za-z0-9]+))*$&quot;);&#xD;&#xA;    if (!passwordMatch.Success)&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;错误：口令格式不正确&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    List&lt;string&gt; encodedEntries = new List&lt;string&gt;();&#xD;&#xA;    for (int i = 1; i &lt; passwordMatch.Groups.Count; i++)&#xD;&#xA;    {&#xD;&#xA;        if (!string.IsNullOrEmpty(passwordMatch.Groups[i].Value))&#xD;&#xA;        {&#xD;&#xA;            encodedEntries.Add(passwordMatch.Groups[i].Value);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    foreach (string encoded in encodedEntries)&#xD;&#xA;    {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;            var entryMatch = Regex.Match(encoded, @&quot;^(\d)([A-Za-z0-9]{2,4})([A-Za-z0-9])([A-Za-z0-9])([A-Za-z0-9])$&quot;);&#xD;&#xA;            if (!entryMatch.Success)&#xD;&#xA;                continue;&#xD;&#xA;            &#xD;&#xA;            string areaId = entryMatch.Groups[1].Value;&#xD;&#xA;            string islandId = entryMatch.Groups[2].Value;&#xD;&#xA;            string northTimeCode = entryMatch.Groups[3].Value;&#xD;&#xA;            string hourCode = entryMatch.Groups[4].Value;&#xD;&#xA;            string minuteCode = entryMatch.Groups[5].Value;&#xD;&#xA;            &#xD;&#xA;            int northTime = DecodeBase62(northTimeCode);&#xD;&#xA;            int hour = DecodeBase62(hourCode);&#xD;&#xA;            int minute = DecodeBase62(minuteCode);&#xD;&#xA;            &#xD;&#xA;            if (northTime &lt; 0 || northTime &gt;= 60 || hour &lt; 0 || hour &gt;= 24 || minute &lt; 0 || minute &gt;= 60)&#xD;&#xA;                continue;&#xD;&#xA;            &#xD;&#xA;            DateTime recordTime = new DateTime(now.Year, now.Month, now.Day, hour, minute, 0);&#xD;&#xA;            string recordTimeStr = recordTime.ToString(&quot;HH:mm&quot;);&#xD;&#xA;            &#xD;&#xA;            daoEntries.Add($&quot;{areaId},{islandId},{northTime},{recordTimeStr}&quot;);&#xD;&#xA;        }&#xD;&#xA;        catch&#xD;&#xA;        {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    string updatedData = string.Join(&quot;;&quot;, daoEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = updatedData,&#xD;&#xA;        LastChanger = &quot;mata&quot;,  // 将LastChanger从&quot;System&quot;改为&quot;mata&quot;&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;    &#xD;&#xA;    Log(&quot;数据已导入&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;处理错误：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="3" Enabled="False" ActionType="Placeholder" Description="去掉超时数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="5" Enabled="False" ActionType="Placeholder" Description="去掉重复数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="6" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt; latestEntries = new Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt;();&#xD;&#xA;&#xD;&#xA;foreach (string entry in entries)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (parts.Length != 4)&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    if (!DateTime.TryParseExact(parts[3].Trim(), &quot;HH:mm&quot;, null, System.Globalization.DateTimeStyles.None, out DateTime entryTime))&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    string groupKey = parts[1];&#xD;&#xA;    if (!latestEntries.ContainsKey(groupKey))&#xD;&#xA;    {&#xD;&#xA;        latestEntries.Add(groupKey, new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime));&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if (entryTime &gt; latestEntries[groupKey].Value)&#xD;&#xA;        {&#xD;&#xA;            latestEntries[groupKey] = new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; result = new List&lt;string&gt;();&#xD;&#xA;foreach (var item in latestEntries.Values)&#xD;&#xA;{&#xD;&#xA;    result.Add(item.Key);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string processedData = string.Join(&quot;;&quot;, result);&#xD;&#xA;VariableScalar daoVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = processedData,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="1c.记录罐子" Id="d49a68f3-99e7-44c0-9df8-0813672a8aa6" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Update):[^:]*:(?&lt;fateId&gt;000007B(8|9)):(?&lt;progress&gt;[^:]*)(?:$|:)" PeriodRefire="Deny" RefirePeriodExpression="60000">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="处理进岛时间" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string currentTime = DateTime.Now.ToString(&quot;HH:mm&quot;);&#xD;&#xA;&#xD;&#xA;var visitVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = currentTime,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;visitlast&quot;, visitVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="3" Enabled="False" ActionType="Placeholder" Description="如果数据全部存在就写入本次数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string areaIdValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;arealast&quot;) ?? &quot;&quot;;&#xD;&#xA;string daolastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;daolast&quot;) ?? &quot;&quot;;&#xD;&#xA;string timelastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;timelast&quot;) ?? &quot;&quot;;&#xD;&#xA;string visitlastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;visitlast&quot;) ?? &quot;&quot;;&#xD;&#xA;string currentDaoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;if (!string.IsNullOrEmpty(daolastValue) &#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;出岛&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;未知岛屿&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !string.IsNullOrEmpty(timelastValue)&#xD;&#xA;    &amp;&amp; !timelastValue.Equals(&quot;未知&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;{&#xD;&#xA;    string newDaoRecord = $&quot;{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;    string newDaoValue = string.IsNullOrEmpty(currentDaoValue) &#xD;&#xA;        ? newDaoRecord &#xD;&#xA;        : $&quot;{currentDaoValue};{newDaoRecord}&quot;;&#xD;&#xA;&#xD;&#xA;    var daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = newDaoValue,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="5" Enabled="False" ActionType="Placeholder" Description="去掉超时数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="6" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="7" Enabled="False" ActionType="Placeholder" Description="去掉重复数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="8" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt; latestEntries = new Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt;();&#xD;&#xA;&#xD;&#xA;foreach (string entry in entries)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (parts.Length != 4)&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    if (!DateTime.TryParseExact(parts[3].Trim(), &quot;HH:mm&quot;, null, System.Globalization.DateTimeStyles.None, out DateTime entryTime))&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    string groupKey = parts[1];&#xD;&#xA;    if (!latestEntries.ContainsKey(groupKey))&#xD;&#xA;    {&#xD;&#xA;        latestEntries.Add(groupKey, new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime));&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if (entryTime &gt; latestEntries[groupKey].Value)&#xD;&#xA;        {&#xD;&#xA;            latestEntries[groupKey] = new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; result = new List&lt;string&gt;();&#xD;&#xA;foreach (var item in latestEntries.Values)&#xD;&#xA;{&#xD;&#xA;    result.Add(item.Key);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string processedData = string.Join(&quot;;&quot;, result);&#xD;&#xA;VariableScalar daoVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = processedData,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="9" Enabled="False" ActionType="Placeholder" Description="输出数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="10" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Dictionary&lt;string, string&gt; typeMap = new Dictionary&lt;string, string&gt;&#xD;&#xA;    {&#xD;&#xA;        {&quot;1&quot;, &quot;鸟&quot;}, {&quot;2&quot;, &quot;猪&quot;}, {&quot;3&quot;, &quot;猫&quot;}, {&quot;4&quot;, &quot;狗&quot;}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    var displayList = new List&lt;dynamic&gt;();&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;&#xD;&#xA;        string typeCode = parts[0].Trim();&#xD;&#xA;        string islandId = parts[1].Trim();&#xD;&#xA;        if (!int.TryParse(parts[2].Trim(), out int northTime)) continue;&#xD;&#xA;        string lastTime = parts[3].Trim();&#xD;&#xA;&#xD;&#xA;        string typeName = typeMap.TryGetValue(typeCode, out var name) ? name : &quot;未知&quot;;&#xD;&#xA;&#xD;&#xA;        int southTime = (northTime - 30 + 60) % 60;&#xD;&#xA;        int firstTime = Math.Min(northTime, southTime);&#xD;&#xA;        int secondTime = Math.Max(northTime, southTime);&#xD;&#xA;        &#xD;&#xA;        string firstTimeStr = firstTime.ToString(&quot;D2&quot;);&#xD;&#xA;        string secondTimeStr = secondTime.ToString(&quot;D2&quot;);&#xD;&#xA;        &#xD;&#xA;        string timeDisplay = $&quot;{firstTimeStr}（{(firstTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）{secondTimeStr}（{(secondTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）-{lastTime}&quot;;&#xD;&#xA;&#xD;&#xA;        displayList.Add(new&#xD;&#xA;        {&#xD;&#xA;            TypeName = typeName,&#xD;&#xA;            IslandId = islandId,&#xD;&#xA;            FirstTime = firstTime,&#xD;&#xA;            TimeDisplay = timeDisplay&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (displayList.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    var sortedList = displayList.OrderBy(item =&gt; item.FirstTime).ToList();&#xD;&#xA;    &#xD;&#xA;    // 计算条目数量&#xD;&#xA;    int itemCount = sortedList.Count;&#xD;&#xA;    &#xD;&#xA;    // 使用回车符连接所有条目为单个字符串&#xD;&#xA;    string listContent = string.Join(Environment.NewLine, sortedList.Select(item =&gt; &#xD;&#xA;        $&quot;{item.TypeName}-{item.IslandId}-{item.TimeDisplay}&quot;));&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 listtmp 变量&#xD;&#xA;    VariableScalar listTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = listContent,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;listtmp&quot;, listTmpVar);&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 counttmp 变量（存储条目数量）&#xD;&#xA;    VariableScalar countTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = itemCount.ToString(),&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;counttmp&quot;, countTmpVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="11" Enabled="False" ActionType="Placeholder" Description="输出信息" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="12" TextAuraEffect="Bold" TextAuraFontSize="21.75" TextAuraForeground="fff" TextAuraBackground="000" TextAuraOutline="fff" TextAuraName="dao" TextAuraExpression="${v:listtmp}" TextAuraXIniExpression="0" TextAuraYIniExpression="0" TextAuraWIniExpression="480" TextAuraHIniExpression="32*${v:counttmp}" TextAuraOIniExpression="60" TextAuraFontName="宋体" ActionType="TextAura" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="9.出岛" Id="db3b2107-b4ff-4e78-a3c4-d190860ad8cd" RegularExpression="(?&lt;timestamp&gt;^.{14}) Territory (?&lt;type&gt;01):(?!4E4)(?&lt;id&gt;[^:]+):(?&lt;name&gt;[^:]*)(?:$|:)" RefirePeriodExpression="1000">
        <Actions>
          <Action OrderNumber="1" VariableOp="SetString" VariableName="daolast" VariableExpression="出岛" VariablePersist="True" ActionType="Variable" />
          <Action OrderNumber="2" VariableOp="SetString" VariableName="timelast" VariableExpression="未知" VariablePersist="True" ActionType="Variable" />
          <Action OrderNumber="3" TriggerOp="CancelTrigger" TriggerId="7e3bde11-e150-4b7c-912a-ae500c9806ab" TriggerForce="regexp,conditions,active" ActionType="Trigger" />
          <Action OrderNumber="4" TextAuraOp="DeactivateAura" TextAuraAlignment="TopLeft" TextAuraEffect="Bold" TextAuraFontSize="24" TextAuraName="dao" TextAuraExpression="${v:texttmp}" TextAuraXIniExpression="0" TextAuraYIniExpression="0" TextAuraWIniExpression="800" TextAuraHIniExpression="40" TextAuraOIniExpression="100" TextAuraFontName="宋体" ActionType="TextAura" />
        </Actions>
      </Trigger>
      <Trigger Enabled="false" Sequential="True" Name="0c.更新数据" Id="7e3bde11-e150-4b7c-912a-ae500c9806ab" RegularExpression="" RefirePeriodExpression="1000">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="处理信息" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;// 从变量获取必要数据&#xD;&#xA;string targetDaolast = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;daolast&quot;) ?? &quot;&quot;;&#xD;&#xA;string timelastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;timelast&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;// 解析北罐时间&#xD;&#xA;int northTime = 0;&#xD;&#xA;bool isNorthTimeValid = int.TryParse(timelastValue, out northTime);&#xD;&#xA;&#xD;&#xA;// 计算南罐时间&#xD;&#xA;int southTime = 0;&#xD;&#xA;if (isNorthTimeValid)&#xD;&#xA;{&#xD;&#xA;    southTime = northTime - 30;&#xD;&#xA;    if (southTime &lt; 0)&#xD;&#xA;    {&#xD;&#xA;        southTime += 60; // 处理跨小时情况&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 计算当前分钟数&#xD;&#xA;int currentMinute = DateTime.Now.Minute;&#xD;&#xA;&#xD;&#xA;// 计算最近罐子&#xD;&#xA;string closestJar = &quot;&quot;;&#xD;&#xA;if (isNorthTimeValid)&#xD;&#xA;{&#xD;&#xA;    // 计算北罐剩余分钟（处理跨小时）&#xD;&#xA;    int northDiff = northTime &gt;= currentMinute &#xD;&#xA;        ? northTime - currentMinute &#xD;&#xA;        : (northTime + 60) - currentMinute;&#xD;&#xA;    &#xD;&#xA;    // 计算南罐剩余分钟（处理跨小时）&#xD;&#xA;    int southDiff = southTime &gt;= currentMinute &#xD;&#xA;        ? southTime - currentMinute &#xD;&#xA;        : (southTime + 60) - currentMinute;&#xD;&#xA;    &#xD;&#xA;    // 取最小剩余时间的罐子&#xD;&#xA;    if (northDiff &lt;= southDiff)&#xD;&#xA;    {&#xD;&#xA;        closestJar = $&quot;北({northDiff}分钟)&quot;;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        closestJar = $&quot;南({southDiff}分钟)&quot;;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 修改OutputIslandInfo方法：更新LastChanger为Mata且SetScalarVariable使用false&#xD;&#xA;static void OutputIslandInfo(string format, params object[] args)&#xD;&#xA;{&#xD;&#xA;    Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {string.Format(format, args)}&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 场景化调用&#xD;&#xA;if (isNorthTimeValid &amp;&amp; !string.IsNullOrEmpty(targetDaolast) &amp;&amp; targetDaolast != &quot;未知岛屿&quot;)&#xD;&#xA;{&#xD;&#xA;    OutputIslandInfo(&quot;岛屿id:{0}-北:{1}分-南:{2}分-{3}&quot;, &#xD;&#xA;                   targetDaolast, northTime, southTime, closestJar);&#xD;&#xA;}&#xD;&#xA;else if (!isNorthTimeValid &amp;&amp; !string.IsNullOrEmpty(targetDaolast) &amp;&amp; targetDaolast != &quot;未知岛屿&quot;)&#xD;&#xA;{&#xD;&#xA;    OutputIslandInfo(&quot;岛屿id:{0}-北:未知-南:未知&quot;, targetDaolast);&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    OutputIslandInfo(&quot;岛屿id:未知岛屿-北:未知-南:未知&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="3" TriggerId="7e3bde11-e150-4b7c-912a-ae500c9806ab" TriggerForce="regexp,conditions,active" ActionType="Trigger" ExecutionDelayExpression="60000" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Source="FFXIVNetwork" Sequential="True" Name="0b.挖完罐子回起始点（适配DR）" Id="3ee262fd-e4c9-4ed6-8eb2-2551c12784e6" RegularExpression="^03\|[^|]+\|(?&lt;id&gt;40[^|]{6})\|.+\|541\|.+\|4716915\|.+\|809\.00\|-739\.00\|72\.68\|0\.79" DebugLevel="Info" PrevActions="Interrupt">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="获取临时变量" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="7e3bde11-e150-4b7c-912a-ae500c9806ab" TriggerForce="regexp,conditions,active" ActionType="Trigger" />
          <Action OrderNumber="3" VariableOp="SetString" VariableName="daotmp" VariableExpression="${id}" ActionType="Variable" />
          <Action OrderNumber="4" Enabled="False" ActionType="Placeholder" Description="处理岛ID" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;&#xD;&#xA;string entityId = Interpreter.StaticHelpers.GetScalarVariable(false, &quot;daotmp&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;if (!string.IsNullOrEmpty(entityId) &#xD;&#xA;    &amp;&amp; entityId != &quot;0&quot; &#xD;&#xA;    &amp;&amp; entityId.Length == 8 &#xD;&#xA;    &amp;&amp; entityId.StartsWith(&quot;40&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;{&#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;        ulong hexValue = ulong.Parse(entityId, System.Globalization.NumberStyles.HexNumber);&#xD;&#xA;        ulong adjustedValue = hexValue - 0x40000000;&#xD;&#xA;        &#xD;&#xA;        string base62Code = adjustedValue == 0 ? Base62Chars[0].ToString() : &quot;&quot;;&#xD;&#xA;        var temp = adjustedValue;&#xD;&#xA;        while (temp &gt; 0)&#xD;&#xA;        {&#xD;&#xA;            base62Code = Base62Chars[(int)(temp % 62)] + base62Code;&#xD;&#xA;            temp /= 62;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        string daolast;&#xD;&#xA;        if (base62Code.Length &lt; 3)&#xD;&#xA;        {&#xD;&#xA;            daolast = base62Code.PadLeft(3, Base62Chars[0]);&#xD;&#xA;        }&#xD;&#xA;        else if (base62Code.Length &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            daolast = base62Code.Substring(base62Code.Length - 3);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            daolast = base62Code;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var daolastVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = daolast,&#xD;&#xA;            LastChanger = &quot;Mata&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, daolastVar);&#xD;&#xA;    }&#xD;&#xA;    catch (Exception ex)&#xD;&#xA;    {&#xD;&#xA;        Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 生成daolast失败：{ex.Message}&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    var unknownVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = &quot;未知岛屿&quot;,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, unknownVar);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="6" Enabled="False" ActionType="Placeholder" Description="处理进岛时间" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="7" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string currentTime = DateTime.Now.ToString(&quot;HH:mm&quot;);&#xD;&#xA;&#xD;&#xA;var visitVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = currentTime,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;visitlast&quot;, visitVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="8" Enabled="False" ActionType="Placeholder" Description="如果数据全部存在就写入本次数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="9" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string areaIdValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;arealast&quot;) ?? &quot;&quot;;&#xD;&#xA;string daolastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;daolast&quot;) ?? &quot;&quot;;&#xD;&#xA;string timelastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;timelast&quot;) ?? &quot;&quot;;&#xD;&#xA;string visitlastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;visitlast&quot;) ?? &quot;&quot;;&#xD;&#xA;string currentDaoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;if (!string.IsNullOrEmpty(daolastValue) &#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;出岛&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;未知岛屿&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !string.IsNullOrEmpty(timelastValue)&#xD;&#xA;    &amp;&amp; !timelastValue.Equals(&quot;未知&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;{&#xD;&#xA;    string newDaoRecord = $&quot;{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;    string newDaoValue = string.IsNullOrEmpty(currentDaoValue) &#xD;&#xA;        ? newDaoRecord &#xD;&#xA;        : $&quot;{currentDaoValue};{newDaoRecord}&quot;;&#xD;&#xA;&#xD;&#xA;    var daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = newDaoValue,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="10" Enabled="False" ActionType="Placeholder" Description="去掉超时数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="11" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="12" Enabled="False" ActionType="Placeholder" Description="去掉重复数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="13" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt; latestEntries = new Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt;();&#xD;&#xA;&#xD;&#xA;foreach (string entry in entries)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (parts.Length != 4)&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    if (!DateTime.TryParseExact(parts[3].Trim(), &quot;HH:mm&quot;, null, System.Globalization.DateTimeStyles.None, out DateTime entryTime))&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    string groupKey = parts[1];&#xD;&#xA;    if (!latestEntries.ContainsKey(groupKey))&#xD;&#xA;    {&#xD;&#xA;        latestEntries.Add(groupKey, new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime));&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if (entryTime &gt; latestEntries[groupKey].Value)&#xD;&#xA;        {&#xD;&#xA;            latestEntries[groupKey] = new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; result = new List&lt;string&gt;();&#xD;&#xA;foreach (var item in latestEntries.Values)&#xD;&#xA;{&#xD;&#xA;    result.Add(item.Key);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string processedData = string.Join(&quot;;&quot;, result);&#xD;&#xA;VariableScalar daoVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = processedData,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="14" Enabled="False" ActionType="Placeholder" Description="输出数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="15" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Dictionary&lt;string, string&gt; typeMap = new Dictionary&lt;string, string&gt;&#xD;&#xA;    {&#xD;&#xA;        {&quot;1&quot;, &quot;鸟&quot;}, {&quot;2&quot;, &quot;猪&quot;}, {&quot;3&quot;, &quot;猫&quot;}, {&quot;4&quot;, &quot;狗&quot;}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    var displayList = new List&lt;dynamic&gt;();&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;&#xD;&#xA;        string typeCode = parts[0].Trim();&#xD;&#xA;        string islandId = parts[1].Trim();&#xD;&#xA;        if (!int.TryParse(parts[2].Trim(), out int northTime)) continue;&#xD;&#xA;        string lastTime = parts[3].Trim();&#xD;&#xA;&#xD;&#xA;        string typeName = typeMap.TryGetValue(typeCode, out var name) ? name : &quot;未知&quot;;&#xD;&#xA;&#xD;&#xA;        int southTime = (northTime - 30 + 60) % 60;&#xD;&#xA;        int firstTime = Math.Min(northTime, southTime);&#xD;&#xA;        int secondTime = Math.Max(northTime, southTime);&#xD;&#xA;        &#xD;&#xA;        string firstTimeStr = firstTime.ToString(&quot;D2&quot;);&#xD;&#xA;        string secondTimeStr = secondTime.ToString(&quot;D2&quot;);&#xD;&#xA;        &#xD;&#xA;        string timeDisplay = $&quot;{firstTimeStr}（{(firstTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）{secondTimeStr}（{(secondTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）-{lastTime}&quot;;&#xD;&#xA;&#xD;&#xA;        displayList.Add(new&#xD;&#xA;        {&#xD;&#xA;            TypeName = typeName,&#xD;&#xA;            IslandId = islandId,&#xD;&#xA;            FirstTime = firstTime,&#xD;&#xA;            TimeDisplay = timeDisplay&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (displayList.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    var sortedList = displayList.OrderBy(item =&gt; item.FirstTime).ToList();&#xD;&#xA;    &#xD;&#xA;    // 计算条目数量&#xD;&#xA;    int itemCount = sortedList.Count;&#xD;&#xA;    &#xD;&#xA;    // 使用回车符连接所有条目为单个字符串&#xD;&#xA;    string listContent = string.Join(Environment.NewLine, sortedList.Select(item =&gt; &#xD;&#xA;        $&quot;{item.TypeName}-{item.IslandId}-{item.TimeDisplay}&quot;));&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 listtmp 变量&#xD;&#xA;    VariableScalar listTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = listContent,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;listtmp&quot;, listTmpVar);&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 counttmp 变量（存储条目数量）&#xD;&#xA;    VariableScalar countTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = itemCount.ToString(),&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;counttmp&quot;, countTmpVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="16" Enabled="False" ActionType="Placeholder" Description="输出信息" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="17" TextAuraEffect="Bold" TextAuraFontSize="21.75" TextAuraForeground="fff" TextAuraBackground="000" TextAuraOutline="fff" TextAuraName="dao" TextAuraExpression="${v:listtmp}" TextAuraXIniExpression="0" TextAuraYIniExpression="0" TextAuraWIniExpression="480" TextAuraHIniExpression="32*${v:counttmp}" TextAuraOIniExpression="60" TextAuraFontName="宋体" ActionType="TextAura" />
        </Actions>
        <Condition Enabled="true" Grouping="And">
          <ConditionSingle Enabled="true" ExpressionL="${v:daotmp}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase" />
        </Condition>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="1a.记录罐子" Id="d6a3bc37-d7fc-47bf-b24b-191361493e8b" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Add):[^:]*:(?&lt;fateId&gt;000007B(8|9)):(?&lt;progress&gt;[^:]*)(?:$|:)">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="处理进岛时间" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string currentTime = DateTime.Now.ToString(&quot;HH:mm&quot;);&#xD;&#xA;&#xD;&#xA;var visitVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = currentTime,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;visitlast&quot;, visitVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="3" Enabled="False" ActionType="Placeholder" Description="处理罐子时间（没有数据情况）" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const ushort Target7B8Value = 1976;&#xD;&#xA;const ushort Target7B9Value = 1977;&#xD;&#xA;&#xD;&#xA;static void SetTimelast(int minute)&#xD;&#xA;{&#xD;&#xA;    minute = minute % 60;&#xD;&#xA;    if (minute &lt; 0)&#xD;&#xA;    {&#xD;&#xA;        minute += 60;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    var timelastVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = minute.ToString(&quot;D2&quot;),&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;timelast&quot;, timelastVar);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    var baseAddr = Memory.XivBaseAddress;&#xD;&#xA;    if (baseAddr == IntPtr.Zero) return;&#xD;&#xA;    &#xD;&#xA;    ulong managerPtr = (ulong)baseAddr + 0x2970B58;&#xD;&#xA;    ulong managerBase = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)managerPtr);&#xD;&#xA;    if (managerBase == 0 || managerBase &lt; 0x100000) return;&#xD;&#xA;    &#xD;&#xA;    ulong listStart = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x90));&#xD;&#xA;    ulong listEnd = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x98));&#xD;&#xA;    if (listStart == 0 || listEnd == 0 || listStart &gt;= listEnd) return;&#xD;&#xA;&#xD;&#xA;    int count = (int)((listEnd - listStart) / 0x8);&#xD;&#xA;    &#xD;&#xA;    for (int i = 0; i &lt; count; i++)&#xD;&#xA;    {&#xD;&#xA;        ulong fateAddr = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(listStart + (ulong)i * 0x8));&#xD;&#xA;        if (fateAddr == 0 || fateAddr &lt; 0x100000) continue;&#xD;&#xA;        &#xD;&#xA;        ushort memFateId = Memory.Read&lt;ushort&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x18));&#xD;&#xA;        &#xD;&#xA;        if (memFateId == Target7B8Value || memFateId == Target7B9Value)&#xD;&#xA;        {&#xD;&#xA;            int timeStamp = Memory.Read&lt;int&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x20));&#xD;&#xA;            if (timeStamp &lt;= 0) continue;&#xD;&#xA;            &#xD;&#xA;            DateTime localTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)&#xD;&#xA;                .AddSeconds(timeStamp)&#xD;&#xA;                .ToLocalTime();&#xD;&#xA;&#xD;&#xA;            if (memFateId == Target7B8Value)&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute);&#xD;&#xA;//                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 北罐: 记录分钟 {localTime.Minute:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute + 30);&#xD;&#xA;//                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 南罐: 调整后分钟 {(localTime.Minute + 30) % 60:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="5" Enabled="False" ActionType="Placeholder" Description="如果数据全部存在就写入本次数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="6" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string areaIdValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;arealast&quot;) ?? &quot;&quot;;&#xD;&#xA;string daolastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;daolast&quot;) ?? &quot;&quot;;&#xD;&#xA;string timelastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;timelast&quot;) ?? &quot;&quot;;&#xD;&#xA;string visitlastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;visitlast&quot;) ?? &quot;&quot;;&#xD;&#xA;string currentDaoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;if (!string.IsNullOrEmpty(daolastValue) &#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;出岛&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;未知岛屿&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !string.IsNullOrEmpty(timelastValue)&#xD;&#xA;    &amp;&amp; !timelastValue.Equals(&quot;未知&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;{&#xD;&#xA;    string newDaoRecord = $&quot;{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;    string newDaoValue = string.IsNullOrEmpty(currentDaoValue) &#xD;&#xA;        ? newDaoRecord &#xD;&#xA;        : $&quot;{currentDaoValue};{newDaoRecord}&quot;;&#xD;&#xA;&#xD;&#xA;    var daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = newDaoValue,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="7" Enabled="False" ActionType="Placeholder" Description="去掉超时数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="8" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="9" Enabled="False" ActionType="Placeholder" Description="去掉重复数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="10" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt; latestEntries = new Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt;();&#xD;&#xA;&#xD;&#xA;foreach (string entry in entries)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (parts.Length != 4)&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    if (!DateTime.TryParseExact(parts[3].Trim(), &quot;HH:mm&quot;, null, System.Globalization.DateTimeStyles.None, out DateTime entryTime))&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    string groupKey = parts[1];&#xD;&#xA;    if (!latestEntries.ContainsKey(groupKey))&#xD;&#xA;    {&#xD;&#xA;        latestEntries.Add(groupKey, new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime));&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if (entryTime &gt; latestEntries[groupKey].Value)&#xD;&#xA;        {&#xD;&#xA;            latestEntries[groupKey] = new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; result = new List&lt;string&gt;();&#xD;&#xA;foreach (var item in latestEntries.Values)&#xD;&#xA;{&#xD;&#xA;    result.Add(item.Key);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string processedData = string.Join(&quot;;&quot;, result);&#xD;&#xA;VariableScalar daoVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = processedData,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="11" Enabled="False" ActionType="Placeholder" Description="输出数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="12" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Dictionary&lt;string, string&gt; typeMap = new Dictionary&lt;string, string&gt;&#xD;&#xA;    {&#xD;&#xA;        {&quot;1&quot;, &quot;鸟&quot;}, {&quot;2&quot;, &quot;猪&quot;}, {&quot;3&quot;, &quot;猫&quot;}, {&quot;4&quot;, &quot;狗&quot;}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    var displayList = new List&lt;dynamic&gt;();&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;&#xD;&#xA;        string typeCode = parts[0].Trim();&#xD;&#xA;        string islandId = parts[1].Trim();&#xD;&#xA;        if (!int.TryParse(parts[2].Trim(), out int northTime)) continue;&#xD;&#xA;        string lastTime = parts[3].Trim();&#xD;&#xA;&#xD;&#xA;        string typeName = typeMap.TryGetValue(typeCode, out var name) ? name : &quot;未知&quot;;&#xD;&#xA;&#xD;&#xA;        int southTime = (northTime - 30 + 60) % 60;&#xD;&#xA;        int firstTime = Math.Min(northTime, southTime);&#xD;&#xA;        int secondTime = Math.Max(northTime, southTime);&#xD;&#xA;        &#xD;&#xA;        string firstTimeStr = firstTime.ToString(&quot;D2&quot;);&#xD;&#xA;        string secondTimeStr = secondTime.ToString(&quot;D2&quot;);&#xD;&#xA;        &#xD;&#xA;        string timeDisplay = $&quot;{firstTimeStr}（{(firstTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）{secondTimeStr}（{(secondTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）-{lastTime}&quot;;&#xD;&#xA;&#xD;&#xA;        displayList.Add(new&#xD;&#xA;        {&#xD;&#xA;            TypeName = typeName,&#xD;&#xA;            IslandId = islandId,&#xD;&#xA;            FirstTime = firstTime,&#xD;&#xA;            TimeDisplay = timeDisplay&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (displayList.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    var sortedList = displayList.OrderBy(item =&gt; item.FirstTime).ToList();&#xD;&#xA;    &#xD;&#xA;    // 计算条目数量&#xD;&#xA;    int itemCount = sortedList.Count;&#xD;&#xA;    &#xD;&#xA;    // 使用回车符连接所有条目为单个字符串&#xD;&#xA;    string listContent = string.Join(Environment.NewLine, sortedList.Select(item =&gt; &#xD;&#xA;        $&quot;{item.TypeName}-{item.IslandId}-{item.TimeDisplay}&quot;));&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 listtmp 变量&#xD;&#xA;    VariableScalar listTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = listContent,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;listtmp&quot;, listTmpVar);&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 counttmp 变量（存储条目数量）&#xD;&#xA;    VariableScalar countTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = itemCount.ToString(),&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;counttmp&quot;, countTmpVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="13" Enabled="False" ActionType="Placeholder" Description="输出信息" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="14" TextAuraEffect="Bold" TextAuraFontSize="21.75" TextAuraForeground="fff" TextAuraBackground="000" TextAuraOutline="fff" TextAuraName="dao" TextAuraExpression="${v:listtmp}" TextAuraXIniExpression="0" TextAuraYIniExpression="0" TextAuraWIniExpression="480" TextAuraHIniExpression="32*${v:counttmp}" TextAuraOIniExpression="60" TextAuraFontName="宋体" ActionType="TextAura" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="1b.记录罐子" Id="ab9cab9b-1a82-4366-b2d6-d1812666136f" RegularExpression="(?&lt;timestamp&gt;^.{14}) 258 (?&lt;type&gt;102):(?&lt;category&gt;Update):[^:]*:(?&lt;fateId&gt;000007B(8|9)):(?&lt;progress&gt;[^:]*)(?:$|:)" PeriodRefire="Deny" RefirePeriodExpression="60000">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="处理罐子时间（没有数据情况）" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const ushort Target7B8Value = 1976;&#xD;&#xA;const ushort Target7B9Value = 1977;&#xD;&#xA;&#xD;&#xA;static void SetTimelast(int minute)&#xD;&#xA;{&#xD;&#xA;    minute = minute % 60;&#xD;&#xA;    if (minute &lt; 0)&#xD;&#xA;    {&#xD;&#xA;        minute += 60;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    var timelastVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = minute.ToString(&quot;D2&quot;),&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;timelast&quot;, timelastVar);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    var baseAddr = Memory.XivBaseAddress;&#xD;&#xA;    if (baseAddr == IntPtr.Zero) return;&#xD;&#xA;    &#xD;&#xA;    ulong managerPtr = (ulong)baseAddr + 0x2970B58;&#xD;&#xA;    ulong managerBase = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)managerPtr);&#xD;&#xA;    if (managerBase == 0 || managerBase &lt; 0x100000) return;&#xD;&#xA;    &#xD;&#xA;    ulong listStart = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x90));&#xD;&#xA;    ulong listEnd = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x98));&#xD;&#xA;    if (listStart == 0 || listEnd == 0 || listStart &gt;= listEnd) return;&#xD;&#xA;&#xD;&#xA;    int count = (int)((listEnd - listStart) / 0x8);&#xD;&#xA;    &#xD;&#xA;    for (int i = 0; i &lt; count; i++)&#xD;&#xA;    {&#xD;&#xA;        ulong fateAddr = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(listStart + (ulong)i * 0x8));&#xD;&#xA;        if (fateAddr == 0 || fateAddr &lt; 0x100000) continue;&#xD;&#xA;        &#xD;&#xA;        ushort memFateId = Memory.Read&lt;ushort&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x18));&#xD;&#xA;        &#xD;&#xA;        if (memFateId == Target7B8Value || memFateId == Target7B9Value)&#xD;&#xA;        {&#xD;&#xA;            int timeStamp = Memory.Read&lt;int&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x20));&#xD;&#xA;            if (timeStamp &lt;= 0) continue;&#xD;&#xA;            &#xD;&#xA;            DateTime localTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)&#xD;&#xA;                .AddSeconds(timeStamp)&#xD;&#xA;                .ToLocalTime();&#xD;&#xA;&#xD;&#xA;            if (memFateId == Target7B8Value)&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute);&#xD;&#xA;//                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 北罐: 记录分钟 {localTime.Minute:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute + 30);&#xD;&#xA;//                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 南罐: 调整后分钟 {(localTime.Minute + 30) % 60:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Sequential="True" Name="0a.进岛" Id="2911194b-bf8d-4688-9d5a-d305de0dfdf4" RegularExpression="(?&lt;timestamp&gt;^.{14}) Territory (?&lt;type&gt;01):(?&lt;id&gt;4E4):(?&lt;name&gt;[^:]*)(?:$|:)" RefirePeriodExpression="1000">
        <Actions>
          <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="获取临时变量" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="7e3bde11-e150-4b7c-912a-ae500c9806ab" TriggerForce="regexp,conditions,active" ActionType="Trigger" />
          <Action OrderNumber="3" VariableOp="SetString" VariableName="daotmp" VariableExpression="${_entity[PosX=809.0001&amp;&amp;bnpcid=18314].id}" ActionType="Variable" />
          <Action OrderNumber="4" VariableOp="SetString" VariableName="areatmp" VariableExpression="${_me.CurrentWorldid}" ActionType="Variable" />
          <Action OrderNumber="5" Enabled="False" ActionType="Placeholder" Description="处理岛ID" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="6" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const string Base62Chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;&#xD;&#xA;&#xD;&#xA;string entityId = Interpreter.StaticHelpers.GetScalarVariable(false, &quot;daotmp&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;if (!string.IsNullOrEmpty(entityId) &#xD;&#xA;    &amp;&amp; entityId != &quot;0&quot; &#xD;&#xA;    &amp;&amp; entityId.Length == 8 &#xD;&#xA;    &amp;&amp; entityId.StartsWith(&quot;40&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;{&#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;        ulong hexValue = ulong.Parse(entityId, System.Globalization.NumberStyles.HexNumber);&#xD;&#xA;        ulong adjustedValue = hexValue - 0x40000000;&#xD;&#xA;        &#xD;&#xA;        string base62Code = adjustedValue == 0 ? Base62Chars[0].ToString() : &quot;&quot;;&#xD;&#xA;        var temp = adjustedValue;&#xD;&#xA;        while (temp &gt; 0)&#xD;&#xA;        {&#xD;&#xA;            base62Code = Base62Chars[(int)(temp % 62)] + base62Code;&#xD;&#xA;            temp /= 62;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        string daolast;&#xD;&#xA;        if (base62Code.Length &lt; 3)&#xD;&#xA;        {&#xD;&#xA;            daolast = base62Code.PadLeft(3, Base62Chars[0]);&#xD;&#xA;        }&#xD;&#xA;        else if (base62Code.Length &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            daolast = base62Code.Substring(base62Code.Length - 3);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            daolast = base62Code;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var daolastVar = new VariableScalar&#xD;&#xA;        {&#xD;&#xA;            Value = daolast,&#xD;&#xA;            LastChanger = &quot;Mata&quot;,&#xD;&#xA;            LastChanged = DateTime.Now&#xD;&#xA;        };&#xD;&#xA;        Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, daolastVar);&#xD;&#xA;    }&#xD;&#xA;    catch (Exception ex)&#xD;&#xA;    {&#xD;&#xA;        Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 生成daolast失败：{ex.Message}&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    var unknownVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = &quot;未知岛屿&quot;,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;daolast&quot;, unknownVar);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="7" Enabled="False" ActionType="Placeholder" Description="处理区服" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="8" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static readonly Dictionary&lt;int, int&gt; WorldIdToAreaIdMap = new Dictionary&lt;int, int&gt;()&#xD;&#xA;{&#xD;&#xA;    { 1042, 1 }, { 1043, 3 }, { 1044, 1 }, { 1045, 3 }, { 1081, 1 },&#xD;&#xA;    { 1106, 3 }, { 1060, 1 }, { 1169, 3 }, { 1167, 1 }, { 1170, 2 },&#xD;&#xA;    { 1171, 2 }, { 1172, 2 }, { 1076, 2 }, { 1113, 2 }, { 1166, 2 },&#xD;&#xA;    { 1121, 2 }, { 1173, 1 }, { 1174, 1 }, { 1175, 1 }, { 1177, 3 },&#xD;&#xA;    { 1178, 3 }, { 1179, 3 }, { 1176, 2 }, { 1192, 4 }, { 1183, 4 },&#xD;&#xA;    { 1180, 4 }, { 1186, 4 }, { 1201, 4 }&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;string worldIdStr = Interpreter.StaticHelpers.GetScalarVariable(false, &quot;areatmp&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    if (int.TryParse(worldIdStr, out int worldId))&#xD;&#xA;    {&#xD;&#xA;        if (WorldIdToAreaIdMap.TryGetValue(worldId, out int areaId))&#xD;&#xA;        {&#xD;&#xA;            var areaVar = new VariableScalar&#xD;&#xA;            {&#xD;&#xA;                Value = areaId.ToString(),&#xD;&#xA;                LastChanger = &quot;Mata&quot;,&#xD;&#xA;                LastChanged = DateTime.Now&#xD;&#xA;            };&#xD;&#xA;            Interpreter.StaticHelpers.SetScalarVariable(true, &quot;arealast&quot;, areaVar);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 处理worldId失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="9" Enabled="False" ActionType="Placeholder" Description="处理进岛时间" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="10" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string currentTime = DateTime.Now.ToString(&quot;HH:mm&quot;);&#xD;&#xA;&#xD;&#xA;var visitVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = currentTime,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;visitlast&quot;, visitVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="11" Enabled="False" ActionType="Placeholder" Description="处理罐子时间（已有数据情况）" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="12" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string currentDaoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;string targetDaolast = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;daolast&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;if (!string.IsNullOrEmpty(currentDaoValue) &amp;&amp; !string.IsNullOrEmpty(targetDaolast))&#xD;&#xA;{&#xD;&#xA;    string[] daoRecords = currentDaoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    foreach (string record in daoRecords)&#xD;&#xA;    {&#xD;&#xA;        string[] recordParts = record.Split(new[] { ',' }, StringSplitOptions.None);&#xD;&#xA;        &#xD;&#xA;        if (recordParts.Length &gt;= 4 &amp;&amp; recordParts[1] == targetDaolast)&#xD;&#xA;        {&#xD;&#xA;            if (!string.IsNullOrEmpty(recordParts[2]))&#xD;&#xA;            {&#xD;&#xA;                var timelastVar = new VariableScalar&#xD;&#xA;                {&#xD;&#xA;                    Value = recordParts[2],&#xD;&#xA;                    LastChanger = &quot;Mata&quot;,&#xD;&#xA;                    LastChanged = DateTime.Now&#xD;&#xA;                };&#xD;&#xA;                Interpreter.StaticHelpers.SetScalarVariable(true, &quot;timelast&quot;, timelastVar);&#xD;&#xA;            }&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="13" Enabled="False" ActionType="Placeholder" Description="处理罐子时间（没有数据情况）" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="14" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;const ushort Target7B8Value = 1976;&#xD;&#xA;const ushort Target7B9Value = 1977;&#xD;&#xA;&#xD;&#xA;static void SetTimelast(int minute)&#xD;&#xA;{&#xD;&#xA;    minute = minute % 60;&#xD;&#xA;    if (minute &lt; 0)&#xD;&#xA;    {&#xD;&#xA;        minute += 60;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    var timelastVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = minute.ToString(&quot;D2&quot;),&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;timelast&quot;, timelastVar);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    var baseAddr = Memory.XivBaseAddress;&#xD;&#xA;    if (baseAddr == IntPtr.Zero) return;&#xD;&#xA;    &#xD;&#xA;    ulong managerPtr = (ulong)baseAddr + 0x2970B58;&#xD;&#xA;    ulong managerBase = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)managerPtr);&#xD;&#xA;    if (managerBase == 0 || managerBase &lt; 0x100000) return;&#xD;&#xA;    &#xD;&#xA;    ulong listStart = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x90));&#xD;&#xA;    ulong listEnd = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(managerBase + 0x98));&#xD;&#xA;    if (listStart == 0 || listEnd == 0 || listStart &gt;= listEnd) return;&#xD;&#xA;&#xD;&#xA;    int count = (int)((listEnd - listStart) / 0x8);&#xD;&#xA;    &#xD;&#xA;    for (int i = 0; i &lt; count; i++)&#xD;&#xA;    {&#xD;&#xA;        ulong fateAddr = Memory.Read&lt;ulong&gt;(Memory.XivProcHandle, (IntPtr)(listStart + (ulong)i * 0x8));&#xD;&#xA;        if (fateAddr == 0 || fateAddr &lt; 0x100000) continue;&#xD;&#xA;        &#xD;&#xA;        ushort memFateId = Memory.Read&lt;ushort&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x18));&#xD;&#xA;        &#xD;&#xA;        if (memFateId == Target7B8Value || memFateId == Target7B9Value)&#xD;&#xA;        {&#xD;&#xA;            int timeStamp = Memory.Read&lt;int&gt;(Memory.XivProcHandle, (IntPtr)(fateAddr + 0x20));&#xD;&#xA;            if (timeStamp &lt;= 0) continue;&#xD;&#xA;            &#xD;&#xA;            DateTime localTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)&#xD;&#xA;                .AddSeconds(timeStamp)&#xD;&#xA;                .ToLocalTime();&#xD;&#xA;&#xD;&#xA;            if (memFateId == Target7B8Value)&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute);&#xD;&#xA;//                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 北罐: 记录分钟 {localTime.Minute:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                SetTimelast(localTime.Minute + 30);&#xD;&#xA;//                Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 检测到Fate 南罐: 调整后分钟 {(localTime.Minute + 30) % 60:D2}&quot;);&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;catch&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="15" Enabled="False" ActionType="Placeholder" Description="如果数据全部存在就写入本次数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="16" ExecScriptExpression="using System;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string areaIdValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;arealast&quot;) ?? &quot;&quot;;&#xD;&#xA;string daolastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;daolast&quot;) ?? &quot;&quot;;&#xD;&#xA;string timelastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;timelast&quot;) ?? &quot;&quot;;&#xD;&#xA;string visitlastValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;visitlast&quot;) ?? &quot;&quot;;&#xD;&#xA;string currentDaoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;&#xD;&#xA;if (!string.IsNullOrEmpty(daolastValue) &#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;出岛&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !daolastValue.Equals(&quot;未知岛屿&quot;, StringComparison.OrdinalIgnoreCase)&#xD;&#xA;    &amp;&amp; !string.IsNullOrEmpty(timelastValue)&#xD;&#xA;    &amp;&amp; !timelastValue.Equals(&quot;未知&quot;, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;{&#xD;&#xA;    string newDaoRecord = $&quot;{areaIdValue},{daolastValue},{timelastValue},{visitlastValue}&quot;;&#xD;&#xA;    string newDaoValue = string.IsNullOrEmpty(currentDaoValue) &#xD;&#xA;        ? newDaoRecord &#xD;&#xA;        : $&quot;{currentDaoValue};{newDaoRecord}&quot;;&#xD;&#xA;&#xD;&#xA;    var daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = newDaoValue,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="17" Enabled="False" ActionType="Placeholder" Description="去掉超时数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="18" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    DateTime now = DateTime.Now;&#xD;&#xA;    int currentHour = now.Hour;&#xD;&#xA;    int currentMinute = now.Minute;&#xD;&#xA;    int currentTotalMinutes = currentHour * 60 + currentMinute;&#xD;&#xA;&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        Log(&quot;数据为空，无需清理&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    List&lt;string&gt; validEntries = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4)&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        if (!DateTime.TryParse(parts[3].Trim(), out DateTime recordTime))&#xD;&#xA;            continue;&#xD;&#xA;&#xD;&#xA;        int recordHour = recordTime.Hour;&#xD;&#xA;        int recordMinute = recordTime.Minute;&#xD;&#xA;        int recordTotalMinutes = recordHour * 60 + recordMinute;&#xD;&#xA;&#xD;&#xA;        int minuteDiff;&#xD;&#xA;        if (currentTotalMinutes &gt;= recordTotalMinutes)&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = currentTotalMinutes - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            minuteDiff = (currentTotalMinutes + 1440) - recordTotalMinutes;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (minuteDiff &lt;= 180)&#xD;&#xA;        {&#xD;&#xA;            validEntries.Add(entry);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string cleanedData = string.Join(&quot;;&quot;, validEntries);&#xD;&#xA;    VariableScalar daoVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = cleanedData,&#xD;&#xA;        LastChanger = &quot;Mata&quot;,&#xD;&#xA;        LastChanged = now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;    Log($&quot;数据清理失败：{ex.Message}&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="19" Enabled="False" ActionType="Placeholder" Description="去掉重复数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="20" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;{&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt; latestEntries = new Dictionary&lt;string, KeyValuePair&lt;string, DateTime&gt;&gt;();&#xD;&#xA;&#xD;&#xA;foreach (string entry in entries)&#xD;&#xA;{&#xD;&#xA;    string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    if (parts.Length != 4)&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    if (!DateTime.TryParseExact(parts[3].Trim(), &quot;HH:mm&quot;, null, System.Globalization.DateTimeStyles.None, out DateTime entryTime))&#xD;&#xA;        continue;&#xD;&#xA;&#xD;&#xA;    string groupKey = parts[1];&#xD;&#xA;    if (!latestEntries.ContainsKey(groupKey))&#xD;&#xA;    {&#xD;&#xA;        latestEntries.Add(groupKey, new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime));&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if (entryTime &gt; latestEntries[groupKey].Value)&#xD;&#xA;        {&#xD;&#xA;            latestEntries[groupKey] = new KeyValuePair&lt;string, DateTime&gt;(entry, entryTime);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; result = new List&lt;string&gt;();&#xD;&#xA;foreach (var item in latestEntries.Values)&#xD;&#xA;{&#xD;&#xA;    result.Add(item.Key);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;string processedData = string.Join(&quot;;&quot;, result);&#xD;&#xA;VariableScalar daoVar = new VariableScalar&#xD;&#xA;{&#xD;&#xA;    Value = processedData,&#xD;&#xA;    LastChanger = &quot;Mata&quot;,&#xD;&#xA;    LastChanged = DateTime.Now&#xD;&#xA;};&#xD;&#xA;Interpreter.StaticHelpers.SetScalarVariable(true, &quot;dao&quot;, daoVar);&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="21" Enabled="False" ActionType="Placeholder" Description="输出数据" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="22" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    string daoValue = Interpreter.StaticHelpers.GetScalarVariable(true, &quot;dao&quot;) ?? &quot;&quot;;&#xD;&#xA;    if (string.IsNullOrWhiteSpace(daoValue))&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Dictionary&lt;string, string&gt; typeMap = new Dictionary&lt;string, string&gt;&#xD;&#xA;    {&#xD;&#xA;        {&quot;1&quot;, &quot;鸟&quot;}, {&quot;2&quot;, &quot;猪&quot;}, {&quot;3&quot;, &quot;猫&quot;}, {&quot;4&quot;, &quot;狗&quot;}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    var displayList = new List&lt;dynamic&gt;();&#xD;&#xA;    string[] entries = daoValue.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    &#xD;&#xA;    foreach (string entry in entries)&#xD;&#xA;    {&#xD;&#xA;        string[] parts = entry.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;        if (parts.Length != 4) continue;&#xD;&#xA;&#xD;&#xA;        string typeCode = parts[0].Trim();&#xD;&#xA;        string islandId = parts[1].Trim();&#xD;&#xA;        if (!int.TryParse(parts[2].Trim(), out int northTime)) continue;&#xD;&#xA;        string lastTime = parts[3].Trim();&#xD;&#xA;&#xD;&#xA;        string typeName = typeMap.TryGetValue(typeCode, out var name) ? name : &quot;未知&quot;;&#xD;&#xA;&#xD;&#xA;        int southTime = (northTime - 30 + 60) % 60;&#xD;&#xA;        int firstTime = Math.Min(northTime, southTime);&#xD;&#xA;        int secondTime = Math.Max(northTime, southTime);&#xD;&#xA;        &#xD;&#xA;        string firstTimeStr = firstTime.ToString(&quot;D2&quot;);&#xD;&#xA;        string secondTimeStr = secondTime.ToString(&quot;D2&quot;);&#xD;&#xA;        &#xD;&#xA;        string timeDisplay = $&quot;{firstTimeStr}（{(firstTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）{secondTimeStr}（{(secondTime == northTime ? &quot;北&quot; : &quot;南&quot;)}）-{lastTime}&quot;;&#xD;&#xA;&#xD;&#xA;        displayList.Add(new&#xD;&#xA;        {&#xD;&#xA;            TypeName = typeName,&#xD;&#xA;            IslandId = islandId,&#xD;&#xA;            FirstTime = firstTime,&#xD;&#xA;            TimeDisplay = timeDisplay&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (displayList.Count == 0)&#xD;&#xA;    {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    var sortedList = displayList.OrderBy(item =&gt; item.FirstTime).ToList();&#xD;&#xA;    &#xD;&#xA;    // 计算条目数量&#xD;&#xA;    int itemCount = sortedList.Count;&#xD;&#xA;    &#xD;&#xA;    // 使用回车符连接所有条目为单个字符串&#xD;&#xA;    string listContent = string.Join(Environment.NewLine, sortedList.Select(item =&gt; &#xD;&#xA;        $&quot;{item.TypeName}-{item.IslandId}-{item.TimeDisplay}&quot;));&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 listtmp 变量&#xD;&#xA;    VariableScalar listTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = listContent,&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;listtmp&quot;, listTmpVar);&#xD;&#xA;    &#xD;&#xA;    // 创建并设置 counttmp 变量（存储条目数量）&#xD;&#xA;    VariableScalar countTmpVar = new VariableScalar&#xD;&#xA;    {&#xD;&#xA;        Value = itemCount.ToString(),&#xD;&#xA;        LastChanger = &quot;System&quot;,&#xD;&#xA;        LastChanged = DateTime.Now&#xD;&#xA;    };&#xD;&#xA;    Interpreter.StaticHelpers.SetScalarVariable(false, &quot;counttmp&quot;, countTmpVar);&#xD;&#xA;}&#xD;&#xA;catch (Exception ex)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript" />
          <Action OrderNumber="23" Enabled="False" ActionType="Placeholder" Description="输出信息" DescBgColor="0ff" DescTextColor="000" DescriptionOverride="True" />
          <Action OrderNumber="24" TextAuraEffect="Bold" TextAuraFontSize="21.75" TextAuraForeground="fff" TextAuraBackground="000" TextAuraOutline="fff" TextAuraName="dao" TextAuraExpression="${v:listtmp}" TextAuraXIniExpression="0" TextAuraYIniExpression="0" TextAuraWIniExpression="480" TextAuraHIniExpression="32*${v:counttmp}" TextAuraOIniExpression="60" TextAuraFontName="宋体" ActionType="TextAura" />
          <Action OrderNumber="25" TriggerId="7e3bde11-e150-4b7c-912a-ae500c9806ab" TriggerForce="regexp,conditions,active" ActionType="Trigger" />
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>