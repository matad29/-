<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.753">
  <ExportedFolder Id="d48ae1af-22ef-42c8-9325-af5392f0817a" Name="荔枝塔快速复盘工具（指挥用）" Enabled="true">
    <Folders>
      <Folder FFXIVZoneFilterEnabled="True" FfxivZoneFilterRegularExpression="^1252$" Id="f6f9c01e-c5bb-4242-9c31-2003b6418935" Name="重构" Enabled="true">
        <Folders>
          <Folder Id="2543b2d4-0e7a-4f1f-b4c9-da798e148a89" Name="0.进塔前准备" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="1.进岛后等级检查" Id="cbba6654-5beb-4aca-96c0-b7498a09d2a0" RegularExpression="^.{15}\S+ 28:967:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_level_max" VariableExpression="20" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_level_offset" VariableExpression="0x37f0" ActionType="Variable" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_level_stars" VariableExpression="12" ActionType="Variable" />
                  <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;;&#xD;&#xA;var offset = ${v:The_Forked_Tower_Blood_level_offset};&#xD;&#xA;var maxlevel = ${v:The_Forked_Tower_Blood_level_max};&#xD;&#xA;var stars = ${v:The_Forked_Tower_Blood_level_stars};&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;int totalCount = allEntities.Count();&#xD;&#xA;// 读内存和buff层数&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;    {&#xD;&#xA;        IntPtr finalAddress = (IntPtr) entity.Address + offset;&#xD;&#xA;        Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4226);&#xD;&#xA;        var level = Memory.Read &lt; byte &gt; (Memory.XivProcHandle, finalAddress);&#xD;&#xA;        if(level &lt; maxlevel)&#xD;&#xA;        {&#xD;&#xA;            output1 = output1 + entity.Name + &quot;(&quot; + level + &quot;级),&quot;;&#xD;&#xA;        }&#xD;&#xA;        if(status != null)&#xD;&#xA;        {&#xD;&#xA;            if(status.Stack &lt; stars)&#xD;&#xA;            {&#xD;&#xA;                output2 = output2 + entity.Name + &quot;(&quot; + status.Stack + &quot;星),&quot;;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            output2 = output2 + entity.Name + &quot;(0星),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;//输出结果&#xD;&#xA;if(output1.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;所有人都是满级&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;没满级的是：&quot; + output1;&#xD;&#xA;}&#xD;&#xA;if(output2.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;所有人都是满星&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;没满星的是：&quot; + output2;&#xD;&#xA;}&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;var output = $&quot;附近人数：{totalCount}人&quot; + &quot;\n&quot; + output1 + &quot;\n&quot; + output2;&#xD;&#xA;Log(output);" ActionType="ExecuteScript" ExecutionDelayExpression="5000" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="1e8be02f-9844-472c-9334-dc0a4802a9d3" ActionType="Trigger" />
                  <Action OrderNumber="6" TriggerOp="DisableTrigger" TriggerId="ac44a147-7899-4ffa-9110-6bf60cc62b1a" ActionType="Trigger" />
                  <Action OrderNumber="7" TriggerOp="DisableTrigger" TriggerId="6254df27-6c5e-48d5-8891-9d32822c2598" ActionType="Trigger" />
                  <Action OrderNumber="8" TriggerOp="DisableTrigger" TriggerId="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" ActionType="Trigger" />
                  <Action OrderNumber="9" VariableOp="UnsetRegex" VariableName="^The_Forked_Tower_Blood_level" VariableExpression="0x37f0" Enabled="False" ActionType="Variable" />
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${_me.InParty}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="2.进塔前1分钟检测辅助职业" Id="27c3ffe0-bcf9-46c9-830b-5a2107002301" RegularExpression="(?&lt;timestamp&gt;^.{14}) 257 (?&lt;type&gt;101):(?&lt;instance&gt;8004002D):(?&lt;flags&gt;00020001):(?&lt;location&gt;29):(?&lt;data0&gt;[^:]*):(?&lt;data1&gt;[^:]*)(?:$|:)">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;//【4242=自由人，4358=骑士，4359=狂战士，4360=武僧，4361=猎人，4362=武士，4363=吟游诗人】&#xD;&#xA;//【4364=风水师，4365=时魔法师，4366=炮击士，4367=药剂师，4368=预言师，4369=盗贼】&#xD;&#xA;var output4242 = &quot;&quot;;&#xD;&#xA;var output4360 = &quot;&quot;;&#xD;&#xA;var output4368 = &quot;&quot;;&#xD;&#xA;var count4358 = 0;&#xD;&#xA;var count4359 = 0;&#xD;&#xA;var count4361 = 0;&#xD;&#xA;var count4362 = 0;&#xD;&#xA;var count4363 = 0;&#xD;&#xA;var count4364 = 0;&#xD;&#xA;var count4365 = 0;&#xD;&#xA;var count4366 = 0;&#xD;&#xA;var count4367 = 0;&#xD;&#xA;var count4367TD = 0;&#xD;&#xA;var count4369 = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;int totalCount = allEntities.Count();&#xD;&#xA;// buff检测&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;    {&#xD;&#xA;        foreach(var status in entity.Statuses)&#xD;&#xA;        {&#xD;&#xA;            switch(status.StatusID)&#xD;&#xA;            {&#xD;&#xA;                case 4242:&#xD;&#xA;                    output4242 += entity.Name + &quot;,&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 4360:&#xD;&#xA;                    output4360 += entity.Name + &quot;,&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 4368:&#xD;&#xA;                    output4368 += entity.Name + &quot;,&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 4358:&#xD;&#xA;                    count4358++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4359:&#xD;&#xA;                    count4359++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4361:&#xD;&#xA;                    count4361++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4362:&#xD;&#xA;                    count4362++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4363:&#xD;&#xA;                    count4363++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4364:&#xD;&#xA;                    count4364++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4365:&#xD;&#xA;                    count4365++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4366:&#xD;&#xA;                    count4366++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4367:&#xD;&#xA;                    count4367++;&#xD;&#xA;                    if(entity.Job.IsHealer == false)&#xD;&#xA;                    {&#xD;&#xA;                        count4367TD++;&#xD;&#xA;                    }&#xD;&#xA;                    break;&#xD;&#xA;                case 4369:&#xD;&#xA;                    count4369++;&#xD;&#xA;                    break;&#xD;&#xA;                default:&#xD;&#xA;                    break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;//输出结果&#xD;&#xA;if(output4242.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output4242 = &quot;未发现辅助自由人&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output4242 = &quot;辅助自由人是：&quot; + output4242;&#xD;&#xA;}&#xD;&#xA;if(output4360.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output4360 = &quot;未发现辅助武僧&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output4360 = &quot;辅助武僧是：&quot; + output4360;&#xD;&#xA;}&#xD;&#xA;if(output4368.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output4368 = &quot;未发现辅助预言师&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output4368 = &quot;辅助预言师是：&quot; + output4368;&#xD;&#xA;}&#xD;&#xA;var output = $&quot;附近人数：{totalCount}人\n&quot; + output4242.TrimEnd(',') + &quot;\n&quot; + output4360.TrimEnd(',') + &quot;\n&quot; + output4368.TrimEnd(',') + $&quot;\n辅助盗贼{count4369}人，辅助猎人{count4361}人，辅助时魔法师{count4365}人\n辅助骑士{count4358}人，辅助吟游诗人{count4363}人，辅助武士{count4362}人\n辅助狂战士{count4359}人,辅助风水师{count4364}人，辅助炮击士{count4366}人\n辅助药剂师{count4367}人（火种{count4367TD}人）&quot;;&#xD;&#xA;Log(output);" ActionType="ExecuteScript" ExecutionDelayExpression="270000" />
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${_me.InParty}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="3.进塔后再次检测辅助职业and标记" Id="d57bb40d-fc71-4203-a96e-cf34c8f28782" RegularExpression="^.{15}\S+ 28:(?&lt;mapid&gt;968):">
                <Actions>
                  <Action OrderNumber="1" TriggerId="aeaac13a-ebff-4eb9-9512-73d669669331" TriggerForce="regexp,conditions,active" ActionType="Trigger" />
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;//【4242=自由人，4358=骑士，4359=狂战士，4360=武僧，4361=猎人，4362=武士，4363=吟游诗人】&#xD;&#xA;//【4364=风水师，4365=时魔法师，4366=炮击士，4367=药剂师，4368=预言师，4369=盗贼】&#xD;&#xA;var output4242 = &quot;&quot;;&#xD;&#xA;var output4360 = &quot;&quot;;&#xD;&#xA;var output4368 = &quot;&quot;;&#xD;&#xA;var count4358 = 0;&#xD;&#xA;var count4359 = 0;&#xD;&#xA;var count4361 = 0;&#xD;&#xA;var count4362 = 0;&#xD;&#xA;var count4363 = 0;&#xD;&#xA;var count4364 = 0;&#xD;&#xA;var count4365 = 0;&#xD;&#xA;var count4366 = 0;&#xD;&#xA;var count4367 = 0;&#xD;&#xA;var count4367TD = 0;&#xD;&#xA;var count4369 = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;int totalCount = allEntities.Count();&#xD;&#xA;// 检测buff并标记&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;    {&#xD;&#xA;        foreach(var status in entity.Statuses)&#xD;&#xA;        {&#xD;&#xA;            switch(status.StatusID)&#xD;&#xA;            {&#xD;&#xA;                case 4242:&#xD;&#xA;                    output4242 += entity.Name + &quot;,&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 4360:&#xD;&#xA;                    output4360 += entity.Name + &quot;,&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 4368:&#xD;&#xA;                    output4368 += entity.Name + &quot;,&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 4358:&#xD;&#xA;                    count4358++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4359:&#xD;&#xA;                    count4359++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4361:&#xD;&#xA;                    count4361++;&#xD;&#xA;                    if(count4361 &lt; 3)&#xD;&#xA;                    {&#xD;&#xA;                        string markJson = $&quot;{{\&quot;ActorID\&quot;: 0x{entity.ID:X},\&quot;MarkType\&quot;: \&quot;stop{count4361}\&quot;,\&quot;LocalOnly\&quot;: false}}&quot;;&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;mark&quot;, markJson);&#xD;&#xA;                    }&#xD;&#xA;                    break;&#xD;&#xA;                case 4362:&#xD;&#xA;                    count4362++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4363:&#xD;&#xA;                    count4363++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4364:&#xD;&#xA;                    count4364++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4365:&#xD;&#xA;                    count4365++;&#xD;&#xA;                    if(count4365 &lt; 4)&#xD;&#xA;                    {&#xD;&#xA;                        string markJson = $&quot;{{\&quot;ActorID\&quot;: 0x{entity.ID:X},\&quot;MarkType\&quot;: \&quot;bind{count4365}\&quot;,\&quot;LocalOnly\&quot;: false}}&quot;;&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;mark&quot;, markJson);&#xD;&#xA;                    }&#xD;&#xA;                    break;&#xD;&#xA;                case 4366:&#xD;&#xA;                    count4366++;&#xD;&#xA;                    break;&#xD;&#xA;                case 4367:&#xD;&#xA;                    if(entity.Job.IsHealer == true)&#xD;&#xA;                    {&#xD;&#xA;					    count4367++;&#xD;&#xA;                        if(count4367 &lt; 9)&#xD;&#xA;                        {&#xD;&#xA;                            string markJson = $&quot;{{\&quot;ActorID\&quot;: 0x{entity.ID:X},\&quot;MarkType\&quot;: \&quot;attack{count4367}\&quot;,\&quot;LocalOnly\&quot;: false}}&quot;;&#xD;&#xA;                            RealPlugin.plug.InvokeNamedCallback(&quot;mark&quot;, markJson);&#xD;&#xA;                        }&#xD;&#xA;					}&#xD;&#xA;                    if(entity.Job.IsHealer == false)&#xD;&#xA;                    {&#xD;&#xA;                        count4367TD++;&#xD;&#xA;                        if(count4367TD &lt; 2)&#xD;&#xA;                        {&#xD;&#xA;                            string markJson = $&quot;{{\&quot;ActorID\&quot;: 0x{entity.ID:X},\&quot;MarkType\&quot;: \&quot;cross\&quot;,\&quot;LocalOnly\&quot;: false}}&quot;;&#xD;&#xA;                            RealPlugin.plug.InvokeNamedCallback(&quot;mark&quot;, markJson);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    break;&#xD;&#xA;                case 4369:&#xD;&#xA;                    count4369++;&#xD;&#xA;                    break;&#xD;&#xA;                default:&#xD;&#xA;                    break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;//输出结果&#xD;&#xA;if(output4242.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output4242 = &quot;未发现辅助自由人&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output4242 = &quot;辅助自由人是：&quot; + output4242;&#xD;&#xA;}&#xD;&#xA;if(output4360.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output4360 = &quot;未发现辅助武僧&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output4360 = &quot;辅助武僧是：&quot; + output4360;&#xD;&#xA;}&#xD;&#xA;if(output4368.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output4368 = &quot;未发现辅助预言师&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output4368 = &quot;辅助预言师是：&quot; + output4368;&#xD;&#xA;}&#xD;&#xA;var output = $&quot;附近人数：{totalCount}人\n&quot; + output4242.TrimEnd(',') + &quot;\n&quot; + output4360.TrimEnd(',') + &quot;\n&quot; + output4368.TrimEnd(',') + $&quot;\n辅助盗贼{count4369}人，辅助猎人{count4361}人，辅助时魔法师{count4365}人\n辅助骑士{count4358}人，辅助吟游诗人{count4363}人，辅助武士{count4362}人\n辅助狂战士{count4359}人,辅助风水师{count4364}人，辅助炮击士{count4366}人\n辅助药剂师{count4367+count4367TD}人（火种{count4367TD}人）&quot;;&#xD;&#xA;Log(output);" ActionType="ExecuteScript" ExecutionDelayExpression="2000" />
                  <Action OrderNumber="3" TriggerOp="DisableTrigger" TriggerId="1e8be02f-9844-472c-9334-dc0a4802a9d3" ActionType="Trigger" />
                  <Action OrderNumber="4" TriggerOp="DisableTrigger" TriggerId="ac44a147-7899-4ffa-9110-6bf60cc62b1a" ActionType="Trigger" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="6254df27-6c5e-48d5-8891-9d32822c2598" ActionType="Trigger" />
                  <Action OrderNumber="6" TriggerOp="DisableTrigger" TriggerId="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" ActionType="Trigger" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="e7ed8254-f5e5-4c10-a8b8-72e2f52d932c" Name="9.工具" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="false" Name="清除所有标记" Id="aeaac13a-ebff-4eb9-9512-73d669669331" RegularExpression="">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;bind3&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="2" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;bind2&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="3" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;bind1&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="4" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack8&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="5" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack7&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="6" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack6&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="7" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack5&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="8" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack4&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="9" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack3&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="10" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack2&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="11" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;attack1&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="12" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;stop1&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="13" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;stop2&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="14" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;square&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="15" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;circle&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="16" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;cross&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                  <Action OrderNumber="17" NamedCallbackName="mark" NamedCallbackParam="{&#xD;&#xA;  &quot;ActorID&quot;: 0xE0000000,&#xD;&#xA;  &quot;MarkType&quot;: &quot;triangle&quot;,&#xD;&#xA;  &quot;LocalOnly&quot;: false}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="时魔法师沉默提醒" Id="492dad84-832a-4172-9090-c03395699b98" RegularExpression="(?&lt;timestamp&gt;^.{14}) (?:ActionEffect|AOEActionEffect) (?&lt;type&gt;(?:15|16)):(?&lt;sourceId&gt;[^:]*):(?&lt;source&gt;[^:]*):(?&lt;id&gt;A7E5):(?&lt;ability&gt;(?:[^:]|: )*?):(?&lt;targetId&gt;[^:]*):">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/y 时魔法师（${_entity[${targetId}].Name}）被沉默了" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${_entity[${targetId}].HasStatus(4365)}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="111dd6e7-58b7-41f7-8fd3-fc8d53a4be81" Name="1.boss1" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Name="3.北分摊（向南击飞）" Id="5af89fa4-e054-480d-a5e1-e693bbf930ad" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A2E8).*?(?&lt;tid&gt;1.{7})">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="The_Forked_Tower_Blood_boss1_comet_north" ListVariableExpression="${_ffxiventity[${tid}].Name}" ActionType="ListVariable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="2.南分摊（向北击飞）" Id="9efaa332-3c75-4555-8c95-4875ee95c10c" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A2E7).*?(?&lt;tid&gt;1.{7})">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="The_Forked_Tower_Blood_boss1_comet_south" ListVariableExpression="${_ffxiventity[${tid}].Name}" ActionType="ListVariable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="4.陨石错误位置检测" Id="4ae87912-2462-4287-9a57-eb709ad55867" RegularExpression="^.{15}\S+ 105:Add.*?:BNpcID:1EBD76.*?:Heading:(?&lt;h&gt;[^:]+).*?:PosX:(?&lt;x&gt;[^:]+):PosY:(?&lt;y&gt;[^:]+):PosZ:(?&lt;z&gt;[^:]+)" PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="30000">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="禁止重复触发（后续放的标记也是这个）" DescriptionOverride="True" />
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;string outputerror = &quot;&quot;;&#xD;&#xA;var count = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        count++;&#xD;&#xA;        if(Math.Abs(entity.PosY - ${y}) &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            outputerror = outputerror + entity.Name + &quot;,&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;if(outputerror.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;没有人陨石放歪&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;陨石放歪的是：&quot; + outputerror;&#xD;&#xA;}&#xD;&#xA;outputerror=outputerror.TrimEnd(',');&#xD;&#xA;Log(outputerror + $&quot;（{count}人有陨石buff）&quot;);" ActionType="ExecuteScript" ExecutionDelayExpression="11000" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;string outputerror = &quot;&quot;;&#xD;&#xA;var count = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        count++;&#xD;&#xA;        if(Math.Abs(entity.PosY - ${y}) &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            outputerror = outputerror + entity.Name + &quot;,&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;if(outputerror.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;没有人陨石放歪&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;陨石放歪的是：&quot; + outputerror;&#xD;&#xA;}&#xD;&#xA;outputerror=outputerror.TrimEnd(',');&#xD;&#xA;Log(outputerror + $&quot;（{count}人有陨石buff）&quot;);" ActionType="ExecuteScript" ExecutionDelayExpression="100" />
                  <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;string outputerror = &quot;&quot;;&#xD;&#xA;var count = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        count++;&#xD;&#xA;        if(Math.Abs(entity.PosY - ${y}) &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            outputerror = outputerror + entity.Name + &quot;,&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;if(outputerror.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;没有人陨石放歪&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;陨石放歪的是：&quot; + outputerror;&#xD;&#xA;}&#xD;&#xA;outputerror=outputerror.TrimEnd(',');&#xD;&#xA;Log(outputerror + $&quot;（{count}人有陨石buff）&quot;);" ActionType="ExecuteScript" ExecutionDelayExpression="100" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;string outputerror = &quot;&quot;;&#xD;&#xA;var count = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        count++;&#xD;&#xA;        if(Math.Abs(entity.PosY - ${y}) &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            outputerror = outputerror + entity.Name + &quot;,&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;if(outputerror.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;没有人陨石放歪&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;陨石放歪的是：&quot; + outputerror;&#xD;&#xA;}&#xD;&#xA;outputerror=outputerror.TrimEnd(',');&#xD;&#xA;Log(outputerror + $&quot;（{count}人有陨石buff）&quot;);" ActionType="ExecuteScript" ExecutionDelayExpression="100" />
                  <Action OrderNumber="6" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;string outputerror = &quot;&quot;;&#xD;&#xA;var count = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        count++;&#xD;&#xA;        if(Math.Abs(entity.PosY - ${y}) &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            outputerror = outputerror + entity.Name + &quot;,&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;if(outputerror.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;没有人陨石放歪&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;陨石放歪的是：&quot; + outputerror;&#xD;&#xA;}&#xD;&#xA;outputerror=outputerror.TrimEnd(',');&#xD;&#xA;Log(outputerror + $&quot;（{count}人有陨石buff）&quot;);" ActionType="ExecuteScript" ExecutionDelayExpression="100" />
                  <Action OrderNumber="7" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;string outputerror = &quot;&quot;;&#xD;&#xA;var count = 0;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        count++;&#xD;&#xA;        if(Math.Abs(entity.PosY - ${y}) &gt; 3)&#xD;&#xA;        {&#xD;&#xA;            outputerror = outputerror + entity.Name + &quot;,&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;if(outputerror.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;没有人陨石放歪&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    outputerror = &quot;陨石放歪的是：&quot; + outputerror;&#xD;&#xA;}&#xD;&#xA;outputerror=outputerror.TrimEnd(',');&#xD;&#xA;Log(outputerror + $&quot;（{count}人有陨石buff）&quot;);" ActionType="ExecuteScript" ExecutionDelayExpression="100" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="0.标点" Id="f6ece347-fbf8-473a-a588-246aa0605ec7" RegularExpression="^.{15}\S+ 28:968:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: 713.5,   &quot;Z&quot;: 361, &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: 700,&quot;Z&quot;: 347.5,   &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: 686.5,   &quot;Z&quot;: 361,&quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: 686.5,   &quot;Z&quot;: 397,    &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: 700,   &quot;Z&quot;: 410.5,   &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: 713.5,    &quot;Z&quot;: 397,   &quot;Y&quot;: -481, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" ExecutionDelayExpression="10000" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss1开怪，食物检查" Id="b173f87d-3395-4757-8bd5-bc24f5f518de" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1450:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss1" ActionType="Variable" />
                  <Action OrderNumber="2" TriggerOp="EnableTrigger" TriggerId="1e8be02f-9844-472c-9334-dc0a4802a9d3" ActionType="Trigger" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss1_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;var ID8count = new VariableDictionary();&#xD;&#xA;// 使用字典初始化武士的名字和技能数量&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    foreach(var status in entity.Statuses)&#xD;&#xA;    {&#xD;&#xA;        switch(status.StatusID)&#xD;&#xA;        {&#xD;&#xA;            case 4362:&#xD;&#xA;                ID8count.SetValue(entity.HexID + entity.Name, &quot;0&quot;);&#xD;&#xA;                break;&#xD;&#xA;            default:&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;var skill8ID = new VariableDictionary();&#xD;&#xA;skill8ID.SetValue(&quot;扔钱&quot;, ID8count);&#xD;&#xA;skill8ID.SetValue(&quot;居合&quot;, ID8count);&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss1_skill&quot;, skill8ID);" ActionType="ExecuteScript" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;var output = &quot;&quot;;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;// 读取食物buff剩余时间，小于300秒告警&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;    {&#xD;&#xA;        Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;        if(status != null)&#xD;&#xA;        {&#xD;&#xA;            if(status.Timer &lt; 300)&#xD;&#xA;            {&#xD;&#xA;                output = output + entity.Name + &quot;(&quot; + (int) status.Timer + &quot;秒),&quot;;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            output = output + entity.Name + &quot;(0秒),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;//输出结果&#xD;&#xA;if(output.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output = &quot;食物时间不够的是：&quot; + output;&#xD;&#xA;}&#xD;&#xA;output = output.TrimEnd(',');&#xD;&#xA;Log(output);" ActionType="ExecuteScript" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="1.陨石半场位置" Id="346573ec-8260-40cb-8d84-ca622764b889" RegularExpression="^.{15}\S+ 105:Add.*?:BNpcID:1EBD76.*?:Heading:(?&lt;h&gt;[^:]+).*?:PosX:(?&lt;x&gt;[^:]+):PosY:(?&lt;y&gt;[^:]+):PosZ:(?&lt;z&gt;[^:]+)" PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="30000">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="禁止重复触发（后续放的标记也是这个）" DescriptionOverride="True" />
                  <Action OrderNumber="2" ListVariableOp="Push" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss1_comet" VariableExpression="${if:${y}&gt;379?南:北}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;//int count = 0;&#xD;&#xA;string output = &quot;&quot;;&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    if(entity.Statuses.Any(s =&gt; s.StatusID == 4354))&#xD;&#xA;    {&#xD;&#xA;        //count++;&#xD;&#xA;        uint playerId = entity.ID;&#xD;&#xA;        //string markJson = $&quot;{{\&quot;ActorID\&quot;: 0x{playerId:X},\&quot;MarkType\&quot;: \&quot;attack{count}\&quot;,\&quot;LocalOnly\&quot;: true}}&quot;;&#xD;&#xA;        //RealPlugin.plug.InvokeNamedCallback(&quot;mark&quot;, markJson);&#xD;&#xA;        output = output + entity.Name + &quot;,&quot;;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;output = output.TrimEnd(',');&#xD;&#xA;output = &quot;\n陨石在${var:The_Forked_Tower_Blood_boss1_comet}侧\n北侧分摊点：${lvar:The_Forked_Tower_Blood_boss1_comet_north[-1]}，${lvar:The_Forked_Tower_Blood_boss1_comet_north[-2]}\n南侧分摊点：${lvar:The_Forked_Tower_Blood_boss1_comet_south[-1]}，${lvar:The_Forked_Tower_Blood_boss1_comet_south[-2]}\n陨石点：&quot; + output;&#xD;&#xA;Log(output);" ActionType="ExecuteScript" ExecutionDelayExpression="200" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="8.boss1扔钱记录" Id="1e8be02f-9844-472c-9334-dc0a4802a9d3" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss1_skill&quot;);&#xD;&#xA;int currentCount = 0;&#xD;&#xA;if($&quot;${aid}&quot;.ToString() == &quot;A286&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1 = (skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA;    foreach(var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;        string ID = key.Substring(0, 8);&#xD;&#xA;        string name = key.Substring(8);&#xD;&#xA;        if(ID == $&quot;${sid}&quot;.ToString())&#xD;&#xA;        {&#xD;&#xA;            int.TryParse(s.Value ? .ToString(), out currentCount);&#xD;&#xA;            skill8ID1.SetValue(key, new VariableScalar&#xD;&#xA;            {&#xD;&#xA;                Value = (currentCount + 1).ToString()&#xD;&#xA;            });&#xD;&#xA;            skill8ID.SetValue(&quot;扔钱&quot;, skill8ID1);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss1_skill&quot;, skill8ID);&#xD;&#xA;}&#xD;&#xA;else if($&quot;${aid}&quot;.ToString() == &quot;A285&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1 = (skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA;    foreach(var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;        string ID = key.Substring(0, 8);&#xD;&#xA;        string name = key.Substring(8);&#xD;&#xA;        if(ID == $&quot;${sid}&quot;.ToString())&#xD;&#xA;        {&#xD;&#xA;            int.TryParse(s.Value ? .ToString(), out currentCount);&#xD;&#xA;            skill8ID1.SetValue(key, new VariableScalar&#xD;&#xA;            {&#xD;&#xA;                Value = (currentCount + 1).ToString()&#xD;&#xA;            });&#xD;&#xA;            skill8ID.SetValue(&quot;居合&quot;, skill8ID1);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss1_skill&quot;, skill8ID);&#xD;&#xA;}" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="75a40d8a-8358-4fe5-b8b6-502f00981417" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1450:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss1_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss1_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss1_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss1_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss1_skill&quot;);&#xD;&#xA;var skill8ID1 = (skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA;var skill8ID2 = (skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss1_time1};&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss1_time2};&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;;&#xD;&#xA;foreach(var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;    // string ID = key.Substring(0, 8);&#xD;&#xA;    string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA;    if(int.TryParse(count.ToString(), out int parsedValue) &amp;&amp; parsedValue &lt; time1)&#xD;&#xA;    {&#xD;&#xA;        output1 = output1 + name + $&quot;({parsedValue}次)&quot;;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;foreach(var s in skill8ID2.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;    // string ID = key.Substring(0, 8);&#xD;&#xA;    string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA;    if(int.TryParse(count.ToString(), out int parsedValue) &amp;&amp; parsedValue &lt; time2)&#xD;&#xA;    {&#xD;&#xA;        output2 = output2 + name + $&quot;({parsedValue}次)&quot;;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;if(output1.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss1所有人扔钱都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss1扔钱不合格的是：&quot; + output1;&#xD;&#xA;}&#xD;&#xA;if(output2.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss1所有人居合都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss1居合不合格的是：&quot; + output2;&#xD;&#xA;}&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot; + output1 + &quot;\n&quot; + output2);" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="1e8be02f-9844-472c-9334-dc0a4802a9d3" ActionType="Trigger" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="f5d191d1-577b-4118-a569-072562799858" Name="4.boss4" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Name="0.标点" Id="3c2c9268-907c-4fb8-b770-7d87f15f516c" RegularExpression="^.{15}\S+ 28:986:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: 700,      &quot;Z&quot;: -683,   &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: 707.8,    &quot;Z&quot;: -669.5,   &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: 692.2,    &quot;Z&quot;: -669.5,   &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: 681.38,   &quot;Z&quot;: -684.75,  &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: 718.62,   &quot;Z&quot;: -684.75,  &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: 700,      &quot;Z&quot;: -652.49,  &quot;Y&quot;: -476, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss4开怪，食物检查" Id="601073f2-6a71-4872-afd6-9835e0ab0f7d" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1453:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss4" ActionType="Variable" />
                  <Action OrderNumber="2" TriggerOp="EnableTrigger" TriggerId="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" ActionType="Trigger" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss4_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;var ID8count = new VariableDictionary();&#xD;&#xA;// 读内存&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    foreach(var status in entity.Statuses)&#xD;&#xA;    {&#xD;&#xA;     switch (status.StatusID)&#xD;&#xA;     {&#xD;&#xA;      case 4362:&#xD;&#xA;             ID8count.SetValue(entity.HexID+entity.Name,&quot;0&quot;);&#xD;&#xA;    break;&#xD;&#xA;   default:&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;var skill8ID=new VariableDictionary();&#xD;&#xA;skill8ID.SetValue(&quot;扔钱&quot;, ID8count);&#xD;&#xA;skill8ID.SetValue(&quot;居合&quot;, ID8count);&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss4_skill&quot;, skill8ID);" ActionType="ExecuteScript" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;var output = &quot;&quot;;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;// 读内存&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;    {&#xD;&#xA;        Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;        if(status != null)&#xD;&#xA;        {&#xD;&#xA;            if(status.Timer &lt; 300)&#xD;&#xA;            {&#xD;&#xA;                output = output + entity.Name + &quot;(&quot; + (int)status.Timer + &quot;秒),&quot;;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;   output = output + entity.Name + &quot;(0秒),&quot;;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;    //输出结果&#xD;&#xA;if(output.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output = &quot;食物时间不够的是：&quot; + output;&#xD;&#xA;}&#xD;&#xA;output = output.TrimEnd(',');&#xD;&#xA;Log(output);" ActionType="ExecuteScript" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="c0fdca8c-e222-4d7e-a1cf-e00386757d01" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1453:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss4_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss4_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss4_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss4_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss4_skill&quot;);&#xD;&#xA;&#xD;&#xA;var skill8ID1=(skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA;var skill8ID2=(skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss4_time1};&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss4_time2};&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;; &#xD;&#xA;&#xD;&#xA;foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;// string ID = key.Substring(0, 8);&#xD;&#xA; string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA; if(int.TryParse(count.ToString(), out int parsedValue)&amp;&amp;parsedValue&lt;time1)&#xD;&#xA; {&#xD;&#xA; output1=output1+name+$&quot;({parsedValue}次)&quot;;&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;foreach (var s in skill8ID2.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;// string ID = key.Substring(0, 8);&#xD;&#xA; string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA; if(int.TryParse(count.ToString(), out int parsedValue)&amp;&amp;parsedValue&lt;time2)&#xD;&#xA; {&#xD;&#xA; output2=output2+name+$&quot;({parsedValue}次)&quot;;&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(output1.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss4所有人扔钱都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss4扔钱不合格的是：&quot; + output1;&#xD;&#xA;}&#xD;&#xA;if(output2.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss4所有人居合都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss4居合不合格的是：&quot; + output2;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot;+output1+&quot;\n&quot;+output2);" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" ActionType="Trigger" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="8.boss4扔钱记录" Id="ab0aac1d-78bf-4a9c-b87f-0ad9955f263f" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss4_skill&quot;);&#xD;&#xA;int currentCount = 0;&#xD;&#xA;if($&quot;${aid}&quot;.ToString()==&quot;A286&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1=(skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;     string ID = key.Substring(0, 8);&#xD;&#xA;     string name = key.Substring(8);&#xD;&#xA;  if(ID==$&quot;${sid}&quot;.ToString())&#xD;&#xA;  {&#xD;&#xA;                int.TryParse(s.Value?.ToString(), out currentCount);&#xD;&#xA;    skill8ID1.SetValue(key, new VariableScalar { Value = (currentCount + 1).ToString() });&#xD;&#xA;             skill8ID.SetValue(&quot;扔钱&quot;, skill8ID1);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss4_skill&quot;,skill8ID);&#xD;&#xA;}&#xD;&#xA;if($&quot;${aid}&quot;.ToString()==&quot;A285&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1=(skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;     string ID = key.Substring(0, 8);&#xD;&#xA;     string name = key.Substring(8);&#xD;&#xA;  if(ID==$&quot;${sid}&quot;.ToString())&#xD;&#xA;  {&#xD;&#xA;                int.TryParse(s.Value?.ToString(), out currentCount);&#xD;&#xA;     skill8ID1.SetValue(key, new VariableScalar { Value = (currentCount + 1).ToString() });&#xD;&#xA; skill8ID.SetValue(&quot;居合&quot;, skill8ID1);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss4_skill&quot;,skill8ID);&#xD;&#xA;}" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="1.获取读条（符文之斧）大小圈" Id="8e117766-693a-4df4-ab05-abf58f27e0c8" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A24F):">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;// 4336小圈4337大圈&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;var tmp = &quot;&quot;;&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;;&#xD;&#xA;var output3 = &quot;&quot;;&#xD;&#xA;var output4 = &quot;&quot;;&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    Status status4336 = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4336);&#xD;&#xA;    Status status4337 = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4337);&#xD;&#xA;    if(status4336 != null)&#xD;&#xA;    {&#xD;&#xA;        double dx1 = entity.PosX - 699.69;&#xD;&#xA;        double dy1 = entity.PosY + 674.18;&#xD;&#xA;        double radians1 = Math.Atan2(dx1, dy1);&#xD;&#xA;        double dx2 = entity.PosX - 675.2;&#xD;&#xA;        double dy2 = entity.PosY + 688.32;&#xD;&#xA;        double radians2 = Math.Atan2(dx2, dy2);&#xD;&#xA;        double dx3 = entity.PosX - 700;&#xD;&#xA;        double dy3 = entity.PosY + 673.64;&#xD;&#xA;        double radians3 = Math.Atan2(dx3, dy3);&#xD;&#xA;        double dx4 = entity.PosX - 700;&#xD;&#xA;        double dy4 = entity.PosY + 645.36;&#xD;&#xA;        double radians4 = Math.Atan2(dx4, dy4);&#xD;&#xA;        double dx5 = entity.PosX - 700.31;&#xD;&#xA;        double dy5 = entity.PosY + 674.18;&#xD;&#xA;        double radians5 = Math.Atan2(dx5, dy5);&#xD;&#xA;        double dx6 = entity.PosX - 724.8;&#xD;&#xA;        double dy6 = entity.PosY + 688.32;&#xD;&#xA;        double radians6 = Math.Atan2(dx6, dy6);&#xD;&#xA;        if(radians1 &lt; -5 * Math.PI / 12 &amp;&amp; radians1 &gt; -11 * Math.PI / 12 &amp;&amp; radians2 &gt; Math.PI / 12 &amp;&amp; radians2 &lt; 7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;左上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians3 &gt; -3 * Math.PI / 12 &amp;&amp; radians3 &lt; 3 * Math.PI / 12 &amp;&amp; (radians4 &lt; -9 * Math.PI / 12|| radians4 &gt; 9 * Math.PI / 12))&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;正下&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians5 &gt; 5 * Math.PI / 12 &amp;&amp; radians5 &lt; 11 * Math.PI / 12 &amp;&amp; radians6 &lt; -1 * Math.PI / 12 &amp;&amp; radians6 &gt; -7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;右上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;错误&quot;;&#xD;&#xA;        }&#xD;&#xA;        if(status4336.Timer &lt; 14)&#xD;&#xA;        {&#xD;&#xA;            output1 = output1 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            output2 = output2 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else if(status4337 != null)&#xD;&#xA;    {&#xD;&#xA;        double dx1 = entity.PosX - 699.69;&#xD;&#xA;        double dy1 = entity.PosY + 674.18;&#xD;&#xA;        double radians1 = Math.Atan2(dx1, dy1);&#xD;&#xA;        double dx2 = entity.PosX - 675.2;&#xD;&#xA;        double dy2 = entity.PosY + 688.32;&#xD;&#xA;        double radians2 = Math.Atan2(dx2, dy2);&#xD;&#xA;        double dx3 = entity.PosX - 700;&#xD;&#xA;        double dy3 = entity.PosY + 673.64;&#xD;&#xA;        double radians3 = Math.Atan2(dx3, dy3);&#xD;&#xA;        double dx4 = entity.PosX - 700;&#xD;&#xA;        double dy4 = entity.PosY + 645.36;&#xD;&#xA;        double radians4 = Math.Atan2(dx4, dy4);&#xD;&#xA;        double dx5 = entity.PosX - 700.31;&#xD;&#xA;        double dy5 = entity.PosY + 674.18;&#xD;&#xA;        double radians5 = Math.Atan2(dx5, dy5);&#xD;&#xA;        double dx6 = entity.PosX - 724.8;&#xD;&#xA;        double dy6 = entity.PosY + 688.32;&#xD;&#xA;        double radians6 = Math.Atan2(dx6, dy6);&#xD;&#xA;        if(radians1 &lt; -5 * Math.PI / 12 &amp;&amp; radians1 &gt; -11 * Math.PI / 12 &amp;&amp; radians2 &gt; Math.PI / 12 &amp;&amp; radians2 &lt; 7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;左上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians3 &gt; -3 * Math.PI / 12 &amp;&amp; radians3 &lt; 3 * Math.PI / 12 &amp;&amp; (radians4 &lt; -9 * Math.PI / 12|| radians4 &gt; 9 * Math.PI / 12))&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;正下&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians5 &gt; 5 * Math.PI / 12 &amp;&amp; radians5 &lt; 11 * Math.PI / 12 &amp;&amp; radians6 &lt; -1 * Math.PI / 12 &amp;&amp; radians6 &gt; -7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;右上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;错误&quot;;&#xD;&#xA;        }&#xD;&#xA;        if(status4337.Timer &lt; 14)&#xD;&#xA;        {&#xD;&#xA;            output3 = output3 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            output4 = output4 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;output3 = output3.TrimEnd(',');&#xD;&#xA;output4 = output4.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot; + &quot;第一轮大圈点：&quot; + output3 + &quot;\n&quot; + &quot;第一轮小圈点：&quot; + output1 + &quot;\n&quot; + &quot;第二轮大圈点：&quot; + output4 + &quot;\n&quot; + &quot;第二轮小圈点：&quot; + output2);" ActionType="ExecuteScript" ExecutionDelayExpression="6100" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取读条（圣枪）" Id="bf23ba89-f65d-4009-9e0a-f9e2221b5d23" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:(?&lt;aid&gt;A255):">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;// 4336小圈4337大圈&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;var tmp = &quot;&quot;;&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;;&#xD;&#xA;var output3 = &quot;&quot;;&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 4338);&#xD;&#xA;    if(status != null)&#xD;&#xA;    {&#xD;&#xA;        double dx1 = entity.PosX - 699.69;&#xD;&#xA;        double dy1 = entity.PosY + 674.18;&#xD;&#xA;        double radians1 = Math.Atan2(dx1, dy1);&#xD;&#xA;        double dx2 = entity.PosX - 675.2;&#xD;&#xA;        double dy2 = entity.PosY + 688.32;&#xD;&#xA;        double radians2 = Math.Atan2(dx2, dy2);&#xD;&#xA;        double dx3 = entity.PosX - 700;&#xD;&#xA;        double dy3 = entity.PosY + 673.64;&#xD;&#xA;        double radians3 = Math.Atan2(dx3, dy3);&#xD;&#xA;        double dx4 = entity.PosX - 700;&#xD;&#xA;        double dy4 = entity.PosY + 645.36;&#xD;&#xA;        double radians4 = Math.Atan2(dx4, dy4);&#xD;&#xA;        double dx5 = entity.PosX - 700.31;&#xD;&#xA;        double dy5 = entity.PosY + 674.18;&#xD;&#xA;        double radians5 = Math.Atan2(dx5, dy5);&#xD;&#xA;        double dx6 = entity.PosX - 724.8;&#xD;&#xA;        double dy6 = entity.PosY + 688.32;&#xD;&#xA;        double radians6 = Math.Atan2(dx6, dy6);&#xD;&#xA;        if(radians1 &lt; -5 * Math.PI / 12 &amp;&amp; radians1 &gt; -11 * Math.PI / 12 &amp;&amp; radians2 &gt; Math.PI / 12 &amp;&amp; radians2 &lt; 7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;左上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians3 &gt; -3 * Math.PI / 12 &amp;&amp; radians3 &lt; 3 * Math.PI / 12 &amp;&amp; (radians4 &lt; -9 * Math.PI / 12|| radians4 &gt; 9 * Math.PI / 12))&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;正下&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(radians5 &gt; 5 * Math.PI / 12 &amp;&amp; radians5 &lt; 11 * Math.PI / 12 &amp;&amp; radians6 &lt; -1 * Math.PI / 12 &amp;&amp; radians6 &gt; -7 * Math.PI / 12)&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;右上&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            tmp = &quot;错误&quot;;&#xD;&#xA;        }&#xD;&#xA;        if(status.Timer &lt; 18)&#xD;&#xA;        {&#xD;&#xA;            output1 = output1 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(status.Timer &lt; 26)&#xD;&#xA;        {&#xD;&#xA;            output2 = output2 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;        else if(status.Timer &lt; 33)&#xD;&#xA;        {&#xD;&#xA;            output3 = output3 + entity.Name + &quot;(&quot; + tmp + &quot;),&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;output3 = output3.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot; + &quot;第一轮分摊点：&quot; + output1 + &quot;\n&quot; + &quot;第二轮分摊点：&quot; + output2 + &quot;\n&quot; + &quot;第三轮分摊点：&quot; + output3 );" ActionType="ExecuteScript" ExecutionDelayExpression="6100" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="e51ef906-0a10-44d9-b31b-1efea9e23aa2" Name="2.boss2" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名C" Id="818c38d1-54aa-463b-ad88-f799482a3758" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-813">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow2" VariableExpression="C点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                  <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/e &#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow1}&#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow2}" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback" ExecutionDelayExpression="100" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="1a.获取蓝球位置" Id="74f20443-18ab-4626-be50-a5e56b78d8fd" RegularExpression="^.{15}\S+ 107:(?&lt;sid&gt;4.{7}):(?&lt;aid&gt;A5E0):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+):(?&lt;h&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="DisableTrigger" TriggerId="74f20443-18ab-4626-be50-a5e56b78d8fd" TriggerForce="regexp,active" ActionType="Trigger" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_ax" VariableExpression="${x}" ActionType="Variable" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_ay" VariableExpression="${y}" ActionType="Variable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="1b.获取红球位置and发宏" Id="ac8e0d4d-6f8c-43e2-b3f5-d1808607e006" RegularExpression="^.{15}\S+ 107:(?&lt;sid&gt;4.{7}):(?&lt;aid&gt;A5DF):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+):(?&lt;h&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="DisableTrigger" TriggerId="ac8e0d4d-6f8c-43e2-b3f5-d1808607e006" TriggerForce="regexp,active" ActionType="Trigger" />
                  <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/e 冰球:1-&gt;3-&gt;2-&gt;4;火球3-&gt;2-&gt;4-&gt;1&#xD;&#xA;冰1：C-&gt;C-&gt;C-&gt;B;火1：A-&gt;A-&gt;A-&gt;B&#xD;&#xA;冰2：C-&gt;A-&gt;A-&gt;A;火2：A-&gt;C-&gt;C-&gt;C&#xD;&#xA;冰3：B-&gt;A-&gt;C-&gt;B;火3：D-&gt;C-&gt;B-&gt;B" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback" ExecutionDelayExpression="100">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="-28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="-28.291" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="command" NamedCallbackParam="/e 冰球:2-&gt;4-&gt;1-&gt;3;火球:1-&gt;2-&gt;3-&gt;4&#xD;&#xA;冰1：C-&gt;B-&gt;B-&gt;B;火1：B-&gt;B-&gt;A-&gt;A&#xD;&#xA;冰2：C-&gt;B-&gt;B-&gt;A;火2：C-&gt;D-&gt;D-&gt;A&#xD;&#xA;冰3：D-&gt;A-&gt;B-&gt;A;火3：B-&gt;C-&gt;D-&gt;A" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="command" NamedCallbackParam="/e 冰球:4-&gt;1-&gt;3-&gt;1;火球:2-&gt;4-&gt;1-&gt;3&#xD;&#xA;冰1：A-&gt;A-&gt;A-&gt;D;火1：C-&gt;C-&gt;C-&gt;D&#xD;&#xA;冰2：A-&gt;A-&gt;A-&gt;C;火2：C-&gt;C-&gt;C-&gt;A&#xD;&#xA;冰3：B-&gt;C-&gt;D-&gt;D;火3：D-&gt;A-&gt;B-&gt;D" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="-28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="28.291" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                  <Action OrderNumber="5" NamedCallbackName="command" NamedCallbackParam="/e 冰球:4-&gt;3-&gt;2-&gt;1;火球:3-&gt;1-&gt;4-&gt;2&#xD;&#xA;冰1：B-&gt;C-&gt;C-&gt;C;火1：D-&gt;C-&gt;C-&gt;C&#xD;&#xA;冰2：B-&gt;C-&gt;C-&gt;B;火2：D-&gt;C-&gt;C-&gt;D&#xD;&#xA;冰3：B-&gt;D-&gt;D-&gt;C;火3：D-&gt;B-&gt;B-&gt;C" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ax}-${x}" ExpressionTypeL="Numeric" ExpressionR="-28.26" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                      <ConditionSingle Enabled="true" ExpressionL="${var:The_Forked_Tower_Blood_boss2_ay}-${y}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss2开怪，食物检查" Id="63de372e-998f-40ef-a526-03e092c54d63" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1451:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss2" ActionType="Variable" />
                  <Action OrderNumber="2" TriggerOp="EnableTrigger" TriggerId="ac44a147-7899-4ffa-9110-6bf60cc62b1a" ActionType="Trigger" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;var ID8count = new VariableDictionary();&#xD;&#xA;// 读内存&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    foreach(var status in entity.Statuses)&#xD;&#xA;    {&#xD;&#xA;     switch (status.StatusID)&#xD;&#xA;     {&#xD;&#xA;      case 4362:&#xD;&#xA;             ID8count.SetValue(entity.HexID+entity.Name,&quot;0&quot;);&#xD;&#xA;    break;&#xD;&#xA;   default:&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;var skill8ID=new VariableDictionary();&#xD;&#xA;skill8ID.SetValue(&quot;扔钱&quot;, ID8count);&#xD;&#xA;skill8ID.SetValue(&quot;居合&quot;, ID8count);&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss2_skill&quot;, skill8ID);" ActionType="ExecuteScript" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;var output = &quot;&quot;;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;// 读内存&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;    {&#xD;&#xA;        Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;        if(status != null)&#xD;&#xA;        {&#xD;&#xA;            if(status.Timer &lt; 300)&#xD;&#xA;            {&#xD;&#xA;                output = output + entity.Name + &quot;(&quot; + (int)status.Timer + &quot;秒),&quot;;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;   output = output + entity.Name + &quot;(0秒),&quot;;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;    //输出结果&#xD;&#xA;if(output.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output = &quot;食物时间不够的是：&quot; + output;&#xD;&#xA;}&#xD;&#xA;output = output.TrimEnd(',');&#xD;&#xA;Log(output);" ActionType="ExecuteScript" />
                  <Action OrderNumber="6" TriggerOp="EnableTrigger" TriggerId="74f20443-18ab-4626-be50-a5e56b78d8fd" TriggerForce="regexp,active" ActionType="Trigger" />
                  <Action OrderNumber="7" TriggerOp="EnableTrigger" TriggerId="ac8e0d4d-6f8c-43e2-b3f5-d1808607e006" TriggerForce="regexp,active" ActionType="Trigger" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="0.标点" Id="08dee71e-d21e-4d1e-954b-e1cdb4059ee8" RegularExpression="^.{15}\S+ 28:985:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: -800,      &quot;Z&quot;: 352.93,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: -792.93,      &quot;Z&quot;: 360,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: -800,      &quot;Z&quot;: 367.07,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;D&quot;:     {&quot;X&quot;: -807.07,      &quot;Z&quot;: 360,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: -805,      &quot;Z&quot;: 355,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: -795,      &quot;Z&quot;: 355,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: -795,      &quot;Z&quot;: 365,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Four&quot;:  {&quot;X&quot;: -805,      &quot;Z&quot;: 365,   &quot;Y&quot;: -876, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="8edce5aa-8c3f-425c-9fa4-8131fde25963" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1451:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss2_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss2_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss2_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss2_skill&quot;);&#xD;&#xA;&#xD;&#xA;var skill8ID1=(skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA;var skill8ID2=(skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss2_time1};&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss2_time2};&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;; &#xD;&#xA;&#xD;&#xA;foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;// string ID = key.Substring(0, 8);&#xD;&#xA; string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA; if(int.TryParse(count.ToString(), out int parsedValue)&amp;&amp;parsedValue&lt;time1)&#xD;&#xA; {&#xD;&#xA; output1=output1+name+$&quot;({parsedValue}次)&quot;;&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;foreach (var s in skill8ID2.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;// string ID = key.Substring(0, 8);&#xD;&#xA; string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA; if(int.TryParse(count.ToString(), out int parsedValue)&amp;&amp;parsedValue&lt;time2)&#xD;&#xA; {&#xD;&#xA; output2=output2+name+$&quot;({parsedValue}次)&quot;;&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(output1.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss2所有人扔钱都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss2扔钱不合格的是：&quot; + output1;&#xD;&#xA;}&#xD;&#xA;if(output2.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss2所有人居合都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss2居合不合格的是：&quot; + output2;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot;+output1+&quot;\n&quot;+output2);" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="ac44a147-7899-4ffa-9110-6bf60cc62b1a" ActionType="Trigger" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="8.boss2扔钱记录" Id="ac44a147-7899-4ffa-9110-6bf60cc62b1a" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss2_skill&quot;);&#xD;&#xA;int currentCount = 0;&#xD;&#xA;if($&quot;${aid}&quot;.ToString()==&quot;A286&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1=(skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;     string ID = key.Substring(0, 8);&#xD;&#xA;     string name = key.Substring(8);&#xD;&#xA;  if(ID==$&quot;${sid}&quot;.ToString())&#xD;&#xA;  {&#xD;&#xA;                int.TryParse(s.Value?.ToString(), out currentCount);&#xD;&#xA;    skill8ID1.SetValue(key, new VariableScalar { Value = (currentCount + 1).ToString() });&#xD;&#xA;             skill8ID.SetValue(&quot;扔钱&quot;, skill8ID1);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss2_skill&quot;,skill8ID);&#xD;&#xA;}&#xD;&#xA;else if($&quot;${aid}&quot;.ToString()==&quot;A285&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1=(skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;     string ID = key.Substring(0, 8);&#xD;&#xA;     string name = key.Substring(8);&#xD;&#xA;  if(ID==$&quot;${sid}&quot;.ToString())&#xD;&#xA;  {&#xD;&#xA;                int.TryParse(s.Value?.ToString(), out currentCount);&#xD;&#xA;     skill8ID1.SetValue(key, new VariableScalar { Value = (currentCount + 1).ToString() });&#xD;&#xA; skill8ID.SetValue(&quot;居合&quot;, skill8ID1);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss2_skill&quot;,skill8ID);&#xD;&#xA;}" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名2" Id="f4198e1d-50aa-496b-85cb-07efcc950f93" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-796">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow1" VariableExpression="2点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名A" Id="322d494b-3693-41dc-b93b-e30c04d53662" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-778">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow1" VariableExpression="A点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="2.获取雪球点名4" Id="227d43d3-5028-48c0-a497-2771c4edd6f3" RegularExpression="^.{15}\S+ 14:(?&lt;sid&gt;4.{7}):[^:]*:A5D1:[^:]*:(?&lt;tid&gt;1.{7}):[^:]*:[^:]*:-800">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableExpression="${_ffxiventity[${tid}].Name}" VariableOp="SetString" VariableName="The_Forked_Tower_Blood_boss2_snow2" VariableExpression="4点方向击退：${_ffxiventity[${tid}].Name}" ActionType="Variable" />
                  <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/e &#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow1}&#xD;&#xA;${v:The_Forked_Tower_Blood_boss2_snow2}" UseTTSTextExpression="${lvar:tuanyoumingzi[${var:i}]}" VariableOp="SetString" VariableName="x" ActionType="NamedCallback" ExecutionDelayExpression="100" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="a825b56c-53ab-447e-a0d9-4a21f3925072" Name="3a.道中" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Name="0.标点" Id="6c60635b-feff-45e5-b84d-916d69dfabf2" RegularExpression="^.{15}\S+ 28:971:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: 716,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: 700,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: 684,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;D&quot;:     {&quot;X&quot;: 708,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: 716,      &quot;Z&quot;: -350.5,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: 700,      &quot;Z&quot;: -340,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: 684,      &quot;Z&quot;: -350.5,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Four&quot;:  {&quot;X&quot;: 692,      &quot;Z&quot;: -348,   &quot;Y&quot;: -500, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="0b20143a-289b-495a-a740-dfefc343973b" Name="3.boss3" Enabled="true">
            <Folders />
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="0a.boss3开怪，食物检查" Id="7b6c643a-cbcd-4859-9583-b0e31f72ecd3" RegularExpression="^.{15}\S+ 29:.{8}:7DC:02:1452:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="UnsetRegexUniversal" VariableName="^The_Forked_Tower_Blood_boss3" ActionType="Variable" />
                  <Action OrderNumber="2" TriggerOp="EnableTrigger" TriggerId="6254df27-6c5e-48d5-8891-9d32822c2598" ActionType="Trigger" />
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss3_start" VariableExpression="${_systemtime}" ActionType="Variable" />
                  <Action OrderNumber="4" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;var ID8count = new VariableDictionary();&#xD;&#xA;// 读内存&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;{&#xD;&#xA;    foreach(var status in entity.Statuses)&#xD;&#xA;    {&#xD;&#xA;     switch (status.StatusID)&#xD;&#xA;     {&#xD;&#xA;      case 4362:&#xD;&#xA;             ID8count.SetValue(entity.HexID+entity.Name,&quot;0&quot;);&#xD;&#xA;    break;&#xD;&#xA;   default:&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;var skill8ID=new VariableDictionary();&#xD;&#xA;skill8ID.SetValue(&quot;扔钱&quot;, ID8count);&#xD;&#xA;skill8ID.SetValue(&quot;居合&quot;, ID8count);&#xD;&#xA;Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss3_skill&quot;, skill8ID);" ActionType="ExecuteScript" />
                  <Action OrderNumber="5" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.Utilities;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;// 变量赋值&#xD;&#xA;var output = &quot;&quot;;&#xD;&#xA;var allEntities = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.BNpcID == 0);&#xD;&#xA;// 读内存&#xD;&#xA;foreach(var entity in allEntities)&#xD;&#xA;    {&#xD;&#xA;        Status status = entity.Statuses.FirstOrDefault(s =&gt; s.StatusID == 48);&#xD;&#xA;        if(status != null)&#xD;&#xA;        {&#xD;&#xA;            if(status.Timer &lt; 300)&#xD;&#xA;            {&#xD;&#xA;                output = output + entity.Name + &quot;(&quot; + (int)status.Timer + &quot;秒),&quot;;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;   output = output + entity.Name + &quot;(0秒),&quot;;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;    //输出结果&#xD;&#xA;if(output.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output = &quot;所有人都吃饭了&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output = &quot;食物时间不够的是：&quot; + output;&#xD;&#xA;}&#xD;&#xA;output = output.TrimEnd(',');&#xD;&#xA;Log(output);" ActionType="ExecuteScript" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="0.标点" Id="e3755221-1e2a-42a8-9ae5-5a3e4b50adc4" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1454:">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#xD;&#xA;  &quot;A&quot;:     {&quot;X&quot;: -337,      &quot;Z&quot;: 149.93,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;B&quot;:     {&quot;X&quot;: -329.93,      &quot;Z&quot;: 157,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;C&quot;:     {&quot;X&quot;: -337,      &quot;Z&quot;: 164.07,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;D&quot;:     {&quot;X&quot;: -344.07,      &quot;Z&quot;: 157,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;One&quot;:   {&quot;X&quot;: -342,      &quot;Z&quot;: 152,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Two&quot;:   {&quot;X&quot;: -332,      &quot;Z&quot;: 152,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Three&quot;: {&quot;X&quot;: -332,      &quot;Z&quot;: 162,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Four&quot;:  {&quot;X&quot;: -342,      &quot;Z&quot;: 162,   &quot;Y&quot;: -840, &quot;Active&quot;: true},&#xD;&#xA;  &quot;Log&quot;: false, &#xD;&#xA;  &quot;LocalOnly&quot;: false&#xD;&#xA;}" ActionType="NamedCallback" />
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="9.解除封锁" Id="47716f8e-c913-434b-890e-c957e2e82e27" RegularExpression="^.{15}\S+ 29:.{8}:7DE:02:1452:">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss3_time1" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss3_start})/120)}" ActionType="Variable" />
                  <Action OrderNumber="2" VariableOp="SetNumeric" VariableName="The_Forked_Tower_Blood_boss3_time2" VariableExpression="${n:floor((${_systemtime}-${v:The_Forked_Tower_Blood_boss3_start})/40)-1}" ActionType="Variable" />
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;// 日志输出函数&#xD;&#xA;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &quot; + msg);&#xD;&#xA;&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss3_skill&quot;);&#xD;&#xA;&#xD;&#xA;var skill8ID1=(skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA;var skill8ID2=(skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA;int time1 = ${v:The_Forked_Tower_Blood_boss3_time1};&#xD;&#xA;int time2 = ${v:The_Forked_Tower_Blood_boss3_time2};&#xD;&#xA;var output1 = &quot;&quot;;&#xD;&#xA;var output2 = &quot;&quot;; &#xD;&#xA;&#xD;&#xA;foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;// string ID = key.Substring(0, 8);&#xD;&#xA; string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA; if(int.TryParse(count.ToString(), out int parsedValue)&amp;&amp;parsedValue&lt;time1)&#xD;&#xA; {&#xD;&#xA; output1=output1+name+$&quot;({parsedValue}次)&quot;;&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;foreach (var s in skill8ID2.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;{&#xD;&#xA;    string key = s.Key;&#xD;&#xA;// string ID = key.Substring(0, 8);&#xD;&#xA; string name = key.Substring(8);&#xD;&#xA;    var count = s.Value;&#xD;&#xA; if(int.TryParse(count.ToString(), out int parsedValue)&amp;&amp;parsedValue&lt;time2)&#xD;&#xA; {&#xD;&#xA; output2=output2+name+$&quot;({parsedValue}次)&quot;;&#xD;&#xA; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(output1.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss3所有人扔钱都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output1 = &quot;boss3扔钱不合格的是：&quot; + output1;&#xD;&#xA;}&#xD;&#xA;if(output2.Equals(&quot;&quot;) == true)&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss3所有人居合都合格&quot;;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    output2 = &quot;boss3居合不合格的是：&quot; + output2;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;output1 = output1.TrimEnd(',');&#xD;&#xA;output2 = output2.TrimEnd(',');&#xD;&#xA;Log(&quot;\n&quot;+output1+&quot;\n&quot;+output2);" ActionType="ExecuteScript" />
                  <Action OrderNumber="4" TriggerOp="CancelAllTrigger" ActionType="Trigger" ExecutionDelayExpression="500" />
                  <Action OrderNumber="5" TriggerOp="DisableTrigger" TriggerId="6254df27-6c5e-48d5-8891-9d32822c2598" ActionType="Trigger" />
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="8.boss3扔钱记录" Id="6254df27-6c5e-48d5-8891-9d32822c2598" RegularExpression="^.{15}\S+ 108:(?&lt;sid&gt;10[^:]*):(?&lt;aid&gt;A286|A285):.*?">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using Triggernometry.Variables;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;using Triggernometry.FFXIV;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;var skill8ID = Interpreter.StaticHelpers.GetDictVariable(false, &quot;The_Forked_Tower_Blood_boss3_skill&quot;);&#xD;&#xA;int currentCount = 0;&#xD;&#xA;if($&quot;${aid}&quot;.ToString()==&quot;A286&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1=(skill8ID.GetValue(&quot;扔钱&quot;) as VariableDictionary);&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;     string ID = key.Substring(0, 8);&#xD;&#xA;     string name = key.Substring(8);&#xD;&#xA;  if(ID==$&quot;${sid}&quot;.ToString())&#xD;&#xA;  {&#xD;&#xA;                int.TryParse(s.Value?.ToString(), out currentCount);&#xD;&#xA;    skill8ID1.SetValue(key, new VariableScalar { Value = (currentCount + 1).ToString() });&#xD;&#xA;             skill8ID.SetValue(&quot;扔钱&quot;, skill8ID1);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss3_skill&quot;,skill8ID);&#xD;&#xA;}&#xD;&#xA;if($&quot;${aid}&quot;.ToString()==&quot;A285&quot;)&#xD;&#xA;{&#xD;&#xA;    var skill8ID1=(skill8ID.GetValue(&quot;居合&quot;) as VariableDictionary);&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; foreach (var s in skill8ID1.Values.OrderBy(kvp =&gt; kvp.Key))&#xD;&#xA;    {&#xD;&#xA;        string key = s.Key;&#xD;&#xA;     string ID = key.Substring(0, 8);&#xD;&#xA;     string name = key.Substring(8);&#xD;&#xA;  if(ID==$&quot;${sid}&quot;.ToString())&#xD;&#xA;  {&#xD;&#xA;                int.TryParse(s.Value?.ToString(), out currentCount);&#xD;&#xA;     skill8ID1.SetValue(key, new VariableScalar { Value = (currentCount + 1).ToString() });&#xD;&#xA; skill8ID.SetValue(&quot;居合&quot;, skill8ID1);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Interpreter.StaticHelpers.SetDictVariable(false, &quot;The_Forked_Tower_Blood_boss3_skill&quot;,skill8ID);&#xD;&#xA;}" ActionType="ExecuteScript" Asynchronous="False" />
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers />
      </Folder>
    </Folders>
    <Triggers>
      <Trigger Enabled="false" Name="使用说明" Id="8606534c-4f24-491e-9a39-d2439be92f5d" RegularExpression="">
        <Actions>
          <Action OrderNumber="1" ActionType="Placeholder" Description="本工具仅用于快速复盘，请勿出警" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="2" ActionType="Placeholder" Description="默认频道为默语e" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="3" ActionType="Placeholder" Description="由于发送频率限制，部分机制输出时使用到了换行符" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="4" ActionType="Placeholder" Description="鲶鱼精邮差会原封不动地发送换行符到聊天栏，而这是用户无法在聊天窗口中做到的。" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="5" ActionType="Placeholder" Description="所以直接将频道由e改成y存在风险，请自行斟酌" DescBgColor="fff" DescriptionOverride="True" />
          <Action OrderNumber="6" ActionType="Placeholder" Description="2025年10月7日发布" DescBgColor="fff" DescriptionOverride="True" />
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>